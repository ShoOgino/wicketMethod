	/**
	 * @see wicket.markup.html.IHeaderContributor#renderHead(wicket.markup.html.IHeaderResponse)
	 */
	public void renderHead(IHeaderResponse response) {

		// add YUI contributions
		// NOTE JavascriptResourceReference takes care of stripping comments
		// when in deployment (production) mode
		response.renderJavascriptReference(new JavascriptResourceReference(
				YuiLib.class, "yahoo.js"));
		response.renderJavascriptReference(new JavascriptResourceReference(
				YuiLib.class, "event.js"));
		response.renderJavascriptReference(new JavascriptResourceReference(
				YuiLib.class, "dom.js"));
		response.renderJavascriptReference(new JavascriptResourceReference(
				DatePicker.class, "calendar.js"));
		response.renderCSSReference(new CompressedResourceReference(
				DatePicker.class, "assets/calendar.css"));

		// not pretty to look at, but cheaper than using a template
		String markupId = getCalendarMarkupId();
		String javascriptId = getCalendarJavascriptId();
		String javascriptWidgetId = "YAHOO.wicket." + getCalendarJavascriptId();

		StringBuffer buffer = new StringBuffer();
		// initialize wicket namespace and register the init function
		// for the YUI widget
		buffer.append("YAHOO.namespace(\"wicket\");\nfunction init");
		buffer.append(javascriptId);
		buffer.append("() {\n");

		// instantiate the calendar object
		buffer.append("  ");
		buffer.append(javascriptWidgetId);
		buffer.append(" = new YAHOO.widget.Calendar(\"");
		buffer.append(javascriptId);
		buffer.append("\",\"");
		buffer.append(markupId);

		// print out the initialization properties
		Properties p = new Properties();
		configureWidgetProperties(p);
		buffer.append("\", { ");
		for (Iterator i = p.entrySet().iterator(); i.hasNext();) {
			Entry entry = (Entry) i.next();
			buffer.append(entry.getKey());
			Object value = entry.getValue();
			if (value instanceof CharSequence) {
				buffer.append(":\"");
				buffer.append(value);
				buffer.append("\"");
			} else {
				buffer.append(":");
				buffer.append(value);
			}
			// TODO handle arrays
			if (i.hasNext()) {
				buffer.append(",");
			}
		}
		buffer.append(" });\n");

		// add a listener to the calendar widget that fills in the value
		// of the passed in date text field when a selection is made,
		// after which the widget is hidden again (it starts out hidden)
		buffer.append("  YAHOO.util.Event.addListener(\"");
		String iconId = getIconId();
		buffer.append(iconId);
		buffer.append("\", \"click\", ");
		buffer.append(javascriptWidgetId);
		buffer.append(".show, ");
		buffer.append(javascriptWidgetId);
		buffer.append(", true);\n");
		buffer.append("  function selectHandler(type, args, cal) {\n");
		buffer.append("    var selDateArray = args[0][0];\n");
		buffer.append("    var yr = selDateArray[0];\n");
		buffer.append("    var month = selDateArray[1];\n");
		buffer.append("    var dt = selDateArray[2];\n");

		buffer.append("    var val = '");
		String datePattern = getDatePattern();
		// use the target component's pattern to fill in the date
		// it's quite rough (e.g. YY is still filled in as YYYY), but
		// should work without problems
		buffer.append(datePattern);
		buffer.append("'.replace(/d+/, dt).replace(/M+/, month)");
		buffer.append(".replace(/y+/, yr);\n    YAHOO.util.Dom.get(\"");
		buffer.append(component.getMarkupId());
		buffer.append("\").value = val;\n");
		buffer.append("    cal.hide();\n  }\n");
		buffer.append("  ");
		buffer.append(javascriptWidgetId);
		buffer.append(".selectEvent.subscribe(selectHandler, ");
		buffer.append(javascriptWidgetId);
		buffer.append(");\n");

		// append the javascript we want for our init function; call
		// this in an overridable method so that clients can add their
		// stuff without needing a big ass API
		appendToInit(markupId, javascriptId, javascriptWidgetId, buffer);

		// trigger rendering
		buffer.append("  ");
		buffer.append(javascriptWidgetId);
		buffer.append(".render();\n");
		buffer.append("}\n");

		// register the function for execution when the page is loaded
		buffer.append("YAHOO.util.Event.addListener(window, \"load\", init");
		buffer.append(javascriptId);
		buffer.append(");");

		buffer.insert(0, JavascriptUtils.SCRIPT_OPEN_TAG);
		buffer.append(JavascriptUtils.SCRIPT_CLOSE_TAG);
		response.renderString(buffer);
	}

