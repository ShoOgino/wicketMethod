	/**
	 * Construct.
	 * 
	 * @param id
	 *            The component id
	 * @param target
	 *            The component that recieves the calendar selections. Bound to
	 *            instances of {@link DateTextField} as this component depends
	 *            on the Joda based {@link StyleDateConverter} being used. Must
	 *            be not null.
	 * @param contributeDependencies
	 *            Whether to contribute the packaged dependencies. Pass false in
	 *            case you want to include the dependencies manually in your own
	 *            page, e.g. when you want to keep them in your web application
	 *            dir.
	 * @throws IllegalArgumentException
	 *             if the target component is null
	 */
	public CalendarPopup(String id, final DateTextField target,
			boolean contributeDependencies) {

		super(id);

		if (target == null) {
			throw new IllegalArgumentException(
					"target component must be not null");
		}
		// in case this wasn't set yet, set it now
		target.setOutputMarkupId(true);

		// add the icon that triggers popping up the widget
		final Icon icon = new Icon("icon");
		add(icon);

		// The calendar component
		final AbstractCalendar calendar = new AbstractCalendar("cal",
				contributeDependencies) {

			private static final long serialVersionUID = 1L;

			protected void appendToInit(String markupId, String javascriptId,
					String javascriptWidgetId, StringBuffer b) {

				// not pretty to look at, but cheaper than using a template
				String iconId = icon.getMarkupId();
				// add a listener to the calendar widget that fills in the value
				// of the passed in date text field when a selection is made,
				// after which the widget is hidden again (it starts out hidden)
				b.append("  YAHOO.util.Event.addListener(\"");
				b.append(iconId);
				b.append("\", \"click\", ");
				b.append(javascriptWidgetId);
				b.append(".show, ");
				b.append(javascriptWidgetId);
				b.append(", true);\n");
				b.append("  function selectHandler(type, args, cal) {\n");
				b.append("    var selDateArray = args[0][0];\n");
				b.append("    var yr = selDateArray[0];\n");
				b.append("    var month = selDateArray[1];\n");
				b.append("    var dt = selDateArray[2];\n");
				String datePattern = target.getDateConverter().getDatePattern();
				b.append("    var val = '");
				// use the target component's pattern to fill in the date
				// it's quite rough (e.g. YY is still filled in as YYYY), but
				// should work without problems
				b.append(datePattern);
				b.append("'.replace(/d+/, dt).replace(/M+/, month)");
				b.append(".replace(/y+/, yr);\n    YAHOO.util.Dom.get(\"");
				b.append(target.getMarkupId());
				b.append("\").value = val;\n");
				b.append("    cal.hide();\n  }\n");
				b.append("  ");
				b.append(javascriptWidgetId);
				b.append(".selectEvent.subscribe(selectHandler, ");
				b.append(javascriptWidgetId);
				b.append(");\n");
			}
			
			protected void configureWidgetProperties(
					Map widgetProperties) {
				super.configureWidgetProperties(widgetProperties);
				// property to display a close button
				widgetProperties.put("close", Boolean.TRUE);
			}
		};
		add(calendar);
	}

