	/**
	 * Configure the localized strings for the datepicker widget. This implementation uses
	 * {@link DateFormatSymbols} and some slight string manupilation to get the strings for months
	 * and week days. Also, the first week day is set according to the {@link Locale} returned by
	 * {@link #getLocale()}. It should work well for most locales.
	 * <p>
	 * This method is called from {@link #configure(java.util.Map, org.apache.wicket.markup.head.IHeaderResponse, java.util.Map)} and can be overridden if
	 * you want to customize setting up the localized strings but are happy with the rest of
	 * {@link #configure(java.util.Map, org.apache.wicket.markup.head.IHeaderResponse, java.util.Map)}'s behavior. Note that you can call (overridable)
	 * method {@link #getLocale()} to get the locale that should be used for setting up the widget.
	 * </p>
	 * <p>
	 * See YUI Calendar's <a href="http://developer.yahoo.com/yui/examples/calendar/germany/1.html">
	 * German</a> and <a
	 * href="http://developer.yahoo.com/yui/examples/calendar/japan/1.html">Japanese</a> examples
	 * for more info.
	 * </p>
	 * 
	 * @param widgetProperties
	 *            the current widget properties
	 * @param response
	 *            the header response
	 * @param initVariables
	 *            variables passed to the Wicket.DateTime.init() js method
	 */
	protected void localize(Map<String, Object> widgetProperties, IHeaderResponse response,
		Map<String, Object> initVariables)
	{
		Locale locale = getLocale();
		String key = "Wicket.DateTimeInit.CalendarI18n[\"" + locale.toString() + "\"]";
		initVariables.put("i18n", key);

		if (response.wasRendered(key))
		{
			return;
		}

		DateFormatSymbols dfSymbols = DateFormatSymbols.getInstance(locale);
		if (dfSymbols == null)
		{
			dfSymbols = new DateFormatSymbols(locale);
		}

		Map<String, Object> i18nVariables = new LinkedHashMap<String, Object>();
		setWidgetProperty(i18nVariables, "MONTHS_SHORT", filterEmpty(dfSymbols.getShortMonths()));
		setWidgetProperty(i18nVariables, "MONTHS_LONG", filterEmpty(dfSymbols.getMonths()));
		setWidgetProperty(i18nVariables, "WEEKDAYS_MEDIUM",
			filterEmpty(dfSymbols.getShortWeekdays()));
		setWidgetProperty(i18nVariables, "WEEKDAYS_LONG", filterEmpty(dfSymbols.getWeekdays()));

		i18nVariables.put("START_WEEKDAY", Calendar.getInstance(locale).getFirstDayOfWeek() - 1);

		if (Locale.SIMPLIFIED_CHINESE.equals(locale) || Locale.TRADITIONAL_CHINESE.equals(locale))
		{
			setWidgetProperty(i18nVariables, "WEEKDAYS_1CHAR",
				filterEmpty(substring(dfSymbols.getShortWeekdays(), 2, 1)));
			i18nVariables.put("WEEKDAYS_SHORT",
				filterEmpty(substring(dfSymbols.getShortWeekdays(), 2, 1)));
		}
		else
		{
			setWidgetProperty(i18nVariables, "WEEKDAYS_1CHAR",
				filterEmpty(substring(dfSymbols.getShortWeekdays(), 0, 1)));
			setWidgetProperty(i18nVariables, "WEEKDAYS_SHORT",
				filterEmpty(substring(dfSymbols.getShortWeekdays(), 0, 2)));
		}

		StringBuilder i18n = new StringBuilder(key);
		i18n.append('=');
		appendMapping(i18nVariables, i18n);
		i18n.append(';');

		response.render(OnDomReadyHeaderItem.forScript(i18n.toString()));

		response.wasRendered(key);
	}

