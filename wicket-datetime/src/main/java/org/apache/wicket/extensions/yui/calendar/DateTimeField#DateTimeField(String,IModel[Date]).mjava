	/**
	 * Construct.
	 * 
	 * @param id
	 * @param model
	 */
	public DateTimeField(final String id, final IModel<Date> model)
	{
		super(id, model);

		// Sets the type that will be used when updating the model for this component.
		setType(Date.class);

		// Create and add the date TextField
		PropertyModel<Date> dateFieldModel = new PropertyModel<>(this, DATE);
		add(dateField = newDateTextField(DATE, dateFieldModel));

		// Add a date picker to the date TextField
		dateField.add(newDatePicker());

		// Create and add the "hours" TextField
		add(hoursField = new TextField<Integer>(HOURS, new PropertyModel<Integer>(this, HOURS),
			Integer.class));
		hoursField.add(new HoursValidator());
		hoursField.setLabel(new Model<>(HOURS));

		// Create and add the "minutes" TextField
		add(minutesField = new TextField<Integer>(MINUTES,
			new PropertyModel<Integer>(this, MINUTES), Integer.class)
		{
			private static final long serialVersionUID = 1L;

			@SuppressWarnings("unchecked")
			@Override
			public <C> IConverter<C> getConverter(Class<C> type)
			{
				if (Integer.class.isAssignableFrom(type))
				{
					return (IConverter<C>)MINUTES_CONVERTER;
				}
				else
				{
					return super.getConverter(type);
				}
			}
		});
		minutesField.add(new RangeValidator<>(0, 59));
		minutesField.setLabel(new Model<>(MINUTES));

		// Create and add the "AM/PM" Listbox
		add(amOrPmChoice = new DropDownChoice<AM_PM>(AM_OR_PM_CHOICE, new PropertyModel<AM_PM>(
			this, AM_OR_PM), Arrays.asList(AM_PM.values())));

		add(new WebMarkupContainer("hoursSeparator")
		{
			private static final long serialVersionUID = 1L;

			@Override
			public boolean isVisible()
			{
				return minutesField.determineVisibility();
			}
		});
	}

