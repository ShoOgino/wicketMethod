	/**
	 * Test time conversion for TimeField. The day, month, year of the TimeField model should not be
	 * changed. The hours and minutes should be converted to the server's time zone based on the
	 * day, month and year of the Date model.
	 */
	@Test
	public void testTimeFieldDST()
	{
		TimeZone origJvmDef = TimeZone.getDefault();
		DateTimeZone origJodaDef = DateTimeZone.getDefault();
		TimeZone tzClient = TimeZone.getTimeZone("Canada/Eastern");
		TimeZone tzServer = TimeZone.getTimeZone("GMT");

		TimeZone.setDefault(tzServer);
		DateTimeZone.setDefault(DateTimeZone.forTimeZone(tzServer));
		WebClientInfo clientInfo = (WebClientInfo)tester.getSession().getClientInfo();
		clientInfo.getProperties().setTimeZone(tzClient);
		tester.getSession().setLocale(Locale.GERMAN);

		// Test with standard time (in client time zone)
		MutableDateTime dt = new MutableDateTime(DateTimeZone.forTimeZone(tzClient));
		dt.setDateTime(2010, 1, 15, 0, 0, 0, 0);
		Date date = new Date(dt.getMillis());
		DatesPage2 testPage = new DatesPage2();
		testPage.time = date;
		tester.startPage(testPage);
		FormTester formTester = tester.newFormTester("form");
		formTester.setValue("timeField:hours", "00");
		formTester.setValue("timeField:minutes", "00");
		formTester.submit();
		assertEquals(date, testPage.time);

		// Test with daylight savings time (in client time zone)
		dt = new MutableDateTime(DateTimeZone.forTimeZone(tzClient));
		dt.setDateTime(2010, 7, 15, 0, 0, 0, 0);
		date = new Date(dt.getMillis());
		testPage = new DatesPage2();
		testPage.time = date;
		tester.startPage(testPage);
		formTester = tester.newFormTester("form");
		formTester.setValue("timeField:hours", "00");
		formTester.setValue("timeField:minutes", "00");
		formTester.submit();
		assertEquals(date, testPage.time);

		TimeZone.setDefault(origJvmDef);
		DateTimeZone.setDefault(origJodaDef);
	}

