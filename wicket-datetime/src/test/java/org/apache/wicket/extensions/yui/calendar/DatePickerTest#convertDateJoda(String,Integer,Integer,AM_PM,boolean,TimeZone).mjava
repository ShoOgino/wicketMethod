	/**
	 * Simulate what DateTimeField does
	 * 
	 * @param dateStr
	 * @param hours
	 * @param minutes
	 * @param amOrPm
	 * @param use12HourFormat
	 * @param tzClient
	 * @return Date
	 * @throws ParseException
	 */
	public Date convertDateJoda(final String dateStr, final Integer hours, final Integer minutes,
		final AM_PM amOrPm, final boolean use12HourFormat, final TimeZone tzClient)
		throws ParseException
	{
		log.debug(">>> convertDateJoda()");

		DateTimeFormatter fmt = DateTimeFormat.shortDate();
		// fmt.withZone(timeZone).parseDateTime("10/1/06 5:00 AM");
		MutableDateTime date = (dateStr != null ? fmt.parseMutableDateTime(dateStr)
			: new MutableDateTime());

		log.debug("1. mutable date: " + date.getMillis() + "  " + date);

		// always set secs to 0
		date.setSecondOfMinute(0);
		log.debug("2. secs = 0: " + date.getMillis() + "  " + date);

		// The AM/PM field
		if (use12HourFormat)
		{
			date.set(DateTimeFieldType.halfdayOfDay(), amOrPm == AM_PM.PM ? 1 : 0);
		}
		log.debug("3. AM/PM: " + date.getMillis() + "  " + date);

		// The hours
		if (hours == null)
		{
			date.setHourOfDay(0);
		}
		else
		{
			date.set(DateTimeFieldType.hourOfDay(), hours % (use12HourFormat ? 12 : 24));
		}
		log.debug("4. hours: " + date.getMillis() + "  " + date);

		// The minutes
		if (minutes == null)
		{
			date.setMinuteOfHour(0);
		}
		else
		{
			date.setMinuteOfHour(minutes);
		}
		log.debug("5. minutes: " + date.getMillis() + "  " + date);

		// Use the client timezone to properly calculate the millisecs
		if (tzClient != null)
		{
			date.setZoneRetainFields(DateTimeZone.forTimeZone(tzClient));
		}
		log.debug("6. timezone: " + date.getMillis() + "  " + date);

		Date rtn = new Date(date.getMillis());
		log.debug("7. final date: " + rtn.getTime() + "  " + rtn);
		return rtn;
	}

