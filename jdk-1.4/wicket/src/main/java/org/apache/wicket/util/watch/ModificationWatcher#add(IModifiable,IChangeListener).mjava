	/**
	 * Adds an <code>IModifiable</code> object and an <code>IChangeListener</code> object to
	 * call when the modifiable object is modified.
	 * 
	 * @param modifiable
	 *            an <code>IModifiable</code> object to monitor
	 * @param listener
	 *            an <code>IChangeListener</code> to call if the <code>IModifiable</code> object
	 *            is modified
	 * @return <code>true</code> if the set did not already contain the specified element
	 */
	public final boolean add(final IModifiable modifiable, final IChangeListener listener)
	{
		// Look up entry for modifiable
		final Entry entry = (Entry)modifiableToEntry.get(modifiable);

		// Found it?
		if (entry == null)
		{
			if (modifiable.lastModifiedTime() != null)
			{
				// Construct new entry
				final Entry newEntry = new Entry();

				newEntry.modifiable = modifiable;
				newEntry.lastModifiedTime = modifiable.lastModifiedTime();
				newEntry.listeners.add(listener);

				// Put in map
				modifiableToEntry.put(modifiable, newEntry);
			}
			else
			{
				// The IModifiable is not returning a valid lastModifiedTime
				log.info("Cannot track modifications to resource " + modifiable);
			}

			return true;
		}
		else
		{
			// Add listener to existing entry
			return entry.listeners.add(listener);
		}
	}

