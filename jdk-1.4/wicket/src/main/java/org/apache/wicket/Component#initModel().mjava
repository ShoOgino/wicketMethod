	/**
	 * Called when a null model is about to be retrieved in order to allow a subclass to provide an
	 * initial model. This gives FormComponent, for example, an opportunity to instantiate a model
	 * on the fly using the containing Form's model.
	 * 
	 * @return The model
	 */
	protected IModel initModel()
	{
		// Search parents for CompoundPropertyModel
		for (Component current = getParent(); current != null; current = current.getParent())
		{
			// Get model
			// Don't call the getModel() that could initialize many inbetween
			// completely useless models.
			// IModel model = current.getModel();
			IModel model = current.getModelImpl();

			if (model instanceof IWrapModel && !(model instanceof IComponentInheritedModel))
			{
				model = ((IWrapModel)model).getWrappedModel();
			}

			if (model instanceof IComponentInheritedModel)
			{
				// return the shared inherited
				model = ((IComponentInheritedModel)model).wrapOnInheritance(this);
				setFlag(FLAG_INHERITABLE_MODEL, true);
				return model;
			}
		}

		// No model for this component!
		return null;
	}

