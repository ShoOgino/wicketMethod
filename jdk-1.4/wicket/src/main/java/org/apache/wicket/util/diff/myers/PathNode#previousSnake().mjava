    /**
     * Skips sequences of {@link DiffNode DiffNodes} until a {@link Snake} or
     * bootstrap node is found, or the end of the path is reached.
     * 
     * @return The next first {@link Snake} or bootstrap node in the path, or
     *         <code>null</code> if none found.
     */
    public final PathNode previousSnake()
    {
        if (isBootstrap())
		{
			return null;
		}
        if (!isSnake() && prev != null)
		{
			return prev.previousSnake();
		}
        return this;
    }

