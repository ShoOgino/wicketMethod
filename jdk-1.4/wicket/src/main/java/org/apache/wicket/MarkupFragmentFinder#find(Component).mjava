	/**
	 * Get the markup stream and position it at the component
	 * 
	 * @param component
	 * @return A MarkupStream which is positioned at the component
	 */
	final MarkupStream find(final Component component)
	{
		// Get the parent's associated markup stream.
		MarkupContainer parentWithAssociatedMarkup = component.findParentWithAssociatedMarkup();
		MarkupStream markupStream = null;

		// Might be that we have to walk up the component hierarchy
		while (true)
		{
			markupStream = parentWithAssociatedMarkup.getAssociatedMarkupStream(true);

			// In case the component has already been rendered, this is a
			// performance short cut. But actually this was necessary because
			// transparent containers and components which implement
			// IComponentResolver destroy the 1:1 match between component path
			// and markup path.
			if (component.markupIndex != -1)
			{
				// Might be that the markup has been reloaded and that the
				// position has changed. Make sure the component is still
				// available
				try
				{
					markupStream.setCurrentIndex(component.markupIndex);
					MarkupElement elem = markupStream.get();
					if (elem instanceof ComponentTag)
					{
						ComponentTag tag = (ComponentTag)elem;
						String id = tag.getId();
						if ((id != null) && id.equals(component.getId()))
						{
							// Ok, found it
							return markupStream;
						}
					}
				}
				catch (IndexOutOfBoundsException ex)
				{
					// fall through. Don't do anything
				}
			}

			// Make sure the markup stream is positioned at the correct element
			String relativePath = getComponentRelativePath(component, parentWithAssociatedMarkup);

			// If the component is defined in the markup
			int index = markupStream.findComponentIndex(relativePath, component.getId());
			if (index != -1)
			{
				// than position the stream at the beginning of the component
				markupStream.setCurrentIndex(index);
				return markupStream;
			}

			// Yet another exception for Border in the code base.
			// However if the container with the markup is a Border, than
			// ...
			if (parentWithAssociatedMarkup instanceof Border)
			{
				parentWithAssociatedMarkup = parentWithAssociatedMarkup
						.findParentWithAssociatedMarkup();
			}
			else
			{
				throw new WicketRuntimeException(
						"Unable to find the markup for the component. That may be due to transparent containers or components implementing IComponentResolver: "
								+ component.toString());
			}

			// Not found, reset the stream
			markupStream = null;
		}
	}

