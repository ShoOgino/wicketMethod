	/**
	 * If the model object exists, it is assumed to be a Collection, and it is modified in-place.
	 * Then {@link Model#setObject(Object)} is called with the same instance: it allows the Model to
	 * be notified of changes even when {@link Model#getObject()} returns a different
	 * {@link Collection} at every invocation.
	 * 
	 * @see FormComponent#updateModel()
	 * @throws UnsupportedOperationException
	 *             if the model object Collection cannot be modified
	 */
	@Override
	public void updateModel()
	{
		Collection<T> selectedValues = getModelObject();
		if (selectedValues != null)
		{
			if (getModelObject() != selectedValues)
			{
				throw new WicketRuntimeException(
					"Updating a ListMultipleChoice works by modifying the underlying model object in-place, so please make sure that getObject() always returns the same Collection instance!");
			}

			modelChanging();
			selectedValues.clear();
			selectedValues.addAll(getConvertedInput());
			modelChanged();
			// call model.setObject()
			try
			{
				getModel().setObject(selectedValues);
			}
			catch (Exception e)
			{
				// ignore this exception because it could be that there
				// is not setter for this collection.
				log.info("no setter for the property attached to " + this);
			}
		}
		else
		{
			selectedValues = getConvertedInput();
			setModelObject(selectedValues);
		}
	}

