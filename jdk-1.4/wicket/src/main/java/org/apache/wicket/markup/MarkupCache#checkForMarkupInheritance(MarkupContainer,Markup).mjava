	/**
	 * The markup has just been loaded and now we check if markup inheritance
	 * applies, which is if <org.apache.wicket:extend> is found in the markup. If yes, than
	 * load the base markups and merge the markup elements to create an updated
	 * (merged) list of markup elements.
	 * 
	 * @param container
	 *            The original requesting markup container
	 * @param markup
	 *            The markup to checked for inheritance
	 * @return A markup object with the the base markup elements resolved.
	 */
	private Markup checkForMarkupInheritance(final MarkupContainer container, final Markup markup)
	{
		// Check if markup contains <org.apache.wicket:extend> which tells us that
		// we need to read the inherited markup as well.
		int extendIndex = requiresBaseMarkup(markup);
		if (extendIndex == -1)
		{
			// return a MarkupStream for the markup
			return markup;
		}

		// get the base markup
		final Markup baseMarkup = getMarkup(container, markup.getResource().getMarkupClass()
				.getSuperclass());

		if (baseMarkup == Markup.NO_MARKUP)
		{
			throw new MarkupNotFoundException(
					"Parent markup of inherited markup not found. Component class: "
							+ markup.getResource().getContainerInfo().getContainerClass().getName()
							+ " Enable debug messages for org.apache.wicket.util.resource.Resource to get a list of all filenames tried.");
		}

		final CharSequence key = markup.getResource().getCacheKey();
		if (key != null)
		{
			// register an after-load listener for base markup. The listener
			// implementation will remove the derived markup which must be
			// merged
			// with the base markup
			afterLoadListeners.add(baseMarkup.getResource(), new IChangeListener()
			{
				/**
				 * Make sure there is only one listener per derived markup
				 * 
				 * @see java.lang.Object#equals(java.lang.Object)
				 */
				public boolean equals(Object obj)
				{
					return true;
				}

				/**
				 * Make sure there is only one listener per derived markup
				 * 
				 * @see java.lang.Object#hashCode()
				 */
				public int hashCode()
				{
					return key.hashCode();
				}

				public void onChange()
				{
					if (log.isDebugEnabled())
					{
						log.debug("Remove derived markup from cache: " + markup.getResource());
					}
					removeMarkup(markup.getResource());
				}
			});
		}

		// Merge base and derived markup
		Markup mergedMarkup = new MergedMarkup(markup, baseMarkup, extendIndex);
		return mergedMarkup;
	}

