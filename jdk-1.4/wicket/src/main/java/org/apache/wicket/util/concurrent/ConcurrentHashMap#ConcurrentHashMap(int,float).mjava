	/**
	 * Constructs a new, empty map with the specified initial capacity and the specified load
	 * factor.
	 * 
	 * @param initialCapacity
	 *            the initial capacity. The actual initial capacity is rounded to the nearest power
	 *            of two.
	 * @param loadFactor
	 *            the load factor threshold, used to control resizing. This value is used in an
	 *            approximate way: When at least a quarter of the segments of the table reach
	 *            per-segment threshold, or one of the segments itself exceeds overall threshold,
	 *            the table is doubled. This will on average cause resizing when the table-wide load
	 *            factor is slightly less than the threshold. If you'd like to avoid resizing, you
	 *            can set this to a ridiculously large value.
	 * @throws IllegalArgumentException
	 *             if the load factor is nonpositive.
	 */
	public ConcurrentHashMap(int initialCapacity, float loadFactor)
	{
		if (!(loadFactor > 0))
		{
			throw new IllegalArgumentException("Illegal Load factor: " + loadFactor);
		}
		this.loadFactor = loadFactor;
		for (int i = 0; i < segments.length; ++i)
		{
			segments[i] = new Segment();
		}
		int cap = p2capacity(initialCapacity);
		table = newTable(cap);
	}

