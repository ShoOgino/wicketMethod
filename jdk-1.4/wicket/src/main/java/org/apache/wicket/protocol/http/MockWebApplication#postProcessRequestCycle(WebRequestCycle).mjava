	/**
	 * 
	 * @param cycle
	 */
	private void postProcessRequestCycle(WebRequestCycle cycle)
	{
		previousRenderedPage = lastRenderedPage;

		// handle redirects which are usually managed by the browser
		// transparently
		final MockHttpServletResponse httpResponse = (MockHttpServletResponse)cycle
				.getWebResponse().getHttpServletResponse();

		if (httpResponse.isRedirect())
		{
			this.lastRenderedPage = generateLastRenderedPage(cycle);

			MockHttpServletRequest newHttpRequest = new MockHttpServletRequest(this.application,
					servletSession, this.application.getServletContext());
			newHttpRequest.setRequestToRedirectString(httpResponse.getRedirectLocation());
			wicketRequest = this.application.newWebRequest(newHttpRequest);
			wicketSession = this.application.getSession(wicketRequest, wicketResponse);

			cycle = createRequestCycle();
			cycle.request();
		}
		this.lastRenderedPage = generateLastRenderedPage(cycle);

		Session.set(getWicketSession());

		if (getLastRenderedPage() instanceof ExceptionErrorPage)
		{
			throw (RuntimeException)((ExceptionErrorPage)getLastRenderedPage()).getThrowable();
		}
	}

