	/**
	 * 
	 * @see javax.servlet.Filter#init(javax.servlet.FilterConfig)
	 */
	public void init(FilterConfig filterConfig) throws ServletException
	{
		this.filterConfig = filterConfig;

		if (SERVLET_PATH_HOLDER.equals(filterConfig.getInitParameter(FILTER_MAPPING_PARAM)))
		{
			servletMode = true;
		}

		final ClassLoader previousClassLoader = Thread.currentThread().getContextClassLoader();
		try
		{
			Thread.currentThread().setContextClassLoader(getClassLoader());

			// Try to configure filterPath from web.xml if it's not specified as
			// an init-param.
			if (filterConfig.getInitParameter(WicketFilter.FILTER_MAPPING_PARAM) == null)
			{
				InputStream is = filterConfig.getServletContext().getResourceAsStream(
						"/WEB-INF/web.xml");
				if (is != null)
				{
					try
					{
						filterPath = getFilterPath(filterConfig.getFilterName(), is);
					}
					catch (Exception e)
					{
						log.debug("Error parsing web.xml", e);
						// Swallow IOException or SecurityException or similar,
						// and log.info below.
					}
				}
				if (filterPath == null)
				{
					log.info("Unable to parse filter mapping web.xml for "
							+ filterConfig.getFilterName() + ". " + "Configure with init-param "
							+ FILTER_MAPPING_PARAM + " if it is not \"/*\".");
				}
			}

			IWebApplicationFactory factory = getApplicationFactory();

			// Construct WebApplication subclass
			this.webApplication = factory.createApplication(this);

			// Set this WicketFilter as the filter for the web application
			this.webApplication.setWicketFilter(this);

			// Store instance of this application object in servlet context to
			// make integration with outside world easier
			String contextKey = "org.apache.wicket:" + filterConfig.getFilterName();
			filterConfig.getServletContext().setAttribute(contextKey, this.webApplication);

			Application.set(webApplication);

			// Call internal init method of web application for default
			// initialisation
			this.webApplication.internalInit();

			// Call init method of web application
			this.webApplication.init();

			// We initialize components here rather than in the constructor or
			// in the internal init, because in the init method class aliases
			// can be added, that would be used in installing resources in the
			// component.
			this.webApplication.initializeComponents();

			// Give the application the option to log that it is started
			this.webApplication.logStarted();
		}
		finally
		{
			Application.unset();
			Thread.currentThread().setContextClassLoader(previousClassLoader);
		}
	}

