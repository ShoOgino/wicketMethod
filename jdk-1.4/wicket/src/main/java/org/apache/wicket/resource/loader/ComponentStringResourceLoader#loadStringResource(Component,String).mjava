	/**
	 * 
	 * @see org.apache.wicket.resource.loader.IStringResourceLoader#loadStringResource(org.apache.wicket.Component,
	 *      java.lang.String)
	 */
	public String loadStringResource(final Component component, final String key)
	{
		if (component == null)
		{
			return null;
		}

		// The return value
		String string = null;
		Locale locale = component.getLocale();
		String style = component.getStyle();

		// The key prefix is equal to the component path relativ to the
		// current component on the top of the stack.
		String prefix = Strings.replaceAll(component.getPageRelativePath(), ":", ".").toString();

		// The reason why we need to create that stack is because we need to
		// walk it downwards starting with Page down to the Component
		List searchStack = getComponentStack(component);

		// Walk the component hierarchy down from page to the component
		for (int i = searchStack.size() - 1; (i >= 0) && (string == null); i--)
		{
			Class clazz = (Class)searchStack.get(i);

			// First, try the fully qualified resource name relative to the
			// component on the path from page down.
			if ((prefix != null) && (prefix.length() > 0))
			{
				string = loadStringResource(clazz, prefix + '.' + key, locale, style);

				if (string == null)
				{
					prefix = Strings.afterFirst(prefix, '.');
				}
			}

			// If not found, than check if a property with the 'key' provided by
			// the user can be found.
			if (string == null)
			{
				string = loadStringResource(clazz, key, locale, style);
			}
		}

		return string;
	}

