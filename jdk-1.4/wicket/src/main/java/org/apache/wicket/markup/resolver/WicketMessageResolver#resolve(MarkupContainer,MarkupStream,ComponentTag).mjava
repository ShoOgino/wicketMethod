	/**
	 * Try to resolve the tag, then create a component, add it to the container
	 * and render it.
	 * 
	 * @see org.apache.wicket.markup.resolver.IComponentResolver#resolve(MarkupContainer,
	 *      MarkupStream, ComponentTag)
	 * 
	 * @param container
	 *            The container parsing its markup
	 * @param markupStream
	 *            The current markupStream
	 * @param tag
	 *            The current component tag while parsing the markup
	 * @return true, if componentId was handle by the resolver. False, otherwise
	 */
	public boolean resolve(final MarkupContainer container, final MarkupStream markupStream,
			final ComponentTag tag)
	{
		// It must be <body onload>
		if (tag instanceof WicketTag)
		{
			WicketTag wtag = (WicketTag)tag;
			if (wtag.isMessageTag())
			{
				String messageKey = wtag.getAttributes().getString("key");
				if ((messageKey == null) || (messageKey.trim().length() == 0))
				{
					throw new MarkupException(
							"Wrong format of <wicket:message key='xxx'>: attribute 'key' is missing");
				}

				final String value = container.getApplication().getResourceSettings()
						.getLocalizer().getString(messageKey, container, "");

				final String id = "_message_" + container.getPage().getAutoIndex();
				Component component = null;
				if ((value != null) && (value.trim().length() > 0))
				{
					component = new MyLabel(id, value);
				}
				else
				{
					log.info("No value found for message key: " + messageKey);
					component = new WebMarkupContainer(id);
				}

				component.setRenderBodyOnly(container.getApplication().getMarkupSettings()
						.getStripWicketTags());

				container.autoAdd(component);

				// Yes, we handled the tag
				return true;
			}
		}

		// We were not able to handle the tag
		return false;
	}

