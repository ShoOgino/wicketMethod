	/**
	 * Retrieves id by which this component is represented within the markup. This is either the id
	 * attribute set explicitly via a call to {@link #setMarkupId(String)}, id attribute defined in
	 * the markup, or an automatically generated id - in that order.
	 * <p>
	 * If no explicit id is set this function will generate an id value that will be unique in the
	 * page. This is the preferred way as there is no chance of id collision.
	 * <p>
	 * Note: This method should only be called after the component or its parent have been added to
	 * the page.
	 * 
	 * @return markup id of the component
	 */
	public String getMarkupId()
	{
		Object storedMarkupId = getMarkupIdImpl();

		if (storedMarkupId instanceof String)
		{
			return (String)storedMarkupId;
		}

		final int generatedMarkupId = storedMarkupId instanceof Integer ? ((Integer)storedMarkupId)
				.intValue() : nextAutoIndex();

		if (storedMarkupId == null)
		{
			setMarkupIdImpl(new Integer(generatedMarkupId));
		}

		// try to read from markup
		// TODO getting the id from markup doesn't work everywhere yet.
		// unfortunately, we have to drop this until we have a good solution
		// for issue http://issues.apache.org/jira/browse/WICKET-694
		// markupId = getMarkupAttributes().getString("id");

		String markupId = RequestContext.get().encodeMarkupId(getId() + generatedMarkupId);
		// make sure id is compliant with w3c requirements (starts with a
		// letter)
		char c = markupId.charAt(0);
		if (!Character.isLetter(c))
		{
			markupId = "id" + markupId;
		}

		// escape some noncompliant characters
		markupId = Strings.replaceAll(markupId, "_", "__").toString();
		markupId = markupId.replace('.', '_');
		markupId = markupId.replace('-', '_');

		return markupId;
	}

