	/**
	 * Processes components added to the target. This involves attaching components, rendering
	 * markup into a client side xml envelope, and detaching them
	 * 
	 * @param response
	 */
	private void respondComponents(WebResponse response)
	{
		Iterator it;

		// process feedback

		// TODO do we need these special pre-attach feedback traversals all over
		// the place?
		it = markupIdToComponent.values().iterator();
		while (it.hasNext())
		{
			final Component component = (Component)it.next();

			if (component instanceof MarkupContainer)
			{
				MarkupContainer container = (MarkupContainer)component;

				// collect feedback
				container.visitChildren(IFeedback.class, new IVisitor()
				{
					public Object component(Component component)
					{
						((IFeedback)component).updateFeedback();
						return IVisitor.CONTINUE_TRAVERSAL;
					}
				});
			}

			if (component instanceof IFeedback)
			{
				((IFeedback)component).updateFeedback();
			}
		}

		// we need to attach feedback components here because they are not
		// attached in MarkupContainer#attachChildren()
		it = markupIdToComponent.values().iterator();
		while (it.hasNext())
		{
			final Component component = (Component)it.next();

			if (component instanceof IFeedback)
			{
				component.attach();
			}

			if (component instanceof MarkupContainer)
			{
				MarkupContainer container = (MarkupContainer)component;

				// collect feedback
				container.visitChildren(IFeedback.class, new IVisitor()
				{
					public Object component(Component component)
					{
						component.attach();
						return IVisitor.CONTINUE_TRAVERSAL;
					}
				});
			}

		}


		// attach components
		it = markupIdToComponent.values().iterator();
		while (it.hasNext())
		{
			((Component)it.next()).attach();
		}

		// process component markup
		it = markupIdToComponent.entrySet().iterator();
		while (it.hasNext())
		{
			final Map.Entry entry = (Entry)it.next();
			final Component component = (Component)entry.getValue();
			final String markupId = (String)entry.getKey();

			respondComponent(response, markupId, component);
		}
	}

