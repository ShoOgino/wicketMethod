	private MarkupStream findMarkupStream(Component owner)
	{
		// TODO we should open up the api to do this for any class
		// not just a
		// MarkupContainer so all this logic does not have to be duplicated here
		final String markupType = getMarkupType(owner);

		// Get locator to search for the resource
		final IResourceStreamLocator locator = Application.get().getResourceSettings()
				.getResourceStreamLocator();


		final Session session = Session.get();
		final String style = session.getStyle();
		final Locale locale = session.getLocale();

		MarkupResourceStream markupResourceStream = null;
		Class containerClass = getClass();

		while (!(containerClass.equals(MarkupComponentBorder.class)))
		{
			String path = containerClass.getName().replace('.', '/');
			IResourceStream resourceStream = locator.locate(containerClass, path, style, locale,
					markupType);

			// Did we find it already?
			if (resourceStream != null)
			{
				ContainerInfo ci = new ContainerInfo(containerClass, locale, style, null,
						markupType);
				markupResourceStream = new MarkupResourceStream(resourceStream, ci, containerClass);

				break; // TODO jcompagner: was this break missing here on
				// purpose?
			}

			// Walk up the class hierarchy one level, if markup has not
			// yet been found
			containerClass = containerClass.getSuperclass();
		}

		if (markupResourceStream == null)
		{
			throw new WicketRuntimeException("Could not find markup for component border `"
					+ getClass().getName() + "`");
		}

		try
		{
			Markup markup = Application.get().getMarkupSettings().getMarkupParserFactory()
					.newMarkupParser().readAndParse(markupResourceStream);
			return new MarkupStream(markup);
		}
		catch (Exception e)
		{
			throw new WicketRuntimeException("Could not parse markup from markup resource stream: "
					+ markupResourceStream.toString());
		}
	}

