	/**
	 * Handles servlet page requests.
	 * 
	 * @param servletRequest
	 *            Servlet request object
	 * @param servletResponse
	 *            Servlet response object
	 * @throws ServletException
	 *             Thrown if something goes wrong during request handling
	 * @throws IOException
	 */
	public void doGet(final HttpServletRequest servletRequest,
			final HttpServletResponse servletResponse) throws ServletException, IOException
	{
		String relativePath = getRelativePath(servletRequest);

		// Special-case for home page - we redirect to add a trailing slash.
		if (relativePath.length() == 0 &&
				!Strings.stripJSessionId(servletRequest.getRequestURI()).endsWith("/"))
		{
			final String redirectUrl = servletRequest.getRequestURI() + "/";
			servletResponse.sendRedirect(servletResponse.encodeRedirectURL(redirectUrl));
			return;
		}

		final ClassLoader previousClassLoader = Thread.currentThread().getContextClassLoader();
		final ClassLoader newClassLoader = getClassLoader();
		try
		{
			if (previousClassLoader != newClassLoader)
			{
				Thread.currentThread().setContextClassLoader(newClassLoader);
			}

			// If the request does not provide information about the encoding of
			// its body (which includes POST parameters), than assume the
			// default encoding as defined by the wicket application. Bear in
			// mind that the encoding of the request usually is equal to the
			// previous response.
			// However it is a known bug of IE that it does not provide this
			// information. Please see the wiki for more details and why all
			// other browser deliberately copied that bug.
			if (servletRequest.getCharacterEncoding() == null)
			{
				try
				{
					// The encoding defined by the wicket settings is used to
					// encode the responses. Thus, it is reasonable to assume
					// the request has the same encoding. This is especially
					// important for forms and form parameters.
					servletRequest.setCharacterEncoding(webApplication.getRequestCycleSettings()
							.getResponseRequestEncoding());
				}
				catch (UnsupportedEncodingException ex)
				{
					throw new WicketRuntimeException(ex.getMessage());
				}
			}

			final RequestCycle existingRequestCycle = RequestCycle.get();

			// Create a new webrequest
			final WebRequest request = existingRequestCycle != null
					? (WebRequest)existingRequestCycle.getRequest()
					: webApplication.newWebRequest(servletRequest);

			// Are we using REDIRECT_TO_BUFFER?
			if (webApplication.getRequestCycleSettings().getRenderStrategy() == IRequestCycleSettings.REDIRECT_TO_BUFFER)
			{
				// Try to see if there is a redirect stored
				ISessionStore sessionStore = webApplication.getSessionStore();
				String sessionId = sessionStore.getSessionId(request, false);
				if (sessionId != null)
				{
					BufferedHttpServletResponse bufferedResponse = null;
					String queryString = servletRequest.getQueryString();
					if (!Strings.isEmpty(queryString))
					{
						bufferedResponse = webApplication.popBufferedResponse(sessionId,
								queryString);
					}
					else
					{
						bufferedResponse = webApplication.popBufferedResponse(sessionId,
								relativePath);
					}

					if (bufferedResponse != null)
					{
						bufferedResponse.writeTo(servletResponse);
						// redirect responses are ignored for the request
						// logger...
						return;
					}
				}
			}

			// First, set the webapplication for this thread
			Application.set(webApplication);

			// Create a response object and set the output encoding according to
			// wicket's application setttings.
			final WebResponse response = existingRequestCycle != null
					? (WebResponse)existingRequestCycle.getResponse()
					: webApplication.newWebResponse(servletResponse);
			response.setAjax(request.isAjax());
			response.setCharacterEncoding(webApplication.getRequestCycleSettings()
					.getResponseRequestEncoding());

			try
			{
				// Create request cycle
				RequestCycle cycle = existingRequestCycle != null
						? existingRequestCycle
						: webApplication.newRequestCycle(request, response);

				try
				{
					// Process request
					cycle.request();
				}
				catch (AbortException e)
				{
					// noop
				}
			}
			finally
			{
				// Close response
				response.close();

				// Clean up thread local session
				Session.unset();

				// Clean up thread local application
				Application.unset();
			}
		}
		finally
		{
			if (newClassLoader != previousClassLoader)
			{
				Thread.currentThread().setContextClassLoader(previousClassLoader);
			}
		}
	}

