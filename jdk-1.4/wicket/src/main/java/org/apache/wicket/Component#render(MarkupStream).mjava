	/**
	 * Performs a render of this component as part of a Page level render process.
	 * <p>
	 * For component level re-render (e.g. AJAX) please call {@link #renderComponent(MarkupStream)}.
	 * Though render() does seem to work, it will fail for panel children.
	 * 
	 * @param markupStream
	 */
	public final void render(final MarkupStream markupStream)
	{
		// We need to know the index before we do the visibility check.
		// Otherwise
		// we wouldn't know the markup index for invisible components
		if (markupStream != null)
		{
			markupIndex = markupStream.getCurrentIndex();
		}

		markRendering();

		setMarkupStream(markupStream);
		setFlag(FLAG_HAS_BEEN_RENDERED, true);

		// Determine if component is visible using it's authorization status
		// and the isVisible property.
		if (isRenderAllowed() && isVisible())
		{
			// Rendering is beginning
			if (log.isDebugEnabled())
			{
				log.debug("Begin render " + this);
			}

			try
			{
				// Call implementation to render component
				notifyBehaviorsComponentBeforeRender();
				final IComponentBorder border = getComponentBorder();
				if (border != null)
				{
					border.renderBefore(this);
				}
				onRender(markupStream);
				if (border != null)
				{
					border.renderAfter(this);
				}
				// Component has been rendered
				rendered();
			}
			catch (RuntimeException ex)
			{
				// Call each behaviors onException() to allow the
				// behavior to clean up
				List behaviors = getBehaviorsImpl();
				if (behaviors != null)
				{
					for (Iterator i = behaviors.iterator(); i.hasNext();)
					{
						IBehavior behavior = (IBehavior)i.next();
						if (isBehaviorAccepted(behavior))
						{
							try
							{
								behavior.exception(this, ex);
							}
							catch (Throwable ex2)
							{
								log.error("Error while cleaning up after exception", ex2);
							}
						}
					}
				}

				// Re-throw the exception
				throw ex;
			}

			if (log.isDebugEnabled())
			{
				log.debug("End render " + this);
			}
		}
		// markupStream is null when rendering a page
		else if (markupStream != null)
		{
			if (getFlag(FLAG_PLACEHOLDER))
			{
				// write out a placeholder tag into the markup
				final ComponentTag tag = markupStream.getTag();

				String namespacePrefix = Strings.isEmpty(tag.getNamespace()) ? null
					: tag.getNamespace() + ":";

				getResponse().write("<");
				if (namespacePrefix != null)
				{
					getResponse().write(namespacePrefix);
				}
				getResponse().write(tag.getName());
				getResponse().write(" id=\"");
				getResponse().write(getMarkupId());
				getResponse().write("\" style=\"display:none\"></");
				if (namespacePrefix != null)
				{
					getResponse().write(namespacePrefix);
				}
				getResponse().write(tag.getName());
				getResponse().write(">");
			}
			markupStream.skipComponent();
		}
	}

