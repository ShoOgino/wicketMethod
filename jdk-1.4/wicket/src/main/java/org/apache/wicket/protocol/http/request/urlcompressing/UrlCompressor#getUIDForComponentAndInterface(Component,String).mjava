	/**
	 * Returns a uid for the combination component and the to call interface. Will return the same
	 * uid if it was already called for this specific combination.
	 * 
	 * @param component
	 *            The Component
	 * @param interfaceName
	 *            The interface name
	 * @return int The uid for the component/interfaceName combination
	 */
	public int getUIDForComponentAndInterface(Component component, String interfaceName)
	{
		int uid = 0;
		Iterator it = directComponentRefs.entrySet().iterator();
		while (it.hasNext())
		{
			IntHashMap.Entry entry = (IntHashMap.Entry)it.next();
			ComponentAndInterface cai = (ComponentAndInterface)entry.getValue();
			if (cai.getInterfaceName().equals(interfaceName) && cai.getComponent() == component)
			{
				uid = entry.getKey();
				break;
			}
		}
		if (uid == 0)
		{
			uid = getNewUID();
			IntKeyWeakReference ref = new IntKeyWeakReference(uid, component, queue);
			directComponentRefs.put(uid, new ComponentAndInterface(ref, interfaceName));
		}
		return uid;
	}

