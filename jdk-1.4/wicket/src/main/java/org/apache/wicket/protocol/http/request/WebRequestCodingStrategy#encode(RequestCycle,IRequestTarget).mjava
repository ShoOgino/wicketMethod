	/**
	 * Encode the given request target. If a mount is found, that mounted url
	 * will be returned. Otherwise, one of the delegation methods will be
	 * called. In case you are using custom targets that are not part of the
	 * default target hierarchy, you need to override
	 * {@link #doEncode(RequestCycle, IRequestTarget)}, which will be called
	 * after the defaults have been tried. When that doesn't provide a url
	 * either, and exception will be thrown saying that encoding could not be
	 * done.
	 * 
	 * @see org.apache.wicket.request.IRequestCodingStrategy#encode(org.apache.wicket.RequestCycle,
	 *      org.apache.wicket.IRequestTarget)
	 */
	public final CharSequence encode(final RequestCycle requestCycle,
			final IRequestTarget requestTarget)
	{
		// First check to see whether the target is mounted
		CharSequence url = pathForTarget(requestTarget);
		
		if (url != null) {
			// Do nothing - we've found the URL and it's mounted.
		}
		else if (requestTarget instanceof IBookmarkablePageRequestTarget)
		{
			url = encode(requestCycle, (IBookmarkablePageRequestTarget)requestTarget);
		}
		else if (requestTarget instanceof ISharedResourceRequestTarget)
		{
			url = encode(requestCycle, (ISharedResourceRequestTarget)requestTarget);
		}
		else if (requestTarget instanceof IListenerInterfaceRequestTarget)
		{
			url = encode(requestCycle, (IListenerInterfaceRequestTarget)requestTarget);
		}
		else if (requestTarget instanceof IPageRequestTarget)
		{
			// This calls page.urlFor(IRedirectListener.INTERFACE), which calls
			// the function we're in again. We therefore need to jump out here and
			// return the url immediately, otherwise we end up prefixing it with
			// relative path or absolute prefixes twice.
			url = encode(requestCycle, (IPageRequestTarget)requestTarget);
			return url;
		}
		// fallthough for non-default request targets
		else
		{
			url = doEncode(requestCycle, requestTarget);
		}
		
		if (url != null)
		{
			String relativeUrl = requestCycle.getRequest().getPath();
			
			// Add the actual URL.
			PrependingStringBuffer prepender = new PrependingStringBuffer(url.toString());
			
			// If we're displaying an error page, we need to display relative URLs
			// relative to that, not the servlet container request.
			HttpServletRequest httpRequest = ((WebRequest)requestCycle.getRequest()).getHttpServletRequest();
			
			String errorUrl = (String)httpRequest.getAttribute("javax.servlet.error.request_uri");
			String forwardUrl = (String)httpRequest.getAttribute("javax.servlet.forward.servlet_path");
			// We get an errorUrl for 404 pages and the like if we're a servlet.
			if (errorUrl != null)
			{
				String servletPath = httpRequest.getServletPath();
				if (servletPath.endsWith(relativeUrl))
				{
					servletPath = servletPath.substring(0, servletPath.length() - relativeUrl.length() - 1);
				}
				String foo = httpRequest.getPathInfo();
				errorUrl = errorUrl.substring(httpRequest.getContextPath().length());
				
				if (!errorUrl.startsWith(servletPath))
				{
					prepender.prepend(servletPath.substring(1) + "/");
				}
				for (int i = servletPath.length() + 1; i < errorUrl.length(); i++)
				{
					if (errorUrl.charAt(i) == '?')
					{
						break;
					}
					if (errorUrl.charAt(i) == '/')
					{
						prepender.prepend("../");
					}
				}
				return requestCycle.getOriginalResponse().encodeURL(prepender.toString());
			} 
			
			// We get a forwardUrl for 404 pages and the like if we're a filter.
			if (forwardUrl != null)
			{
				// Strip off leading slash, if forwardUrl has any length.
				relativeUrl = forwardUrl.substring(relativeUrl.length() > 0 ? 1 : 0);
				
			}
						
			// If we're a bookmarkable page or a shared resource, make the path
			// relative and prefix with ../
			if (requestTarget instanceof BookmarkablePageRequestTarget ||
				requestTarget instanceof ISharedResourceRequestTarget)
			{
				for (int i = 0; i < relativeUrl.length(); i++)
				{
					if (relativeUrl.charAt(i) == '?')
					{
						break;
					}
					if (relativeUrl.charAt(i) == '/')
					{
						prepender.prepend("../");
					}
				}
			}
			else if (url.length() > 0 && url.charAt(0) == '?')
			{
				// Keep the last part of mounted pages for resource/interface links.
				// E.g. if we generate app/Clients we want links like "Clients?org.apache.wicket:interface[...]"
				prepender.prepend(relativeUrl.substring(relativeUrl.lastIndexOf("/") + 1));
			}
			// Fix for the special case where we're linking to the home page; make the link "./" not "".
			if (prepender.length() == 0)
			{
				prepender.prepend("./");
			}
			return requestCycle.getOriginalResponse().encodeURL(prepender.toString());
		}
		
		// Just return null intead of throwing an exception. So that it can be
		// handled better
		return null;
	}

