	/**
	 * Render the markup starting at the current position of the markup strean
	 * 
	 * @see #onComponentTagBody(MarkupStream, ComponentTag)
	 * 
	 * @param providerMarkupStream
	 * @param openTag
	 */
	private void renderFragment(final MarkupStream providerMarkupStream, final ComponentTag openTag)
	{
		// remember the current position in the markup. Will have to come back
		// to it.
		int currentIndex = providerMarkupStream.getCurrentIndex();

		// Find the markup fragment
		int index = providerMarkupStream.findComponentIndex(null, markupId);
		if (index == -1)
		{
			throw new MarkupException("Markup of component class `" +
					providerMarkupStream.getContainerClass().getName() +
					"` does not contain a fragment with wicket:id `" + markupId + "`. Context: " +
					toString());
		}

		// Set the markup stream position to where the fragment begins
		providerMarkupStream.setCurrentIndex(index);

		try
		{
			// Get the fragments open tag
			ComponentTag fragmentOpenTag = providerMarkupStream.getTag();

			// We'll completely ignore the fragments open tag. It'll not be
			// rendered
			providerMarkupStream.next();

			// Render the body of the fragment
			super.onComponentTagBody(providerMarkupStream, fragmentOpenTag);
		}
		finally
		{
			// Make sure the markup stream is positioned where we started back
			// at the original component
			providerMarkupStream.setCurrentIndex(currentIndex);
		}
	}

