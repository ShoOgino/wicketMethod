	/**
	 * Scans the given markup and extracts balancing tags.
	 * 
	 */
	private void parseMarkup()
	{
		// Get relevant settings from the Application
		final boolean stripComments = this.markupSettings.getStripComments();
		final boolean compressWhitespace = this.markupSettings.getCompressWhitespace();

		try
		{
			// always remember the latest index (size)
			int size = this.markup.size();

			// Loop through tags
			ComponentTag tag;
			while (null != (tag = getNextTag()))
			{
				boolean add = (tag.getId() != null);
				if (!add && tag.getXmlTag().isClose())
				{
					add = ((tag.getOpenTag() != null) && (tag.getOpenTag().getId() != null));
				}

				// Add tag to list?
				if (add || tag.isModified())
				{
					// Add text from last position to the current tag position
					final CharSequence text = xmlParser.getInputFromPositionMarker(tag.getPos());
					if (text.length() > 0)
					{
						String rawMarkup = text.toString();

						if (stripComments)
						{
							rawMarkup = removeComment(rawMarkup);
						}

						if (compressWhitespace)
						{
							rawMarkup = compressWhitespace(rawMarkup);
						}

						// Make sure you add it at the correct location.
						// IMarkupFilters might have added elements as well.
						this.markup.addMarkupElement(size, new RawMarkup(rawMarkup));
					}

					if (add)
					{
						// Add to the markup unless the tag has been flagged as
						// to be removed from the markup. (e.g. <wicket:remove>
						if (tag.isIgnore() == false)
						{
							this.markup.addMarkupElement(tag);
						}
					}
					else if (tag.isModified())
					{
						this.markup.addMarkupElement(new RawMarkup(tag.toCharSequence()));
					}

					xmlParser.setPositionMarker();
				}

				// always remember the latest index (size)
				size = this.markup.size();
			}
		}
		catch (final ParseException ex)
		{
			// Add remaining input string
			final CharSequence text = xmlParser.getInputFromPositionMarker(-1);
			if (text.length() > 0)
			{
				this.markup.addMarkupElement(new RawMarkup(text));
			}

			this.markup.setEncoding(xmlParser.getEncoding());
			this.markup.setXmlDeclaration(xmlParser.getXmlDeclaration());

			final MarkupStream markupStream = new MarkupStream(markup);
			markupStream.setCurrentIndex(this.markup.size() - 1);
			throw new MarkupException(markupStream, ex.getMessage(), ex);
		}

		// Add tail?
		final CharSequence text = xmlParser.getInputFromPositionMarker(-1);
		if (text.length() > 0)
		{
			String rawMarkup = text.toString();

			if (stripComments)
			{
				rawMarkup = removeComment(rawMarkup);
			}

			if (compressWhitespace)
			{
				rawMarkup = compressWhitespace(rawMarkup);
			}

			// Make sure you add it at the correct location.
			// IMarkupFilters might have added elements as well.
			this.markup.addMarkupElement(new RawMarkup(rawMarkup));
		}

		// Make all tags immutable and the list of elements unmodifable
		this.markup.makeImmutable();
	}

