	/**
	 * Parses the info string and applies the stored attributes (markupId and markupIndex) to the
	 * components (recursively)
	 * 
	 * @param component
	 *            The initial (root) reconstructed component. We need to specify this component
	 *            explicitly, because the parent still contains ComponentSourceEntry (and not the
	 *            component itself) during reconstruction
	 * @param parent
	 * @param info
	 * @return
	 */
	private static int parseComponentInfo(MarkupContainer parent, String info, Component component)
	{
		// find the first part for the component
		final String substring = getComponentSubString(info);

		// if it is followed by '(' it means there are children
		int len = substring.length();
		boolean hasChildren = false;
		if (len < info.length() && info.charAt(len) == '(')
		{
			hasChildren = true;
			++len; // skip the '('
		}

		final MarkupContainer child = applyComponentInfo(parent, substring, component);

		if (hasChildren)
		{
			int i = 0;
			String children = info.substring(len); // part with children info


			while (i < children.length())
			{
				if (children.charAt(i) == ',')
				{
					++i; // skip the ',' that can be left there from previous child
				}

				i += parseComponentInfo(child, children.substring(i), null);

				// if the child is followed by a ')' it means there are no more children left
				if (children.charAt(i) == ')')
				{
					++i;
					break;
				}
			}

			// advance by the length of component part and the length of children part
			return len + i;
		}
		else
		{
			// advance by the length of component part
			return len;
		}
	}

