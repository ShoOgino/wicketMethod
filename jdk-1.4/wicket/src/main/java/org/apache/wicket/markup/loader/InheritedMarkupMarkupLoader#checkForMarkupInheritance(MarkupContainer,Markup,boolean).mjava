	/**
	 * The markup has just been loaded and now we check if markup inheritance
	 * applies, which is if <wicket:extend> is found in the markup. If yes, than
	 * load the base markups and merge the markup elements to create an updated
	 * (merged) list of markup elements.
	 * 
	 * @param container
	 *            The original requesting markup container
	 * @param markup
	 *            The markup to checked for inheritance
	 * @param enforceReload
	 *            The cache will be ignored and all, including inherited markup
	 *            files, will be reloaded. Whatever is in the cache, it will be
	 *            ignored
	 * @return A markup object with the the base markup elements resolved.
	 * @TODO move into IMarkupLoader
	 */
	private Markup checkForMarkupInheritance(final MarkupContainer container, final Markup markup,
			final boolean enforceReload)
	{
		// Check if markup contains <wicket:extend> which tells us that
		// we need to read the inherited markup as well.
		int extendIndex = requiresBaseMarkup(markup);
		if (extendIndex == -1)
		{
			// return a MarkupStream for the markup
			return markup;
		}

		// get the base markup
		final Markup baseMarkup = Application.get().getMarkupSettings().getMarkupCache().getMarkup(
				container,
				markup.getMarkupResourceData().getResource().getMarkupClass().getSuperclass(),
				enforceReload);

		if (baseMarkup == Markup.NO_MARKUP)
		{
			throw new MarkupNotFoundException(
					"Base markup of inherited markup not found. Component class: " +
							markup.getMarkupResourceData().getResource().getContainerInfo()
									.getContainerClass().getName() +
							" Enable debug messages for org.apache.wicket.util.resource.Resource to get a list of all filenames tried.");
		}

		// Merge base and derived markup
		return new MergedMarkup(markup, baseMarkup, extendIndex);
	}

