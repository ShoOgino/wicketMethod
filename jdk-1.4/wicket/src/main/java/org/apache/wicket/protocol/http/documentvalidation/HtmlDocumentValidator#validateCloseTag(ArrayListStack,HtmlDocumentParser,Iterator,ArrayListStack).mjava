    /**
     * Validate the close tag that was found.
     *
     * @param tagNameStack
     *            The stack of tag names
     * @param parser
     *            The parser
     * @param expectedElements
     *            The current iterator of expected elements
     * @param iteratorStack
     *            The stack of previous iterators
     * @return The next iterator to use, or null
     */
    private Iterator validateCloseTag(ArrayListStack tagNameStack, HtmlDocumentParser parser,
            Iterator expectedElements, ArrayListStack iteratorStack)
    {
        if (tagNameStack.isEmpty())
        {
            log.error("Found closing tag </" + parser.getTag() + "> when there are no "
                    + "tags currently open");
            expectedElements = null;
        }
        else
        {
            String expectedTag = (String)tagNameStack.pop();
            if (!expectedTag.equals(parser.getTag()))
            {
                log.error("Found closing tag </" + parser.getTag() + "> when we expecting "
                                + "the closing tag </" + expectedTag + "> instead");
                expectedElements = null;
            }
            else
            {
                if (expectedElements.hasNext())
                {
                    DocumentElement e = (DocumentElement)expectedElements.next();
                    log.error("Found closing tag </" + parser.getTag() + "> but we were "
                            + "expecting to find another child element: " + e.toString());
                    expectedElements = null;
                }
                else
                {
                    if (iteratorStack.isEmpty())
                    {
                        log.error("Unexpected parsing error");
                        expectedElements = null;
                    }
                    else
                    {
                        expectedElements = (Iterator)iteratorStack.pop();
                    }
                }
            }
        }
        return expectedElements;
    }

