    /**
     * Based on the tag, create and initalize the component.
     *  
     * @param container The current container. The new compent will be added to that container.
     * @param tag The tag containing the information about component 
     * @return The new component
     * @throws WicketRuntimeException in case the component could not be created
     */
    // Wicket is current not using any bean util jar, which is why ...
    private final Component createComponent(final MarkupContainer container, final WicketTag tag)
    {
        // If no component name is given, create a page-unique one yourself.
        String componentId = tag.getNameAttribute();
        if (componentId == null)
        {
            componentId = "anonymous-" + container.getPage().getAutoIndex();
        }

        // Get the component class name
        final String classname = tag.getAttributes().getString("class");
        if ((classname == null) || (classname.trim().length() == 0))
        {
            throw new MarkupException("Tag <wicket:component> must have attribute 'class'");
        }

        // Load the class. In case a Groovy Class Resolver has been provided,
        // the name might be a Groovy file.
        // Note: Spring based components are not supported this way. May be we
        //  should provide a ComponentFactory like we provide a PageFactory.
        final Class componentClass = container.getSession().getClassResolver().resolveClass(classname);

        // construct the component. It must have a constructor with a single
        // String (componentId) parameter.
        final Component component;
        try
        {
            final Constructor constructor = componentClass
                    .getConstructor(new Class[] { String.class });
            component = (Component)constructor.newInstance(new Object[] { componentId });
        }
        catch (NoSuchMethodException e)
        {
            throw new MarkupException(
                    "Unable to create Component from org.apache.wicket tag: Cause: " 
                    + e.getMessage());
        }
        catch (InvocationTargetException e)
        {
            throw new MarkupException(
                    "Unable to create Component from org.apache.wicket tag: Cause: " 
                    + e.getMessage());
        }
        catch (IllegalAccessException e)
        {
            throw new MarkupException(
                    "Unable to create Component from org.apache.wicket tag: Cause: " 
                    + e.getMessage());
        }
        catch (InstantiationException e)
        {
            throw new MarkupException(
                    "Unable to create Component from org.apache.wicket tag: Cause: " 
                    + e.getMessage());
        }
        catch (ClassCastException e)
        {
            throw new MarkupException(
                    "Unable to create Component from org.apache.wicket tag: Cause: " 
                    + e.getMessage());
        }
        catch (SecurityException e)
        {
            throw new MarkupException(
                    "Unable to create Component from org.apache.wicket tag: Cause: " 
                    + e.getMessage());
        }

        // Get all remaining attributes and invoke the component's setters
        Iterator iter = tag.getAttributes().entrySet().iterator();
        while (iter.hasNext())
        {
            final Map.Entry entry = (Map.Entry)iter.next();
            final String key = (String)entry.getKey();
            final String value = (String)entry.getValue();

            // Ignore attributes 'name' and 'class'
            if ("name".equalsIgnoreCase(key) || ("class".equalsIgnoreCase(key)))
            {
                continue;
            }

           	Classes.invokeSetter(component, key, value, container.getLocale());
        }

        return component;
    }

