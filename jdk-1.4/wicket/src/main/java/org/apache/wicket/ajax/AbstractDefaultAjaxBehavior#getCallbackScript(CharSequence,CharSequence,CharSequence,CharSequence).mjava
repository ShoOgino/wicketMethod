	/**
	 * Returns javascript that performs an ajax callback to this behavior. The
	 * script is decorated by the ajax callback decorator from
	 * {@link AbstractDefaultAjaxBehavior#getAjaxCallDecorator()}.
	 * 
	 * @param partialCall
	 *            Javascript of a partial call to the function performing the
	 *            actual ajax callback. Must be in format
	 *            <code>function(params,</code> with signature
	 *            <code>function(params, onSuccessHandler, onFailureHandler</code>.
	 *            Example: <code>wicketAjaxGet('callbackurl'</code>
	 * @param onSuccessScript
	 *            javascript that will run when the ajax call finishes
	 *            successfully
	 * @param onFailureScript
	 *            javascript that will run when the ajax call finishes with an
	 *            error status
	 * @param precondition
	 * 			  optional javacript expression that determines whether the request
	 *            will actually execute (in form of return XXX;);
	 * 
	 * @return script that peforms ajax callback to this behavior
	 */
	protected CharSequence getCallbackScript(final CharSequence partialCall,
			final CharSequence onSuccessScript, final CharSequence onFailureScript, 
			final CharSequence precondition)
	{
		final IAjaxCallDecorator decorator = getAjaxCallDecorator();

		String indicatorId = findIndicatorId();

		CharSequence success = (onSuccessScript == null) ? "" : onSuccessScript;
		CharSequence failure = (onFailureScript == null) ? "" : onFailureScript;

		if (decorator != null)
		{
			success = decorator.decorateOnSuccessScript(success);
		}

		if (!Strings.isEmpty(indicatorId))
		{
			String hide = ";wicketHide('" + indicatorId + "');";
			success = success + hide;
			failure = failure + hide;
		}

		if (decorator != null)
		{
			failure = decorator.decorateOnFailureScript(failure);
		}

		AppendingStringBuffer buff = new AppendingStringBuffer(256);
		buff.append("var ").append(IAjaxCallDecorator.WICKET_CALL_RESULT_VAR).append("=");
		buff.append(partialCall).append(", function() { ").append(success);
		buff.append("}.bind(this), function() { ").append(failure).append("}.bind(this)");
		
		if (precondition != null) 
		{
			buff.append(", function() {");
			buff.append(precondition);
			buff.append("}");
		}
		
		buff.append(");");

		CharSequence call = buff;

		if (!Strings.isEmpty(indicatorId))
		{
			call = new AppendingStringBuffer("wicketShow('").append(indicatorId).append("');")
					.append(call);
		}

		if (decorator != null)
		{
			call = decorator.decorateScript(call);
		}

		return call;
	}

