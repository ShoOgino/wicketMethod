	/**
	 * Construct.
	 * 
	 * @param securePageSuperType
	 *            The class or interface supertype that indicates that a given
	 *            Page requires authorization
	 * @param signInPageClass
	 *            The sign in page class
	 */
	public SimplePageAuthorizationStrategy(final Class securePageSuperType,
			final Class signInPageClass)
	{
		if (securePageSuperType == null)
		{
			throw new IllegalArgumentException("Secure page super type must not be null");
		}

		this.securePageSuperTypeRef = new WeakReference(securePageSuperType);

		// Handle unauthorized access to pages
		Application.get().getSecuritySettings().setUnauthorizedComponentInstantiationListener(
				new IUnauthorizedComponentInstantiationListener()
				{
					public void onUnauthorizedInstantiation(final Component component)
					{
						// If there is a sign in page class declared, and the
						// unauthorized component is a page, but it's not the
						// sign in page
						if (component instanceof Page)
						{
							// Redirect to page to let the user sign in
							throw new RestartResponseAtInterceptPageException(signInPageClass);
						}
						else
						{
							// The component was not a page, so throw exception
							throw new UnauthorizedInstantiationException(component.getClass());
						}
					}
				});
	}

