	/**
	 * Copies the given input stream to the servlet response
	 * <p>
	 * NOTE Content-Length is not set because it would require to buffer the
	 * whole input stream
	 * </p>
	 * 
	 * @param in
	 *            input stream to copy, will be closed after copy
	 */
	public void write(InputStream in)
	{
		OutputStream out = getOutputStream();

		try
		{
			// Copy resource input stream to servlet output stream
			Streams.copy(in, out);
		}
		catch (Exception e)
		{
			// FIXME this doesn't catch all. For instance, Jetty (6/ NIO) on
			// Unix like platforms will not be recogninzed as exceptions
			// that should be ignored

			Throwable throwable = e;
			boolean ignoreException = false;
			while (throwable != null)
			{
				if (throwable instanceof SQLException)
				{
					break; // leave false and quit loop
				}
				else if (throwable instanceof SocketException)
				{
					String message = throwable.getMessage();
					ignoreException = message != null
							&& (message.indexOf("Connection reset") != -1
									|| message.indexOf("Broken pipe") != -1
									|| message.indexOf("Socket closed") != -1
									|| message.indexOf("connection abort") != -1);
				}
				else
				{
					ignoreException = throwable.getClass().getName()
							.indexOf("ClientAbortException") >= 0;
				}
				if (ignoreException)
				{
					if (log.isDebugEnabled())
					{
						log.debug("Socket exception ignored for sending Resource "
								+ "response to client (ClientAbort)", e);
					}
					break;
				}
				throwable = throwable.getCause();
			}
			if (!ignoreException)
			{
				throw new WicketRuntimeException("Unable to write the response", e);
			}
		}
		finally
		{
			// NOTE: We only close the InputStream. The servlet
			// container should close the output stream.
			try
			{
				in.close();
				out.flush();
			}
			catch (IOException e)
			{
				throw new WicketRuntimeException(e);
			}
		}
	}

