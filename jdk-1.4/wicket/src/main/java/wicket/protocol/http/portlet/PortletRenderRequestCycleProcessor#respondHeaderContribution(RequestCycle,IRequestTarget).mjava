	/**
	 * Handle header contribution.
	 * 
	 * @param requestCycle
	 *            The request cycle
	 * @param requestTarget
	 *            The request target
	 */
	private void respondHeaderContribution(final RequestCycle requestCycle,
			final IRequestTarget requestTarget)
	{

		// TODO Does this work with portlets - I thought header contributions
		// were not supported in JSR 170? And if it works, it should be
		// forwarded to 2.0 as there is no such facility for it now (Eelco)

		if (requestTarget instanceof PageRequestTarget)
		{
			final PageRequestTarget target = (PageRequestTarget)requestTarget;
			final Response response = RequestCycle.get().getResponse();
			final Page page = target.getPage();

			final HtmlHeaderContainer header = new HtmlHeaderContainer(
					HtmlHeaderSectionHandler.HEADER_ID);

			if (page.get(HtmlHeaderSectionHandler.HEADER_ID) != null)
			{
				page.replace(header);
			}
			else
			{
				page.add(header);
			}

			page.visitChildren(new Component.IVisitor()
			{
				public Object component(Component component)
				{
					if (component.isVisible())
					{
						component.renderHead(header);
						return CONTINUE_TRAVERSAL;
					}
					else
					{
						return CONTINUE_TRAVERSAL_BUT_DONT_GO_DEEPER;
					}
				}
			});


			// collect feedback, is this really necessary for a header
			// container?
			header.visitChildren(IFeedback.class, new IVisitor()
			{
				public Object component(Component component)
				{
					((IFeedback)component).updateFeedback();
					return IVisitor.CONTINUE_TRAVERSAL;
				}
			});

			if (header instanceof IFeedback)
			{
				((IFeedback)header).updateFeedback();
			}

			header.internalAttach();

			try
			{
				header.visitChildren(new Component.IVisitor()
				{
					public Object component(Component component)
					{
						page.startComponentRender(component);
						component.renderComponent();
						page.endComponentRender(component);
						return CONTINUE_TRAVERSAL;
					}
				});
			}
			finally
			{
				header.internalDetach();
			}

			page.remove(header);
		}
	}

