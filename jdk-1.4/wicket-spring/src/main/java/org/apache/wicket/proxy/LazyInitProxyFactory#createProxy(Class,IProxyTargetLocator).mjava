	/**
	 * Create a lazy init proxy for the specified type. The target object will
	 * be located using the provided locator upon first method invocation.
	 * 
	 * @param type
	 *            type that proxy will represent
	 * 
	 * @param locator
	 *            object locator that will locate the object the proxy
	 *            represents
	 * 
	 * @return lazily initializable proxy
	 */
	public static Object createProxy(Class type, IProxyTargetLocator locator)
	{
		if (type.isInterface())
		{
			JdkHandler handler = new JdkHandler(type, locator);

			try
			{
				return Proxy.newProxyInstance(Thread.currentThread()
						.getContextClassLoader(), new Class[] {type, Serializable.class,
						ILazyInitProxy.class, IWriteReplace.class}, handler);
			}
			catch (IllegalArgumentException e)
			{
				/*
				 * STW: In some clustering environments it appears the context
				 * classloader fails to load the proxied interface (currently
				 * seen in BEA WLS 9.x clusters). If this happens, we can try
				 * and fall back to the classloader (current) that actually
				 * loaded this class.
				 */
				return Proxy.newProxyInstance(
						LazyInitProxyFactory.class.getClassLoader(), new Class[] {type,
								Serializable.class, ILazyInitProxy.class,
								IWriteReplace.class}, handler);
			}

		}
		else
		{
			CGLibInterceptor handler = new CGLibInterceptor(type, locator);

			Enhancer e = new Enhancer();
			e.setInterfaces(new Class[] {Serializable.class, ILazyInitProxy.class,
					IWriteReplace.class});
			e.setSuperclass(type);
			e.setCallback(handler);

			return e.create();

		}

	}

