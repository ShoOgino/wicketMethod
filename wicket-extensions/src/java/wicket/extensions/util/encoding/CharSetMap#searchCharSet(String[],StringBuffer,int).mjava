	/**
	 * Searches recursively for a charset for a specified locale.
	 * 
	 * @param items
	 *            an array of locale items.
	 * @param base
	 *            a buffer of base items.
	 * @param count
	 *            the number of items to go through.
	 * @return the found charset or an empty string.
	 */
	private final String searchCharSet(final String[] items, final StringBuffer base, int count)
	{
		if ((--count >= 0) && (items[count] != null) && (items[count].length() > 0))
		{
			String charset;
			base.insert(0, items[count]);
			int length = base.length();

			for (int i = count; i > 0; i--)
			{
				if ((i == count) || (i <= 1))
				{
					base.insert(0, '_');
					length++;
				}

				charset = searchCharSet(items, base, i);
				if (charset.length() > 0)
				{
					return charset;
				}

				base.delete(0, base.length() - length);
			}

			return searchCharSet(base.toString());
		}

		return "";
	}

