	/**
	 * Gets the charset for a locale with a variant. The search is performed in
	 * the following order: "lang"_"country"_"variant"="charset",
	 * _"counry"_"variant"="charset", "lang"__"variant"="charset",
	 * __"variant"="charset", "lang"_"country"="charset", _"country"="charset",
	 * "lang"="charset". If nothing of the above is found, the default charset
	 * is returned.
	 * 
	 * @param locale
	 *            the locale.
	 * @param variant
	 *            a variant field.
	 * @return the charset.
	 */
	public final String getCharSet(final Locale locale, final String variant)
	{
		// Check the cache first.
		if ((variant != null) && (variant.length() > 0))
		{
			String key = locale.toString();
			if (key.length() == 0)
			{
				key = "__" + locale.getVariant();
				if (key.length() > 2)
				{
					key += '_' + variant;
				}
				else
				{
					key += variant;
				}
			}
			else if (locale.getCountry().length() == 0)
			{
				key += "__" + variant;
			}
			else
			{
				key += '_' + variant;
			}

			String charset = searchCharSet(key);
			if (charset.length() == 0)
			{
				// Not found, perform a full search and update the cache.
				String[] items = new String[4];
				items[3] = variant;
				items[2] = locale.getVariant();
				items[1] = locale.getCountry();
				items[0] = locale.getLanguage();

				charset = searchCharSet(items);
				if (charset.length() == 0)
				{
					charset = DEFAULT_CHARSET;
				}

				mappers[MAP_CACHE].put(key, charset);
			}

			return charset;
		}

		return getCharSet(locale);
	}

