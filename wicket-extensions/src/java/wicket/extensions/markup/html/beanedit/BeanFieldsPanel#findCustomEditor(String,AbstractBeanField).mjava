	/**
	 * Finds a possible custom editor by looking for the type name + 'Editor'
	 * (e.g. mypackage.MyField has editor mypackage.MyFieldEditor).
	 * @param panelId id of panel; must be used for constructing any panel
	 * @param field the field
	 * @return PropertyEditor if found or null
	 */
	protected final BeanPropertyEditor findCustomEditor(String panelId, final AbstractBeanField field)
	{
		Class type = field.getClass();
		if(type == BeanField.class)
		{
			return null; // no override
		}

		ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
		if (classLoader == null)
		{
			classLoader = getClass().getClassLoader();
		}

		String editorTypeName = type.getName() + "Editor";
		try
		{
			Class editorClass = classLoader.loadClass(editorTypeName);
			try
			{
				// get the constructor
				Constructor constructor = editorClass.getConstructor(
						new Class[]{String.class, IModel.class, BeanField.class});

				// construct arguments
				Object[] args = new Object[]{panelId, BeanFieldsPanel.this.getModel(), field};

				// create the editor
				BeanPropertyEditor editor = (BeanPropertyEditor)constructor.newInstance(args);

				return editor;
			}
			catch (SecurityException e)
			{
				throw new WicketRuntimeException(e);
			}
			catch (NoSuchMethodException e)
			{
				throw new WicketRuntimeException(e);
			}
			catch (InstantiationException e)
			{
				throw new WicketRuntimeException(e);
			}
			catch (IllegalAccessException e)
			{
				throw new WicketRuntimeException(e);
			}
			catch (InvocationTargetException e)
			{
				throw new WicketRuntimeException(e);
			}
		}
		catch(ClassNotFoundException e)
		{
			// ignore; there just is no custom editor
		}

		return null;
	}

