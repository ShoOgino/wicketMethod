	/**
	 * Constructor
	 * 
	 * @param parent
	 *            parent component
	 * @param id
	 *            component id
	 * 
	 * @param table
	 *            data table this toolbar will be attached to
	 * @param stateLocator
	 *            locator for the ISortState implementation used by sortable
	 *            headers
	 */
	public HeadersToolbar(MarkupContainer parent, final String id, final DataTable table,
			final ISortStateLocator stateLocator)
	{
		super(parent, id, table);

		new RefreshingView(this, "headers")
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected Iterator getItemModels()
			{
				return new ArrayIteratorAdapter(table.getColumns())
				{

					@Override
					protected IModel model(Object object)
					{
						return new Model((IColumn)object);
					}

				};
			}

			@Override
			protected void populateItem(Item item)
			{
				item.setRenderBodyOnly(true);


				IColumn column = (IColumn)item.getModelObject();
				WebMarkupContainer header = null;
				if (column.isSortable())
				{
					header = newSortableHeader(item, "header", column.getSortProperty(),
							stateLocator);
				}
				else
				{
					header = new WebMarkupContainer(item, "header");
				}

				//TODO General: ivaynberg: rename ICOlumn.getHeader() to newHeader()
				column.getHeader(header, "label");

			}

		};

	}

