	/**
	 * @see Component#onComponentTag(ComponentTag)
	 * @param tag
	 *            the abstraction representing html tag of this component
	 */
	@Override
	protected void onComponentTag(final ComponentTag tag)
	{

		// must be attached to <option .../> tag
		checkComponentTag(tag, "option");

		Select select = (Select)findParent(Select.class);
		if (select == null)
		{
			throw new WicketRuntimeException(
					"SelectOption component ["
							+ getPath()
							+ "] cannot find its parent Select. All SelectOption components must be a child of or below in the hierarchy of a Select component.");
		}

		// assign name and value
		tag.put("value", getPath());

		// check if the model collection of the select contains the model
		// object.
		// if it does mark the option as selected
		Object selected = select.getModelObject();

		boolean isSelected = false;

		Object value = getModelObject();

		if (selected != null && selected instanceof Collection)
		{

			if (value instanceof Collection)
			{
				isSelected = selected.equals(value);
			}
			else
			{
				isSelected = ((Collection)selected).contains(value);
			}
		}
		else
		{
			isSelected = Objects.equal(selected, value);
		}

		if (isSelected)
		{
			tag.put("selected", "true");
		}

		// Default handling for component tag
		super.onComponentTag(tag);
	}

