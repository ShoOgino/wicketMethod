	@Test
	public void testWizard()
	{
		WizardModel model = new WizardModel();
		
		WizardStep step1 = new WizardStep();
		model.add(step1);
		
		WizardStep step2 = new WizardStep();
		model.add(step2, () -> false);
		
		class ConditionWizadStep extends WizardStep implements ICondition {

			@Override
			public boolean evaluate()
			{
				return false;
			}
			
		}
		WizardStep step3 = new ConditionWizadStep();
		model.add(step3);
		
		WizardStep step4 = new WizardStep();
		model.add(step4);

		model.reset();
		
		Iterator<IWizardStep> iterator = model.stepIterator();
		assertTrue(iterator.hasNext());
		iterator.next();
		assertTrue(iterator.hasNext());
		iterator.next();
		assertFalse(iterator.hasNext());
		try {
			iterator.next();
			fail();
		} catch (Exception expected) {
		}

		assertSame(step1, model.getActiveStep());
		assertTrue(model.isNextAvailable());
		assertFalse(model.isLastStep(model.getActiveStep()));
		assertFalse(model.isFinishAvailable());

		model.next();
		assertSame(step4, model.getActiveStep());
		assertFalse(model.isNextAvailable());
		assertTrue(model.isLastStep(model.getActiveStep()));
		assertTrue(model.isFinishAvailable());

		try {
			model.next();
			fail();
		} catch (Exception expected) {
		}
	}

