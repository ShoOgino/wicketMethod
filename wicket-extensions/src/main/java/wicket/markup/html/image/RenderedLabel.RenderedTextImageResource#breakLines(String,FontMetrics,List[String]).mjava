		/**
		 * Breaks source string into lines no longer than this label's maxWidth,
		 * if not null.
		 * 
		 * @param source
		 *            this label's model, previously retrieved
		 * @param metrics
		 *            metrics for the font we will use for display
		 * @param outputLines
		 *            list to receive lines generated by this function
		 * @return length in pixels of the longest line
		 */
		protected int breakLines(String source, FontMetrics metrics, List<String> outputLines)
		{
			if (maxWidth == null)
			{
				outputLines.add(source);
				return metrics.stringWidth(source);
			}
			String sp = " ";
			String words[] = source.split(sp);
			StringBuilder line = new StringBuilder();
			int topWidth = 0;
			for (String word : words)
			{
				if (line.length() > 0)
				{
					int curWidth = metrics.stringWidth(line + sp + word);
					if (curWidth > maxWidth)
					{
						outputLines.add(line.toString());
						line.setLength(0);
					}
					else
						line.append(sp);
				}
				line.append(word);
				topWidth = Math.max(metrics.stringWidth(line.toString()), topWidth);
			}
			outputLines.add(line.toString());
			return topWidth;
		}

