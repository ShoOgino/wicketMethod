	/**
	 * Removes the item, appends it's id to deleteIds. This is called when a
	 * items parent is being deleted or rebuilt.
	 * 
	 * @param item
	 *            The item to remove
	 */
	private void removeItem(TreeItem item)
	{
		// even if the item is dirty it's no longer necessary to update id
		dirtyItems.remove(item);

		// if the item was about to be created
		if (dirtyItemsCreateDOM.contains(item))
		{		
			// we needed to create DOM element, we no longer do
			dirtyItemsCreateDOM.remove(item);
		}
		else
		{
			// add items id (it's short version) to ids of DOM elements that will be
			// removed
			deleteIds.append(getShortItemId(item));
			deleteIds.append(",");
		}

		// remove the id
		// note that this doesn't update item's parent's children list
		item.remove();
		
		// unselect the node
		getTreeState().selectNode((TreeNode)item.getModelObject(), false);
	}

