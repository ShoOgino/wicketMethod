	@Override
	protected void convertInput()
	{
		boolean supportsMultiple = getModelObject() instanceof Collection;

		/*
		 * the input contains an array of full path of the selected option components unless nothing
		 * was selected in which case the input contains null
		 */
		String[] paths = getInputAsArray();

		if ((paths == null) || (paths.length == 0))
		{
			setConvertedInput(null);
			return;
		}

		if (!supportsMultiple && (paths.length > 1))
		{
			throw new WicketRuntimeException(
				"The model of Select component [" +
					getPath() +
					"] is not of type java.util.Collection, but more then one SelectOption component has been selected. Either remove the multiple attribute from the select tag or make the model of the Select component a collection");
		}

		List<Object> converted = new ArrayList<Object>(paths.length);

		/*
		 * if the input is null we do not need to do anything since the model collection has already
		 * been cleared
		 */
		for (String path : paths)
		{
			if (!Strings.isEmpty(path))
			{
				/*
				 * option component path sans select component path = relative path from group to
				 * option since we know the option is child of select
				 */
				path = path.substring(getPath().length() + 1);

				// retrieve the selected option component
				SelectOption<?> option = (SelectOption<?>)get(path);

				if (option == null)
				{
					throw new WicketRuntimeException(
						"submitted http post value [" +
							Arrays.toString(paths) +
							"] for SelectOption component [" +
							getPath() +
							"] contains an illegal relative path element [" +
							path +
							"] which does not point to an SelectOption component. Due to this the Select component cannot resolve the selected SelectOption component pointed to by the illegal value. A possible reason is that component hierarchy changed between rendering and form submission.");
				}
				converted.add(option.getDefaultModelObject());
			}
		}

		if (converted.isEmpty())
		{
			setConvertedInput(null);
		}
		else if (!supportsMultiple)
		{
			setConvertedInput((T)converted.get(0));
		}
		else
		{
			setConvertedInput((T)converted);
		}
	}

