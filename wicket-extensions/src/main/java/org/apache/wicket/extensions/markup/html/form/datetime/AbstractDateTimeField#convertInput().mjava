	/**
	 * Sets the converted input, which is an instance of {@link Date}, possibly null. It combines
	 * the inputs of the nested date, hours, minutes and am/pm fields and constructs a date from it.
	 * <p>
	 * Note that overriding this method is a better option than overriding {@link #updateModel()}
	 * like the first versions of this class did. The reason for that is that this method can be
	 * used by form validators without having to depend on the actual model being updated, and this
	 * method is called by the default implementation of {@link #updateModel()} anyway (so we don't
	 * have to override that anymore).
	 */
	@Override
	public void convertInput()
	{
		try
		{
			// Get the converted input values
			LocalDate date = dateField.getConvertedInput();
			LocalTime time = timeField.getConvertedInput();

			if (date == null || time == null)
			{
				setConvertedInput(null);
			}
			else
			{
				// Use the input to create proper date-time
				setConvertedInput(performConvert(date, time));
			}
		}
		catch (RuntimeException e)
		{
			AbstractDateTimeField.this.error(e.getMessage());
			invalid();
		}
	}

