	/**
	 * get resized image instance.
	 * 
	 * @param attributes
	 * 
	 * @return BufferedImage
	 */
	protected final BufferedImage getScaledImageInstance(Attributes attributes)
	{
		InputStream is = null;
		BufferedImage originalImage = null;
		try
		{
			// read original image
			ByteArrayResponse byteResponse = new ByteArrayResponse();
			Attributes dispatchAttributes = new Attributes(attributes.getRequest(), byteResponse);
			unscaledImageResource.respond(dispatchAttributes);
			is = new ByteArrayInputStream(byteResponse.getBytes());
			originalImage = ImageIO.read(is);
			if (originalImage == null)
			{
				throw new IOException("Unable to read unscaled image");
			}
		}
		catch (IOException e)
		{
			throw new WicketRuntimeException(e);
		}
		finally
		{
			try
			{
				IOUtils.close(is);
			}
			catch (IOException e)
			{
				log.error(e.getMessage(), e);
			}
		}

		int originalWidth = originalImage.getWidth();
		int originalHeight = originalImage.getHeight();

		if ((originalWidth > maxSize) || (originalHeight > maxSize))
		{
			final int newWidth;
			final int newHeight;

			if (originalWidth > originalHeight)
			{
				newWidth = maxSize;
				newHeight = (maxSize * originalHeight) / originalWidth;
			}
			else
			{
				newWidth = (maxSize * originalWidth) / originalHeight;
				newHeight = maxSize;
			}

			// http://today.java.net/pub/a/today/2007/04/03/perils-of-image-getscaledinstance.html
			BufferedImage dimg = new BufferedImage(newWidth, newHeight, originalImage.getType());
			Graphics2D g = dimg.createGraphics();
			g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
				RenderingHints.VALUE_INTERPOLATION_BILINEAR);
			g.drawImage(originalImage, 0, 0, newWidth, newHeight, 0, 0, originalWidth,
				originalHeight, null);
			g.dispose();

			return dimg;
		}

		// no need for resizing
		return originalImage;
	}

