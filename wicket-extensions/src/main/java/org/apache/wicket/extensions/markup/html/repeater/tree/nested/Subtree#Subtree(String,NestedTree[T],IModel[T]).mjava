	/**
	 * Create a subtree for the children of the node contained in the given model or the root nodes
	 * if the model contains <code>null</code>.
	 * 
	 * @param id
	 *            component id
	 * @param tree
	 *            the containing tree
	 * @param model
	 */
	public Subtree(String id, final NestedTree<T> tree, final IModel<T> model)
	{
		super(id, model);

		if (tree == null)
		{
			throw new IllegalArgumentException("argument [tree] cannot be null");
		}
		this.tree = tree;

		RefreshingView<T> branches = new RefreshingView<T>("branches")
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected Iterator<IModel<T>> getItemModels()
			{
				return new ModelIterator();
			}

			@Override
			protected Item<T> newItem(String id, int index, IModel<T> model)
			{
				return newBranchItem(id, index, model);
			}

			@Override
			protected void populateItem(Item<T> item)
			{
				IModel<T> model = item.getModel();

				Component node = tree.newNodeComponent("node", model);
				item.add(node);

				item.add(tree.newSubtree("subtree", model));
			}
		};
		branches.setItemReuseStrategy(new IItemReuseStrategy()
		{
			private static final long serialVersionUID = 1L;

			@Override
			public <S> Iterator<Item<S>> getItems(IItemFactory<S> factory,
				Iterator<IModel<S>> newModels, Iterator<Item<S>> existingItems)
			{
				return tree.getItemReuseStrategy().getItems(factory, newModels, existingItems);
			}
		});
		add(branches);
	}

