	@Override
	protected FormComponent<T> newEditor(final MarkupContainer parent, final String componentId,
		final IModel<T> model)
	{
		TextArea<T> editor = new TextArea<T>(componentId, model)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected boolean shouldTrimInput()
			{
				return AjaxEditableMultiLineLabel.this.shouldTrimInput();
			}
			
			@Override
			protected void onModelChanged()
			{
				AjaxEditableMultiLineLabel.this.onModelChanged();
			}

			@Override
			protected void onModelChanging()
			{
				AjaxEditableMultiLineLabel.this.onModelChanging();
			}
		};
		editor.add(new AttributeModifier("rows", (IModel<Integer>) () -> rows));
		editor.add(new AttributeModifier("cols", (IModel<Integer>) () -> cols));
		editor.setOutputMarkupId(true);
		editor.setVisible(false);
		editor.add(new EditorAjaxBehavior()
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected void updateAjaxAttributes(AjaxRequestAttributes attributes)
			{
				super.updateAjaxAttributes(attributes);
				attributes.setMethod(Method.POST);
				attributes.setEventNames("blur", "keyup");
				CharSequence dynamicExtraParameters = 
						"var result = [], " +
								"kc=Wicket.Event.keyCode(attrs.event)," +
								"evtType=attrs.event.type;" +
								"if (evtType === 'keyup') {" +
									// ESCAPE key
									"if (kc===27) { result.push( { name: 'save', value: false } ); }" +
								"}" +
								"else if (evtType==='blur') { result = Wicket.Form.serializeElement(attrs.c); result.push( { name: 'save', value: true } ); }" +
								"return result;";
				attributes.getDynamicExtraParameters().add(dynamicExtraParameters);

				CharSequence precondition =
						"var kc=Wicket.Event.keyCode(attrs.event),"+
								"evtType=attrs.event.type,"+
								"ret=false;"+
								"if(evtType==='blur' || (evtType==='keyup' && (kc===27))) ret = true;"+
								"return ret;";
				AjaxCallListener ajaxCallListener = new AjaxCallListener();
				ajaxCallListener.onPrecondition(precondition);
				attributes.getAjaxCallListeners().add(ajaxCallListener);
			}
		});
		return editor;
	}

