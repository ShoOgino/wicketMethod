	/**
	 * Searches the {@link MarkupContainer}, looking for and triggering {@link AjaxLazyLoadPanel}s
	 * to fetch their contents. Very useful for testing pages / panels that use
	 * {@link AjaxLazyLoadPanel}s.
	 * 
	 * @param wt
	 *            the {@link WicketTester} to execute the behaviour (
	 *            {@link WicketTester#executeBehavior} ).
	 * @param container
	 *            contains the {@link AjaxLazyLoadPanel} to trigger
	 */
	public static void executeAjaxLazyLoadPanel(final WicketTester wt, MarkupContainer container)
	{
		container.visitChildren(AjaxLazyLoadPanel.class, new IVisitor<AjaxLazyLoadPanel>()
		{
			public Object component(AjaxLazyLoadPanel component)
			{
				// get the AbstractAjaxBehaviour which is responsible for
				// getting the contents of the lazy panel
				List<IBehavior> behaviors = BehaviorsUtil.getBehaviors(component,
					AbstractAjaxBehavior.class);
				if (behaviors.size() == 0)
				{
					logger.warn("AjaxLazyLoadPanel child found, but no attached AbstractAjaxBehaviors found. A curious situation...");
				}
				for (IBehavior b : behaviors)
				{
					if (b instanceof AbstractAjaxBehavior &&
						!(b instanceof AjaxSelfUpdatingTimerBehavior))
					{
						// tell wicket tester to execute it :)
						logger.debug("Triggering lazy panel: " + component.getClassRelativePath());
						AbstractAjaxBehavior abstractAjaxBehaviour = (AbstractAjaxBehavior)b;
						wt.executeBehavior(abstractAjaxBehaviour);
					}
				}
				// continue looking for other AjazLazyLoadPanel
				return CONTINUE_TRAVERSAL;
			}
		});
	}

