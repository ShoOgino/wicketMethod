	/**
	 * Populates one row of the tree.
	 * 
	 * @param item
	 *            the tree node component
	 * @param level
	 *            the current level
	 */
	@Override
	protected void populateTreeItem(final WebMarkupContainer item, final int level)
	{
		final TreeNode node = (TreeNode)item.getDefaultModelObject();

		// add side columns
		SideColumnsView sideColumns = new SideColumnsView("sideColumns", node);
		item.add(sideColumns);
		if (columns != null)
		{
			for (int i = 0; i < columns.length; i++)
			{
				IColumn column = columns[i];
				if ((column.getLocation().getAlignment() == Alignment.LEFT) ||
					(column.getLocation().getAlignment() == Alignment.RIGHT))
				{
					Component component;
					// first try to create a renderable
					IRenderable renderable = column.newCell(node, level);

					if (renderable == null)
					{
						// if renderable failed, try to create a regular
						// component
						component = column.newCell(sideColumns, "" + i, node, level);
						sideColumns.add(component);
					}
					else
					{
						component = null;
					}

					sideColumns.addColumn(column, component, renderable);
				}
			}
		}

		// add middle columns
		MiddleColumnsView middleColumns = new MiddleColumnsView("middleColumns", node,
			hasLeftColumn());
		if (columns != null)
		{
			for (int i = 0; i < columns.length; i++)
			{
				IColumn column = columns[i];
				if (column.getLocation().getAlignment() == Alignment.MIDDLE)
				{
					Component component;
					// first try to create a renderable
					IRenderable renderable = column.newCell(node, level);

					if (renderable == null)
					{
						// if renderable failed, try to create a regular
						// component
						component = column.newCell(middleColumns, "" + i, node, level);
						middleColumns.add(component);
					}
					else
					{
						component = null;
					}

					middleColumns.addColumn(column, component, renderable);
				}
			}
		}
		item.add(middleColumns);

		// do distinguish between selected and unselected rows we add an
		// behavior
		// that modifies row css class.
		item.add(new Behavior()
		{
			private static final long serialVersionUID = 1L;

			@Override
			public void onComponentTag(final Component component, final ComponentTag tag)
			{
				super.onComponentTag(component, tag);
				if (getTreeState().isNodeSelected(node))
				{
					tag.put("class", "row-selected");
				}
				else
				{
					tag.put("class", "row");
				}
			}
		});
	}

