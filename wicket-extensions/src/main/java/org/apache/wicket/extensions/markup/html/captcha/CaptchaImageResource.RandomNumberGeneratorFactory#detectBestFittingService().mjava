		/**
		 * Checks all existing security providers and returns the best fitting service.
		 *
		 * This method is different to {@link java.security.SecureRandom#getPrngAlgorithm()} which uses the first PRNG
		 * algorithm of the first provider that has registered a SecureRandom implementation.
		 * {@code detectBestFittingService()} instead uses a native PRNG if available, then
		 * {@code SHA1PRNG} else {@code null} which triggers {@link java.security.SecureRandom#getPrngAlgorithm()}
		 * when calling {@code new SecureRandom()}.
		 *
		 * @return a native pseudo random number generator or sha1 as fallback.
		 */
		private Provider.Service detectBestFittingService()
		{
			Provider.Service _sha1Service = null;

			for (Provider provider : Security.getProviders())
			{
				for (Provider.Service service : provider.getServices())
				{
					if ("SecureRandom".equals(service.getType()))
					{
						String algorithm = service.getAlgorithm();
						if ("NativePRNG".equals(algorithm))
						{
							return service;
						}
						else if ("Windows-PRNG".equals(algorithm))
						{
							return service;
						}
						else if (_sha1Service == null && "SHA1PRNG".equals(algorithm))
						{
							_sha1Service = service;
						}
					}
				}
			}

			return _sha1Service;
		}

