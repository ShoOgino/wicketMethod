	/**
	 * @param id
	 *            Component id
	 * @param imageSize
	 *            Size of kitten captcha image
	 */
	public KittenCaptchaPanel(final String id, final Dimension imageSize)
	{
		super(id);

		// Save image size
		this.imageSize = imageSize;

		// Create animal list
		animals = new PlacedAnimalList();

		// Need to ajax refresh
		setOutputMarkupId(true);

		// Show how many animals have been selected
		animalSelectionLabel = new Label("animalSelectionLabel",
			new AbstractReadOnlyModel<String>()
			{
				private static final long serialVersionUID = 6792322972316712326L;

				@Override
				public String getObject()
				{
					return imageResource.selectString();
				}
			});
		animalSelectionLabel.setOutputMarkupId(true);
		add(animalSelectionLabel);

		// Image referencing captcha image resource
		image = new NonCachingImage("image", imageResource = new CaptchaImageResource(animals));
		image.add(new AjaxEventBehavior("onclick")
		{
			private static final long serialVersionUID = 7480352029955897654L;

			@Override
			protected CharSequence getCallbackScript(boolean onlyTargetActivePage)
			{
				// Call-back script shows loading indicator and makes wicket
				// ajax request passing in mouse co-ordinates
				return generateCallbackScript("showLoadingIndicator(); wicketAjaxGet('" +
					getCallbackUrl() +
					"&x=' + getEventX(this, event) + '&y=' + getEventY(this, event)");
			}

			@Override
			protected void onEvent(final AjaxRequestTarget target)
			{
				// Get clicked cursor position
				final Request request = RequestCycle.get().getRequest();
				final int x = request.getRequestParameters().getParameterValue("x").toInt(0);
				final int y = request.getRequestParameters().getParameterValue("y").toInt(0);

				// Force refresh
				imageResource.clearData();

				// Find any animal at the clicked location
				final PlacedAnimal animal = animals.atLocation(new Point(x, y));

				// If the user clicked on an animal
				if (animal != null)
				{
					// Toggle the animal's highlighting
					animal.isHighlighted = !animal.isHighlighted;

					// Instead of reload entire image just change the src
					// attribute, this reduces the flicker
					final StringBuilder javascript = new StringBuilder();
					javascript.append("Wicket.$('").append(image.getMarkupId()).append("').src = '");
					CharSequence url = image.urlFor(IResourceListener.INTERFACE);
					javascript.append(url);
					javascript.append(url.toString().indexOf('?') > -1 ? "&amp;" : "?").append("rand=").append(Math.random());
					javascript.append("'");
					target.appendJavaScript(javascript.toString());
				}
				else
				{
					// The user didn't click on an animal, so hide the loading
					// indicator
					target.appendJavaScript(" hideLoadingIndicator();");
				}

				// Update the selection label
				target.add(animalSelectionLabel);
			}
		});
		add(image);
	}

