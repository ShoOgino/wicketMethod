	/**
	 * Create a new form component instance to serve as editor.
	 * 
	 * @param parent
	 *            The parent component
	 * @param componentId
	 *            Id that should be used by the component
	 * @param model
	 *            The model
	 * @return The editor
	 */
	protected FormComponent<T> newEditor(final MarkupContainer parent, final String componentId,
		final IModel<T> model)
	{
		TextField<T> editor = new TextField<T>(componentId, model)
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected boolean shouldTrimInput()
			{
				return AjaxEditableLabel.this.shouldTrimInput();
			}

			/**
			 * {@inheritDoc}
			 */
			@Override
			public <C> IConverter<C> getConverter(final Class<C> type)
			{
				return AjaxEditableLabel.this.getConverter(type);
			}

			@Override
			protected void onModelChanged()
			{
				super.onModelChanged();
				AjaxEditableLabel.this.onModelChanged();
			}

			@Override
			protected void onModelChanging()
			{
				super.onModelChanging();
				AjaxEditableLabel.this.onModelChanging();
			}
		};
		editor.setOutputMarkupId(true);
		editor.setVisible(false);
		editor.add(new EditorAjaxBehavior()
		{
			@Override
			protected void updateAjaxAttributes(AjaxRequestAttributes attributes)
			{
				super.updateAjaxAttributes(attributes);
				attributes.setEventNames("blur", "keyup", "keydown");

				// Note: preventDefault is handled selectively below
				attributes.setPreventDefault(false);

				// Note: escape can be detected on keyup, enter can be detected on keyup
				CharSequence precondition = "var kc=Wicket.Event.keyCode(attrs.event),"
					+ "evtType=attrs.event.type,"
					+ "ret=false;"
					+ "if (evtType==='blur' || (evtType==='keyup' && kc===27) || (evtType==='keydown' && kc===13)) {attrs.event.preventDefault(); ret = true;}"
					+ "return ret;";
				AjaxCallListener ajaxCallListener = new AjaxCallListener();
				ajaxCallListener.onPrecondition(precondition);

				CharSequence dynamicExtraParameters = "var result,"
					+ "evtType=attrs.event.type;"
					+ "if (evtType === 'keyup') { result = { 'save': false }; }"
					+ "else { result = { 'save': true }; }"
					+ "return result;";
				attributes.getDynamicExtraParameters().add(dynamicExtraParameters);

				attributes.getAjaxCallListeners().add(ajaxCallListener);

			}
		});
		return editor;
	}

