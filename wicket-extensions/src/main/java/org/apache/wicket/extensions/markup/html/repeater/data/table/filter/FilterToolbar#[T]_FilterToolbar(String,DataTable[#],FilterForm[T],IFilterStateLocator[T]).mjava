	/**
	 * Constructor
	 * 
	 * @param id
	 * @param table
	 *            data table this toolbar will be added to
	 * @param form
	 *            the filter form
	 * @param stateLocator
	 *            locator responsible for finding object used to store filter's state
	 * @param <T>
	 *            type of filter state object
	 * 
	 */
	public <T> FilterToolbar(String id, final DataTable<?> table, final FilterForm<T> form,
		final IFilterStateLocator<T> stateLocator)
	{
		super(id, table);

		if (table == null)
		{
			throw new IllegalArgumentException("argument [table] cannot be null");
		}
		if (stateLocator == null)
		{
			throw new IllegalArgumentException("argument [stateLocator] cannot be null");
		}

		// populate the toolbar with components provided by filtered columns

		RepeatingView filters = new RepeatingView("filters");
		filters.setRenderBodyOnly(true);
		add(filters);

		IColumn<?>[] cols = table.getColumns();
		for (IColumn<?> col : cols)
		{
			WebMarkupContainer item = new WebMarkupContainer(filters.newChildId());
			item.setRenderBodyOnly(true);

			Component filter = null;

			if (col instanceof IFilteredColumn)
			{
				IFilteredColumn<?> filteredCol = (IFilteredColumn<?>) col;
				filter = filteredCol.getFilter(id, form);
			}

			if (filter == null)
			{
				filter = new NoFilter(id);
			}
			else
			{
				if (!filter.getId().equals(id))
				{
					throw new IllegalStateException(
						"filter component returned  with an invalid component id. invalid component id [" +
							filter.getId() +
							"] required component id [" +
							id +
							"] generating column [" + col.toString() + "] ");
				}
			}

			item.add(filter);

			filters.add(item);
		}

	}

