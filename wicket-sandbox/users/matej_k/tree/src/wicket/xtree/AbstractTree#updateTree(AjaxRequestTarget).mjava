	/**
	 * Updates the changed portions of the tree using given AjaxRequestTarget.
	 */
	public final void updateTree(final AjaxRequestTarget target) 
	{
		if (target == null)
		{
			return;
		}
		
		// check whether the model hasn't changed
		checkModel();
	
		// is the whole tree dirty
		if (dirtyAll) 
		{
			// render entire tree component
			target.addComponent(this);			
		} 
		else 
		{			
			// remove DOM elements that need to be removed
			if (deleteIds.length() != 0) 
			{
				String js = getElementsDeleteJavascript();
				System.out.println(js);

				// add the javascript to target
				target.addJavascript(js);
			}
			
			for (TreeItem item : dirtyItemsCreateDOM)
			{
				TreeItem parent = item.getParentItem();
				int index = parent.getChildren().indexOf(item);
				TreeItem previous;
				// we need item before this (in dom structure)
				if (index == 0) 
				{
					previous = parent;
				}
				else
				{
					previous = parent.getChildren().get(index - 1);
					// get the last item of previous item subtree
					while (previous.getChildren() != null && previous.getChildren().size() > 0)
					{
						previous = previous.getChildren().get(previous.getChildren().size() - 1);
					}
				}
				target.addJavascript("Wicket.Tree.createElement(\"" + item.getMarkupId() + "\"," +
						                                       "\"" + previous.getMarkupId() + "\")");				
			}
								
			// iterate through dirty items
			for (TreeItem item : dirtyItems) 
			{
				// does the item need to rebuild children?
				if (item.getChildren() == null)
				{
					// rebuld the children
					buildItemChildren(item);
					
					// set flag on item so that it renders itself together with it's children
					item.setRenderChildren(true);					
				}				
				
				// add the component to target
				target.addComponent(item);				
			}
		}
		
		// clear dirty flags
		updated();
	}	

