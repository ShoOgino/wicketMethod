	/**
	 * Renders the columns.
	 */
	@Override
	protected void onRender(final MarkupStream markupStream)
	{
		final int markupStart = markupStream.getCurrentIndex();
		Response response = RequestCycle.get().getResponse();
	
		boolean firstLeft = true; // whether there was no left column rendered yet
		boolean rendered = false;
		
		for (int i = 0; i < columns.size(); ++i)
		{
			IColumn column = columns.get(i);
			Component component = components.get(i);
			IRenderable renderable = renderables.get(i);
			
			// write wrapping markup
			response.write("<span class=\"column\" style=\"" + renderColumnStyle(column) + "\">");
			if (column.getLocation().getAlignment() == Alignment.LEFT && firstLeft == true)
			{
				// for the first left column we have different style class (without the left border)
				response.write("<span class=\"column-inner-first\">");
				firstLeft = false;
			}				
			else
			{
				response.write("<span class=\"column-inner\">");
			}
			
			if (component != null)
			{
				markupStream.setCurrentIndex(markupStart);
				component.render(markupStream);
				rendered = true;
			}
			else if (renderable != null)
			{
				renderable.render(node, response);
			}
			else
			{
				throw new IllegalStateException("Either renderable or cell component must be created for this noode");
			}
			
			response.write("</span></span>\n");
		}
		
		// if no component was rendered just advance in the markup stream 
		if (rendered == false)
		{
			markupStream.skipComponent();
		}		
	}

