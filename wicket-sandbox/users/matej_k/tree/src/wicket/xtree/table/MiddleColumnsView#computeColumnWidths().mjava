	protected int[] computeColumnWidths()
	{
		int result[] = new int[columns.size()];
		Arrays.fill(result, 0);
		
		double sum = 0d;
		double whole = 99d; // we can't do 100%, might cause formating errors
		
		for (Column column : columns)
		{
			// check if the unit is right
			if (column.getLocation().getUnit() != Unit.PROPORTIONAL)
			{
				throw new IllegalStateException("Middle columns must have PROPORTIONAL unit set.");
			}
			sum += column.getLocation().getSize();
		}
		
		int index = 0;
	
		int spanColumn = 0;
		int spanLeft = 0;
		for (Column column : columns)
		{			
			int i = index;
			if (spanLeft > 0) 
			{
				i = spanColumn;
				--spanLeft;
			}
			result[i] += (int) Math.round(((double) column.getLocation().getSize()) / sum * whole);
			if (column.getSpan(node) > 1) 			
			{
				int maxSpan = columns.size() - columns.indexOf(column) ;				
				int span = column.getSpan(node) - 1;
				spanColumn = index;
				spanLeft = span < maxSpan ? span : maxSpan;
			}
			++index;
		}				
		
		int together = 0;
		for (int i = 0; i < result.length; ++i)
		{
			together += result[i];
		}
		
		if (together > 99) 
		{
			// this can happen - rounding error. just decrease the last one
			for (int i = result.length - 1; i >= 0; --i)
			{
				if (result[i] != 0)
				{
					result[i] -= together - 99;
					break;
				}
			}
			
		}
		
		return result;
	}

