	/**
	 * Finds a possible custom editor by looking for the type name + 'PropertyEditor'
	 * (e.g. mypackage.MyBean has editor mypackage.MyBeanEditor).
	 * @param panelId id of panel; must be used for constructing any panel
	 * @param descriptor property descriptor
	 * @return PropertyEditor if found or null
	 */
	private PropertyEditor findCustomEditor(String panelId, PropertyDescriptor descriptor)
	{
		ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
		if (classLoader == null)
		{
			classLoader = getClass().getClassLoader();
		}

		Class type = descriptor.getPropertyType();
		String editorTypeName = type.getName() + "PropertyEditor";
		try
		{
			Class editorClass = classLoader.loadClass(editorTypeName);
			try
			{
				Constructor constructor = editorClass.getConstructor(
						new Class[]{String.class, IModel.class, PropertyDescriptor.class});
				Object[] args = new Object[]{panelId, BeanPanel.this.getModel(), descriptor};
				PropertyEditor editor = (PropertyEditor)constructor.newInstance(args);
				return editor;
			}
			catch (SecurityException e)
			{
				throw new WicketRuntimeException(e);
			}
			catch (NoSuchMethodException e)
			{
				throw new WicketRuntimeException(e);
			}
			catch (InstantiationException e)
			{
				throw new WicketRuntimeException(e);
			}
			catch (IllegalAccessException e)
			{
				throw new WicketRuntimeException(e);
			}
			catch (InvocationTargetException e)
			{
				throw new WicketRuntimeException(e);
			}
		}
		catch(ClassNotFoundException e)
		{
			// ignore; there just is no custom editor
		}

		return null;
	}

