	public void testInjectionAndSerialization()
	{
		MockWebApplication mockApp = new MockWebApplication(new WebApplication()
		{
			@Override
			protected void outputDevelopmentModeWarning()
			{
				// Do nothing.
			}

			@Override
			public Class<WebPage> getHomePage()
			{
				return null;
			}
		}, null);

		// Make a new webapp and injector, and register the injector with the
		// webapp as a component instantiation listener.
		Application app = mockApp.getApplication();

		try
		{
			Application.set(app);
			GuiceComponentInjector injector = new GuiceComponentInjector(app, new Module()
			{

				public void configure(Binder binder)
				{
					binder.bind(ITestService.class).to(TestService.class);
					binder.bind(ITestService.class).annotatedWith(Red.class).to(
							TestServiceRed.class);
					binder.bind(ITestService.class).annotatedWith(Blue.class).to(
							TestServiceBlue.class);
				}

			});
			app.addComponentInstantiationListener(injector);

			// Create a new component, which should be automatically injected, and test to make sure the injection has worked.
			TestComponent testComponent = new TestComponent("id");
			doChecksForComponent(testComponent);

			// Serialize and deserialize the object, and check it still works.
			TestComponent clonedComponent = (TestComponent)Objects.cloneObject(testComponent);
			doChecksForComponent(clonedComponent);

		}
		finally
		{
			Application.unset();
		}
	}

