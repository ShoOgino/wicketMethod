	/**
	 * Constructor.
	 */
	public GuestBook()
	{
		// Add comment form
		CommentForm commentForm = new CommentForm("commentForm");
		add(commentForm);

		// the WebMarkupContainer is used to update the listview in an ajax call
		comments = new WebMarkupContainer("comments");
		add(comments.setOutputMarkupId(true));
		
		// Add commentListView of existing comments
		comments.add(commentListView = new ListView("comments", new PropertyModel(this,
				"commentList"))
		{
			public void populateItem(final ListItem listItem)
			{
				final Comment comment = (Comment)listItem.getModelObject();
				listItem.add(new Label("date", new Model(comment.getDate())));
				listItem.add(new MultiLineLabel("text", comment.getText()));
			}
		});
		
		// we need to cancel the standard submit of the form in the onsubmit handler,
		// otherwise we'll get double submits. To do so, we return false after the
		// ajax submit has occurred.
		
		// The AjaxFormSubmitBehavior already calls the onSubmit of the form, all
		// we need to do in the onSubmit(AjaxRequestTarget) handler is do our Ajax
		// specific stuff, like rendering our components.
		commentForm.add(new AjaxFormSubmitBehavior(commentForm, "onsubmit")
		{
			protected IAjaxCallDecorator getAjaxCallDecorator()
			{
				return new AjaxCallDecorator()
				{
					public CharSequence decorateScript(CharSequence script)
					{
						return script + "return false;";
					}
				};
			}

			protected void onSubmit(AjaxRequestTarget target)
			{
				// add the list of components that need to be updated
				target.addComponent(comments);
				target.addComponent(text);
				
				// focus the textarea again
				target.appendJavascript("document.getElementById('" + text.getMarkupId()
						+ "').focus();");
			}

			@Override
			protected void onError(AjaxRequestTarget target)
			{
			}
		});
	}

