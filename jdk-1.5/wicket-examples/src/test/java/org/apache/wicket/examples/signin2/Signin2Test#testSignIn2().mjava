	/**
	 * Test page.
	 */
	public void testSignIn2()
	{
		beginAt("/signin2");
		assertTitleEquals("Wicket Examples - signin2");

		this.setFormElement("username", "wicket");
		this.setFormElement("password", "wicket");
		this.checkCheckbox("rememberMeRow:rememberMe");
		log.debug("Submit Login screen");
		this.submit("submit");

		// this.dumpResponse(System.err);
		assertTitleEquals("Wicket Examples - signin2");
		// a) With wicket submitting a form will result in a temporary redirect,
		// with the redirect setting the Cookie.
		// b) jWebUnits Cookie test methods are all using the http response
		// object only
		// c) Like a browser, jwebunit will automatically handle the redirect
		// request
		// Hence dumpCookie will not print an Cookie and assertCookiePresent
		// will
		// fail.
		// The only mean available is to indirectly test the cookies. Indirectly
		// because
		// the screen flow depends on the cookies.
		// this.dumpCookies(System.err);
		// this.assertCookiePresent("signInPanel.signInForm.username");
		// this.assertCookiePresent("signInPanel.signInForm.password");
		log.debug("Click 'Sign Out'");
		this.clickLinkWithText("Sign Out");

		assertTitleEquals("Wicket Examples - signin2");
		log.debug("Click 'Home'");
		this.clickLinkWithText("Home");
		/*
		 * jWebUnit is missing assertCookieNotPresent() try { // jWebUnit does not offer an
		 * assertCookieNotPresent this.assertCookiePresent("signInPanel.signInForm.username");
		 * assertTrue("Should have thrown an excpetion", false); } catch (AssertionFailedError ex) { ; //
		 * ok }
		 * 
		 * try { // jWebUnit does not offer an assertCookieNotPresent
		 * this.assertCookiePresent("signInPanel.signInForm.password"); assertTrue("Should have
		 * thrown an excpetion", false); } catch (AssertionFailedError ex) { ; // ok }
		 */
		assertTitleEquals("Wicket Examples - signin2");
	}

