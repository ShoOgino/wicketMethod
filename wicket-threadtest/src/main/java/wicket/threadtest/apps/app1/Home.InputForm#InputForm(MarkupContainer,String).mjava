		/**
		 * Construct.
		 * 
		 * @param parent
		 * @param name
		 *            Component name
		 */
		public InputForm(MarkupContainer parent, String name) {
			super(parent, name, new CompoundPropertyModel<FormInputModel>(new FormInputModel()));

			// Dropdown for selecting locale
			new LocaleDropDownChoice(this, "localeSelect");

			// Link to return to default locale
			new Link(this, "defaultLocaleLink") {
				@Override
				public void onClick() {
					WebRequest request = (WebRequest) getRequest();
					setLocale(request.getLocale());
				}
			};

			new TextField<String>(this, "stringProperty").setRequired(true).setLabel(new Model<String>("String"));
			new TextField<Integer>(this, "integerProperty", Integer.class).setRequired(true).add(
					NumberValidator.POSITIVE);
			new TextField<Double>(this, "doubleProperty", Double.class).setRequired(true);
			// we have a component attached to the label here, as we want to
			// synchronize the
			// id's of the label, textfield and datepicker. Note that you can
			// perfectly
			// do without labels
			WebMarkupContainer dateLabel = new WebMarkupContainer(this, "dateLabel");
			TextField datePropertyTextField = new TextField<Date>(this, "dateProperty", Date.class);
			new DatePicker(this, "datePicker", dateLabel, datePropertyTextField);
			new TextField<Integer>(this, "integerInRangeProperty", Integer.class).add(NumberValidator.range(0, 100))
					.setRequired(true);
			new CheckBox(this, "booleanProperty");
			RadioChoice<String> rc = new RadioChoice<String>(this, "numberRadioChoice", NUMBERS).setSuffix("");
			rc.setLabel(new Model<String>("number"));
			rc.setRequired(true);

			RadioGroup group = new RadioGroup(this, "numbersGroup");
			new ListView<String>(group, "numbers", NUMBERS) {
				@Override
				protected void populateItem(ListItem<String> item) {
					new Radio<String>(item, "radio", item.getModel());
					new Label(item, "number", item.getModelObject());
				};
			};

			CheckGroup checks = new CheckGroup(this, "numbersCheckGroup");
			new ListView<String>(checks, "numbers", NUMBERS) {
				@Override
				protected void populateItem(ListItem<String> item) {
					new Check<String>(item, "check", item.getModel());
					new Label(item, "number", item.getModelObject());
				};
			};

			new ListMultipleChoice<String>(this, "siteSelection", SITES);

			// TextField using a custom converter.
			new TextField<URL>(this, "urlProperty", URL.class) {
				/**
				 * @see wicket.Component#getConverter(java.lang.Class)
				 */
				@Override
				public IConverter getConverter(Class type) {
					return new SimpleConverterAdapter() {
						@Override
						public Object toObject(String value) {
							try {
								return new URL(value.toString());
							} catch (MalformedURLException e) {
								throw new ConversionException("'" + value + "' is not a valid URL");
							}
						}

						@Override
						public String toString(Object value) {
							return value != null ? value.toString() : null;
						}
					};
				}
			};

			// TextField using a mask converter
			new TextField<UsPhoneNumber>(this, "phoneNumberUS", UsPhoneNumber.class) {
				/**
				 * @see wicket.Component#getConverter(java.lang.Class)
				 */
				@Override
				public IConverter getConverter(Class type) {
					// US telephone number mask
					return new MaskConverter("(###) ###-####", UsPhoneNumber.class);
				}
			};

			// and this is to show we can nest ListViews in Forms too
			new LinesListView(this, "lines");

			new ImageButton(this, "saveButton") {

				@Override
				public void onSubmit() {

				}

			};

			Link link = new Link(this, "resetButtonLink") {
				@Override
				public void onClick() {
					// just call modelChanged so that any invalid input is
					// cleared.
					InputForm.this.modelChanged();
				}
			};
			new Image(link, "resetButtonImage");
		}

