		/**
		 * Set the value of this entry. Note: In an entrySet or
		 * entrySet.iterator), unless you can guarantee lack of concurrent
		 * modification, <tt>setValue</tt> is not strictly guaranteed to
		 * actually replace the value field obtained via the <tt>get</tt>
		 * operation of the underlying hash table in multithreaded applications.
		 * If iterator-wide synchronization is not used, and any other
		 * concurrent <tt>put</tt> or <tt>remove</tt> operations occur,
		 * sometimes even to <em>other</em> entries, then this change is not
		 * guaranteed to be reflected in the hash table. (It might, or it might
		 * not. There are no assurances either way.)
		 * 
		 * @param value
		 *            the new value.
		 * @return the previous value, or null if entry has been detectably
		 *         removed.
		 * @exception NullPointerException
		 *                if the value is <code>null</code>.
		 * 
		 */
		public Object setValue(Object value)
		{
			if (value == null)
			{
				throw new IllegalArgumentException("Value must not be null");
			}
			Object oldValue = this.value;
			this.value = value;
			return oldValue;
		}

