	/**
	 * @see wicket.IRequestTarget#respond(wicket.RequestCycle)
	 */
	public void respond(final RequestCycle requestCycle)
	{
		// Initialize temporary variables
		Page page = component.getPage();
		if (page != null)
		{
			page.startComponentRender(component);
		}

		// Let component render itself
		if (component instanceof Page)
		{
			// Use the default Page request target, if component is a Page
			new PageRequestTarget((Page)component).respond(requestCycle);
		}
		else
		{
			// Render the component
			try
			{
				// collect feedback
				if (component instanceof MarkupContainer)
				{
					MarkupContainer container = (MarkupContainer)component;

					container.visitChildren(IFeedback.class, new IVisitor()
					{
						public Object component(Component component)
						{
							((IFeedback)component).updateFeedback();
							return IVisitor.CONTINUE_TRAVERSAL;
						}
					});
				}

				if (component instanceof IFeedback)
				{
					((IFeedback)component).updateFeedback();
				}

				// attach
				component.internalAttach();

				// Render the component
				component.renderComponent();
			}
			finally
			{
				component.getPage().internalDetach();
			}
		}

		if (page != null)
		{
			page.endComponentRender(component);
		}
	}

