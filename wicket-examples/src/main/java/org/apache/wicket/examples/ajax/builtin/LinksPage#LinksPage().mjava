	/**
	 * Constructor
	 */
	public LinksPage()
	{
		final Label c1 = new Label("c1", new PropertyModel<Integer>(this, "counter1"));
		c1.setOutputMarkupId(true);
		add(c1);

		final Label c2 = new Label("c2", new PropertyModel<Integer>(this, "counter2"));
		c2.setOutputMarkupId(true);
		add(c2);

		final Label c3 = new Label("c3", new PropertyModel<Integer>(this, "counter3"));
		c3.setOutputMarkupId(true);
		add(c3);

		add(new AjaxLink<Void>("c1-link")
		{
			@Override
			public void onClick(AjaxRequestTarget target)
			{
				counter1++;
				target.add(c1);
			}
		});

		add(new AjaxFallbackLink<Void>("c2-link")
		{
			@Override
			public void onClick(AjaxRequestTarget target)
			{
				counter2++;
				// notice that for a fallback link we need to makesure the
				// target is not null. if the target is null ajax failed and the
				// fallback was used, so there is no need to do any ajax-related
				// processing.
				if (target != null)
				{
					target.add(c2);
				}
			}
		});

		add(new IndicatingAjaxLink("c3-link")
		{
			@Override
			public void onClick(AjaxRequestTarget target)
			{
				counter3++;
				target.add(c3);
				// sleep for 5 seconds to show off the busy indicator
				try
				{
					Thread.sleep(5000);
				}
				catch (InterruptedException e)
				{
					// noop
				}
			}
		});

		add(new AjaxLink<Void>("success-link")
		{
			@Override
			public void onClick(AjaxRequestTarget target)
			{
			}

			@Override
			protected org.apache.wicket.ajax.IAjaxCallDecorator getAjaxCallDecorator()
			{
				return new AjaxCallDecorator()
				{
					@Override
					public CharSequence decorateOnSuccessScript(Component c, CharSequence script)
					{
						return "alert('Success');";
					}

					@Override
					public CharSequence decorateOnFailureScript(Component c, CharSequence script)
					{
						return "alert('Failure');";
					}

					@Override
					public CharSequence decorateScript(Component c, CharSequence script)
					{
						return "alert('Before ajax call');" + script;
					}
				};
			}
		});

		add(new AjaxLink<Void>("failure-link")
		{
			@Override
			public void onClick(AjaxRequestTarget target)
			{
				// Set the proper setting to execute ajax failure handler
				// note: will be set until the "exception" link is clicked or the application is
				// restarted
				getApplication().getExceptionSettings().setAjaxErrorHandlingStrategy(
					AjaxErrorStrategy.INVOKE_FAILURE_HANDLER);

				throw new WicketRuntimeException("Failure link clicked");
			}

			@Override
			protected org.apache.wicket.ajax.IAjaxCallDecorator getAjaxCallDecorator()
			{
				return new AjaxCallDecorator()
				{
					@Override
					public CharSequence decorateOnSuccessScript(Component c, CharSequence script)
					{
						return "alert('Success');";
					}

					@Override
					public CharSequence decorateOnFailureScript(Component c, CharSequence script)
					{
						return "alert('Failure');";
					}

					@Override
					public CharSequence decorateScript(Component c, CharSequence script)
					{
						return "alert('Before ajax call');" + script;
					}
				};
			}
		});

		add(new AjaxLink<Void>("set-response-page")
		{
			@Override
			public void onClick(AjaxRequestTarget target)
			{
				setResponsePage(new LinksPage());
			}
		});

		add(new AjaxLink<Void>("exception")
		{
			@Override
			public void onClick(AjaxRequestTarget target)
			{
				// Set the proper setting to show the error page
				// note: will be set until the "failure" link is clicked or the application is
				// restarted
				getApplication().getExceptionSettings().setAjaxErrorHandlingStrategy(
					AjaxErrorStrategy.REDIRECT_TO_ERROR_PAGE);

				throw new RuntimeException("test whether the exception handling works");
			}
		});
	}

