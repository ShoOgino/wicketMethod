		public ModalFragment(String id)
		{
			super(id, "fragment", ModalDialogPage.this);

			Form<Void> form = new Form<Void>("form");
			queue(form);
			
			nestedDialog = new ModalDialog("nestedDialog");
			nestedDialog.add(new DefaultTheme());
			nestedDialog.trapFocus();
			nestedDialog.closeOnEscape();
			queue(nestedDialog);

			queue(new AjaxLink<Void>("ajaxOpenDialog")
			{
				@Override
				public void onClick(AjaxRequestTarget target)
				{
					openDialog(target);
				}
			});

			queue(new Link<Void>("openDialog")
			{
				@Override
				public void onClick()
				{
					openDialog(null);
				}
			});

			queue(new TextField("text").add(new AjaxEventBehavior("keydown")
			{
				@Override
				protected void updateAjaxAttributes(AjaxRequestAttributes attributes)
				{
					super.updateAjaxAttributes(attributes);
					
					attributes.getAjaxCallListeners().add(new AjaxCallListener()
					{
						@Override
						public CharSequence getPrecondition(Component component)
						{
							return "if (Wicket.Event.keyCode(attrs.event) != 13) return false; Wicket.Event.fix(attrs.event).preventDefault(); return true;";
						}
					});
				}

				@Override
				protected void onEvent(AjaxRequestTarget target)
				{
					openDialog(target);
				}
			}));

			queue(new WebMarkupContainer("closing")
			{
				@Override
				protected void onConfigure()
				{
					super.onConfigure();

					setVisible(findParent(ModalDialog.class) != null);
				}
			});

			queue(new Link<Void>("close")
			{
				@Override
				public void onClick()
				{
					findParent(ModalDialog.class).close(null);
				}
			});
			
			final MultiLineLabel lorem = new MultiLineLabel("lorem", "");
			lorem.setOutputMarkupId(true);
			queue(lorem);
			
			queue(new AjaxLink<Void>("ipsum") {
				@Override
				public void onClick(AjaxRequestTarget target)
				{
					lorem.setDefaultModelObject(lorem.getDefaultModelObject() + "\n\n" + getString("lorem"));
					
					target.add(lorem);
				}
			});
		}

