		/**
		 * Construct.
		 * 
		 * @param name
		 *            Component name
		 */
		@SuppressWarnings("serial")
		public InputForm(String name)
		{
			super(name, new CompoundPropertyModel<>(new FormInputModel()));

			// Dropdown for selecting locale
			add(new LocaleDropDownChoice("localeSelect"));

			// Link to return to default locale
			add(Link.onClick("defaultLocaleLink", (link) -> {
				WebRequest request = (WebRequest)getRequest();
				setLocale(request.getLocale());
			}));

			add(new TextField<String>("stringProperty").setRequired(true).setLabel(
				new Model<>("String")));

			add(new TextField<>("integerProperty", Integer.class).setRequired(true).add(
				new RangeValidator<>(1, Integer.MAX_VALUE)));

			add(new TextField<>("doubleProperty", Double.class).setRequired(true));

			add(new TextField<Integer>("integerInRangeProperty").setRequired(true).add(
				new RangeValidator<>(0, 100)));

			add(new CheckBox("booleanProperty"));
			add(new Multiply("multiply"));
			// display the multiply result
			Label multiplyLabel = new Label("multiplyLabel", new PropertyModel<Integer>(
				getDefaultModel(), "multiply"));
			// just for fun, add a border so that our result will be displayed as '[ x ]'
			multiplyLabel.add(new BeforeAndAfterBorder());
			add(multiplyLabel);
			RadioChoice<String> rc = new RadioChoice<>("numberRadioChoice", NUMBERS).setSuffix("");
			rc.setLabel(new Model<>("number"));
			rc.setRequired(true);
			add(rc);

			RadioGroup<String> group = new RadioGroup<>("numbersGroup");
			add(group);
			ListView<String> persons = new ListView<String>("numbers", NUMBERS)
			{
				@Override
				protected void populateItem(ListItem<String> item)
				{
					Radio<String> radio = new Radio<>("radio", item.getModel());
					radio.setLabel(item.getModel());
					item.add(radio);
					item.add(new SimpleFormComponentLabel("number", radio));
				}
			}.setReuseItems(true);
			group.add(persons);

			CheckGroup<String> checks = new CheckGroup<>("numbersCheckGroup");
			add(checks);
			ListView<String> checksList = new ListView<String>("numbers", NUMBERS)
			{
				@Override
				protected void populateItem(ListItem<String> item)
				{
					Check<String> check = new Check<>("check", item.getModel());
					check.setLabel(item.getModel());
					item.add(check);
					item.add(new SimpleFormComponentLabel("number", check));
				}
			}.setReuseItems(true);
			checks.add(checksList);

			add(new ListMultipleChoice<>("siteSelection", SITES));

			// TextField using a custom converter.
			add(new TextField<URL>("urlProperty", URL.class)
			{
				@SuppressWarnings("unchecked")
				@Override
				public <C> IConverter<C> getConverter(final Class<C> type)
				{
					if (URL.class.isAssignableFrom(type))
					{
						return (IConverter<C>)URLConverter.INSTANCE;
					}
					else
					{
						return super.getConverter(type);
					}
				}
			});

			// TextField using a mask converter
			add(new TextField<UsPhoneNumber>("phoneNumberUS", UsPhoneNumber.class)
			{
				@Override
				public <C> IConverter<C> getConverter(final Class<C> type)
				{
					if (UsPhoneNumber.class.isAssignableFrom(type))
					{
						// US telephone number mask
						return new MaskConverter<>("(###) ###-####", UsPhoneNumber.class);
					}
					else
					{
						return super.getConverter(type);
					}
				}
			});

			// and this is to show we can nest ListViews in Forms too
			add(new LinesListView("lines"));

			add(new Button("saveButton"));

			add(Button.onSubmit("resetButton", (btn) -> {
				// just set a new instance of the page
				setResponsePage(FormInput.class);
			}).setDefaultFormProcessing(false));
		}

