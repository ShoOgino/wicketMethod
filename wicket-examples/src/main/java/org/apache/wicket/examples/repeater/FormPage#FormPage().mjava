	/**
	 * constructor
	 */
	public FormPage()
	{
		form = new Form("form");
		add(form);

		// create a repeater that will display the list of contacts.
		RefreshingView<Contact> refreshingView = new RefreshingView<Contact>("simple")
		{
			@Override
			protected Iterator<IModel<Contact>> getItemModels()
			{
				// for simplicity we only show the first 10 contacts
				SortParam<String> sort = new SortParam<>("firstName", true);
				Iterator<Contact> contacts = DatabaseLocator.getDatabase()
					.find(0, 10, sort)
					.iterator();

				// the iterator returns contact objects, but we need it to
				// return models, we use this handy adapter class to perform
				// on-the-fly conversion.
				return new ModelIteratorAdapter<Contact>(contacts)
				{

					@Override
					protected IModel<Contact> model(Contact object)
					{
						return new CompoundPropertyModel<Contact>(
							new DetachableContactModel(object));
					}

				};

			}

			@Override
			protected void populateItem(final Item<Contact> item)
			{
				// populate the row of the repeater
				IModel<Contact> contact = item.getModel();
				item.add(new ActionPanel("actions", contact));
				item.add(new TextField<>("id"));
				item.add(new TextField<>("firstName"));
				item.add(new TextField<>("lastName"));
				item.add(new TextField<>("homePhone"));
				item.add(new TextField<>("cellPhone"));
			}

			@Override
			protected Item<Contact> newItem(String id, int index, IModel<Contact> model)
			{
				// this item sets markup class attribute to either 'odd' or
				// 'even' for decoration
				return new OddEvenItem<>(id, index, model);
			}
		};

		// because we are in a form we need to preserve state of the component
		// hierarchy (because it might contain things like form errors that
		// would be lost if the hierarchy for each item was recreated every
		// request by default), so we use an item reuse strategy.
		refreshingView.setItemReuseStrategy(ReuseIfModelsEqualStrategy.getInstance());


		form.add(refreshingView);
	}

