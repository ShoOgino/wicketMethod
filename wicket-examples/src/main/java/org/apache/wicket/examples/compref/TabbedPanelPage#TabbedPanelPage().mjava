	/**
	 * Constructor
	 */
	public TabbedPanelPage()
	{
		setDefaultModel(new Model<>("tabpanel"));

		// create links used to switch between css variations
		addCssSwitchingLinks();

		// create a list of ITab objects used to feed the tabbed panel
		final List<ITab> tabs = new ArrayList<>();
		tabs.add(new AbstractTab(new Model<String>("first tab"))
		{
			private static final long serialVersionUID = 1L;

			@Override
			public Panel getPanel(String panelId)
			{
				return new TabPanel1(panelId);
			}

		});

		tabs.add(new AbstractTab(new Model<String>("second tab"))
		{
			private static final long serialVersionUID = 1L;

			@Override
			public Panel getPanel(String panelId)
			{
				return new TabPanel2(panelId);
			}

		});

		tabs.add(new AbstractTab(new Model<String>("third tab"))
		{
			private static final long serialVersionUID = 1L;

			@Override
			public Panel getPanel(String panelId)
			{
				return new TabPanel3(panelId);
			}

		});

		// add the new tabbed panel, attribute modifier only used to switch
		// between different css variations
		final TabbedPanel<ITab> tabbedPanel = new TabbedPanel<>("tabs", tabs);
		tabbedPanel.add(AttributeModifier.replace("class", TabbedPanelPage.this.getDefaultModel()));
		add(tabbedPanel);
	}

