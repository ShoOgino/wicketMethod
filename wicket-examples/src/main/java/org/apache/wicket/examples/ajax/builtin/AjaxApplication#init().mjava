	@Override
	protected void init()
	{
		super.init();

		getApplicationSettings().setUploadProgressUpdatesEnabled(true);

		getResourceSettings().setThrowExceptionOnMissingResource(false);

		getRequestCycleSettings().addResponseFilter(new AjaxServerAndClientTimeFilter());

		getDebugSettings().setAjaxDebugModeEnabled(true);
		
		// use this header resource decorator to defer all JavaScript resources
		setHeaderResponseDecorator(response -> new ResourceAggregator(new JavaScriptDeferHeaderResponse(response)));

		getComponentInitializationListeners().add(new IComponentInitializationListener()
		{
			@Override
			public void onInitialize(Component component)
			{
				if (component instanceof WebPage) {
					component.add(new AjaxNewWindowNotifyingBehavior());
				}
			}
		});

		mountPage("autocomplete", AutoCompletePage.class);
		mountPage("choice", ChoicePage.class);
		mountPage("clock", ClockPage.class);
		mountPage("editable-label", EditableLabelPage.class);
		mountPage("effects", EffectsPage.class);
		mountPage("form", FormPage.class);
		mountPage("guest-book", GuestBook.class);
		mountPage("lazy-loading", LazyLoadingPage.class);
		mountPage("links", LinksPage.class);
		mountPage("modal-window", ModalWindowPage.class);
		mountPage("on-change-ajax-behavior", OnChangeAjaxBehaviorPage.class);
		mountPage("pageables", PageablesPage.class);
		mountPage("ratings", RatingsPage.class);
		mountPage("tabbed-panel", TabbedPanelPage.class);
		mountPage("todo-list", TodoList.class);
		mountPage("world-clock", WorldClockPage.class);
		mountPage("upload", FileUploadPage.class);
		mountPage("download", AjaxDownloadPage.class);
	}

