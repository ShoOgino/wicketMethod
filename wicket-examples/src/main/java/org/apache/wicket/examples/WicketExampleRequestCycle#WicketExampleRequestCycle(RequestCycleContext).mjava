	/**
	 * Construct.
	 * 
	 * @param context
	 */
	public WicketExampleRequestCycle(RequestCycleContext context)
	{
		super(context);
	}
// /**
// * Construct.
// *
// * @param application
// * @param request
// * @param response
// */
// public WicketExampleRequestCycle(WebApplication application, WebRequest request,
// Response response)
// {
// super(application, request, response);
// }
//
// /**
// * @see org.apache.wicket.RequestCycle#onRuntimeException(org.apache.wicket.Page,
// * java.lang.RuntimeException)
// */
// @Override
// public Page onRuntimeException(final Page page, final RuntimeException e)
// {
// final Throwable cause;
// if (e.getCause() != null)
// {
// cause = e.getCause();
// }
// else
// {
// cause = e;
// }
//
// if (cause instanceof PageExpiredException)
// {
// handlePageExpiredException((PageExpiredException)cause);
// }
// return super.onRuntimeException(page, e);
// }
//
// /**
// * Checks to see if the request was ajax based. If so we send a 404 so that the
// * org.apache.wicket.ajax.IAjaxCallDecorator failure script is executed.
// *
// * @param e
// */
// private void handlePageExpiredException(final PageExpiredException e)
// {
// Response response = getOriginalResponse();
// if (response instanceof BufferedWebResponse)
// {
// BufferedWebResponse bufferedWebResponse = (BufferedWebResponse)response;
// Request request = getRequest();
// if (bufferedWebResponse.isAjax() &&
// request.getParameter(SourcesPage.PAGE_CLASS) != null)
// {
// // If there is a better way to figure out if SourcesPage was the request, we should
// // do that.
// throw new AbortWithWebErrorCodeException(404);
// }
// }
// }

