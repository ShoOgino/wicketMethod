	/**
	 * Constructor.
	 */
	public GuestBook()
	{
		// Add comment form
		CommentForm commentForm = new CommentForm("commentForm");
		add(commentForm);

		// the WebMarkupContainer is used to update the listview in an ajax call
		comments = new WebMarkupContainer("comments");
		add(comments.setOutputMarkupId(true));

		// Add commentListView of existing comments
		comments.add(commentListView = new ListView<Comment>("comments",
			new PropertyModel<List<Comment>>(this, "commentList"))
		{
			@Override
			public void populateItem(final ListItem<Comment> listItem)
			{
				final Comment comment = listItem.getModelObject();
				listItem.add(new Label("date", new Model<Date>(comment.getDate())));
				listItem.add(new MultiLineLabel("text", comment.getText()));
			}
		});

		// we need to cancel the standard submit of the form in the onsubmit
		// handler,
		// otherwise we'll get double submits. To do so, we return false after
		// the
		// ajax submit has occurred.

		// The AjaxFormSubmitBehavior already calls the onSubmit of the form,
		// all
		// we need to do in the onSubmit(AjaxRequestTarget) handler is do our
		// Ajax
		// specific stuff, like rendering our components.
		commentForm.add(new AjaxFormSubmitBehavior(commentForm, "submit")
		{
			@Override
			protected void onSubmitBeforeForm(AjaxRequestTarget target)
			{
				// add the list of components that need to be updated
				target.add(comments);
				target.add(text);

				// focus the textarea again
				target.appendJavaScript("document.getElementById('" + text.getMarkupId() +
					"').focus();");
			}

			@Override
			protected void onError(AjaxRequestTarget target)
			{
			}
		});
	}

