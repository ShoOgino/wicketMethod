	/**
	 * Constructor.
	 */
	public DateTimePage()
	{
		Form<String> form = new Form<>("form");
		this.add(form);

		form.add(new ZoneDropDownChoice("zoneSelect"));

		// Dropdown for selecting locale
		form.add(new LocaleDropDownChoice("localeSelect"));

		// Link to return to default locale
		form.add(new Link<Void>("defaultLocaleLink")
		{
			private static final long serialVersionUID = 1L;

			public void onClick()
			{
				WebRequest request = (WebRequest)getRequest();
				getSession().setLocale(request.getLocale());
			}
		});

		form.add(new TimeField("time1", new PropertyModel<>(this, "time1"))
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected boolean use12HourFormat()
			{
				return true;
			}
		});

		form.add(new TimeField("time2", new PropertyModel<>(this, "time2"))
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected boolean use12HourFormat()
			{
				return false;
			}
		});

		final LocalDateTextField dateField = new LocalDateTextField("date", new PropertyModel<>(this, "date"), "dd-MM-yyyy", "d-M-yyyy");
		form.add(dateField);

		final LocalDateTimeField datetimeField0 = new LocalDateTimeField("datetime0",
			new PropertyModel<>(this, "dateTime0"))
		{
			private static final long serialVersionUID = 1L;

			@Override
			protected LocalTime getDefaultTime()
			{
				return LocalTime.of(0, 0);
			}
		};
		form.add(datetimeField0);

		IModel<ZonedDateTime> zonedDateTime1 = new PropertyModel<>(this, "dateTime1");
		final LocalDateTimeField datetimeField1 = new LocalDateTimeField("datetime1",
			new ZonedToLocalDateTimeModel(zonedDateTime1)
			{
				private static final long serialVersionUID = 1L;

				@Override
				protected ZoneId getClientTimeZone()
				{
					return clientZone;
				}

				@Override
				protected ZoneId getTargetTimeZone()
				{
					return targetZone;
				}
			});
		form.add(datetimeField1);
		form.add(new Label("datetime1-label", zonedDateTime1));

		IModel<ZonedDateTime> zonedDateTime2 = new PropertyModel<>(this, "dateTime2");
		LocalDateTimeTextField datetimeField2 = new LocalDateTimeTextField("datetime2",
			new ZonedToLocalDateTimeModel(zonedDateTime2)
			{
				private static final long serialVersionUID = 1L;

				@Override
				protected ZoneId getClientTimeZone()
				{
					return clientZone;
				}

				@Override
				protected ZoneId getTargetTimeZone()
				{
					return targetZone;
				}
			}, FormatStyle.SHORT, FormatStyle.SHORT);
		form.add(datetimeField2);
		form.add(new Label("datetime2-label", zonedDateTime2));

		final ZonedDateTimeField datetimeField3 = new ZonedDateTimeField("datetime3",
			new PropertyModel<>(this, "dateTime3"));
		form.add(datetimeField3);

		final FeedbackPanel feedback = new FeedbackPanel("feedback");
		form.add(feedback);

		form.add(new Button("submit"));
	}

