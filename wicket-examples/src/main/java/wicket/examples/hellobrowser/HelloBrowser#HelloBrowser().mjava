	/**
	 * Construct.
	 */
	public HelloBrowser()
	{
		// add a label that outputs a the client info object; it will result in
		// the calls RequestCycle.getClientInfo -> Session.getClientInfo ->
		// RequestCycle.newClientInfo. this is done once by default and
		// afterwards cached in the session object. This application uses
		// a custom requestcycle that overrides newClientInfo to not only
		// look at the user-agent request header, but also snoops javascript
		// properties by redirecting to a special page.

		// don't use a property model here or anything else that is resolved
		// during rendering, as changing the request target during rendering
		// is not allowed.
		WebClientInfo clientInfo = WebRequestCycle.get().getClientInfo();
		final ClientProperties properties = clientInfo.getProperties();

		new MultiLineLabel(this, "clientinfo", properties.toString());

		IModel clientTimeModel = new AbstractReadOnlyModel()
		{
			/**
			 * @see wicket.model.AbstractReadOnlyModel#getObject()
			 */
			@Override
			public Object getObject()
			{
				TimeZone timeZone = properties.getTimeZone();
				if (timeZone != null)
				{
					Calendar cal = Calendar.getInstance(timeZone);
					Locale locale = getLocale();
					DateFormat dateFormat = DateFormat.getTimeInstance(DateFormat.LONG, locale);
					String calAsString = dateFormat.format(cal.getTime());
					StringBuffer b = new StringBuffer("Based on your settings, your time is: ");
					b.append(calAsString);
					b.append(" (and your time zone is ");
					b.append(timeZone.getDisplayName(getLocale()));
					b.append(")");
					return b.toString();
				}
				return "Unfortunately, we were not able to figure out what your time zone is, so we have"
						+ "no idea what your time is";
			}
		};
		new Label(this, "clienttime", clientTimeModel);
	}

