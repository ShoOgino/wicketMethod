	/**
	 * Constructor.
	 * 
	 * @param parent
	 *            The parent of this component The parent of this component.
	 * @param id
	 *            See Component
	 * @param session
	 * @see Component#Component(MarkupContainer, String)
	 */
	public SessionView(final MarkupContainer parent, final String id, final Session session)
	{
		super(parent, id);

		// Basic attributes
		new Label(this, "id", session.getId());
		new Label(this, "locale", session.getLocale().toString());
		new Label(this, "style", session.getStyle() == null ? "[None]" : session.getStyle());
		new Label(this, "size", new Model()
		{
			private static final long serialVersionUID = 1L;

			@Override
			public Object getObject()
			{
				return Bytes.bytes(Objects.sizeof(session));
			}
		});
		new Label(this, "totalSize", new Model()
		{
			private static final long serialVersionUID = 1L;

			@Override
			public Object getObject()
			{
				return Bytes.bytes(session.getSizeInBytes());
			}
		});

		// Get pagemaps
		final List<IPageMap> pagemaps = session.getPageMaps();

		// Create the table containing the list the components
		new ListView<IPageMap>(this, "pagemaps", pagemaps)
		{
			private static final long serialVersionUID = 1L;

			/**
			 * Populate the table with Wicket elements
			 */
			@Override
			protected void populateItem(final ListItem listItem)
			{
				PageMap p = (PageMap)listItem.getModelObject();
				new PageMapView(listItem, "pagemap", p);
			}
		};
	}

