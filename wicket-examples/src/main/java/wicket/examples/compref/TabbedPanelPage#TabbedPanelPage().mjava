	/**
	 * Constructor
	 */
	public TabbedPanelPage()
	{
		setModel(new Model<String>("tabpanel"));

		// create links used to switch between css variations
		addCssSwitchingLinks();

		// create a list of ITab objects used to feed the tabbed panel
		List<AbstractTab> tabs = new ArrayList<AbstractTab>();
		tabs.add(new AbstractTab(new Model<String>("first tab"))
		{
			@Override
			public Panel getPanel(final MarkupContainer parent, final String panelId)
			{
				return new TabPanel1(parent, panelId);
			}
		});

		tabs.add(new AbstractTab(new Model<String>("second tab"))
		{
			@Override
			public Panel getPanel(final MarkupContainer parent, final String panelId)
			{
				return new TabPanel2(parent, panelId);
			}
		});

		tabs.add(new AbstractTab(new Model<String>("third tab"))
		{
			@Override
			public Panel getPanel(final MarkupContainer parent, final String panelId)
			{
				return new TabPanel3(parent, panelId);
			}
		});

		// add the new tabbed panel, attribute modifier only used to switch
		// between different css variations
		new TabbedPanel(this, "tabs", tabs).add(new AttributeModifier("class", true,
				TabbedPanelPage.this.getModel()));

	}

