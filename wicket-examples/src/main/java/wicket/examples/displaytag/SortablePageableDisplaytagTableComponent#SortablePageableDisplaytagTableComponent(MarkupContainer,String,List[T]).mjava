	/**
	 * Constructor.
	 * 
	 * @param parent
	 * @param id
	 *            Name of component
	 * @param list
	 *            List of data to display
	 */
	public SortablePageableDisplaytagTableComponent(final MarkupContainer parent, final String id,
			final List<T> list)
	{
		super(parent, id);

		// Get an internal copy of the model data
		this.data = new ArrayList<T>();
		this.data.addAll(list);

		// Add a table
		final SimplePageableListView<T> table = new SimplePageableListView<T>(this, "rows", list, 10);

		// Add a sortable header to the table
		new SortableListViewHeaders<T>(this, "header", table)
		{
			@Override
			protected int compareTo(final SortableListViewHeader header, final Object o1, final Object o2)
			{
				if (header.getId().equals("id"))
				{
					return ((ListObject)o1).getId() - ((ListObject)o2).getId();
				}

				return super.compareTo(header, o1, o2);
			}

			@Override
			protected Comparable getObjectToCompare(final SortableListViewHeader header,
					final Object object)
			{
				final String name = header.getId();
				if (name.equals("name"))
				{
					return ((ListObject)object).getName();
				}
				if (name.equals("email"))
				{
					return ((ListObject)object).getEmail();
				}
				if (name.equals("status"))
				{
					return ((ListObject)object).getStatus();
				}
				if (name.equals("comment"))
				{
					return ((ListObject)object).getDescription();
				}

				return "";
			}
		};

		// Add a headline
		new TableHeaderLabel(this, "headline", table);

		// Add navigation
		new PagingNavigation(this, "navigation", table);

		// Add some navigation links
		new PagingNavigationLink(this, "first", table, 0);
		new PagingNavigationIncrementLink(this, "prev", table, -1);
		new PagingNavigationIncrementLink(this, "next", table, 1);
		new PagingNavigationLink(this, "last", table, table.getPageCount() - 1);
	}

