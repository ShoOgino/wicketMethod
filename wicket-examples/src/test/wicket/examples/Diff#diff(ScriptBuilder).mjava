	/**
	 * Get the results of comparison as an edit script. The script is described
	 * by a list of changes. The standard ScriptBuilder implementations provide
	 * for forward and reverse edit scripts. Alternate implementations could,
	 * for instance, list common elements instead of differences.
	 * 
	 * @param bld
	 *            an object to build the script from change flags
	 * @return the head of a list of changes
	 */
	public change diff(final ScriptBuilder bld)
	{

		/*
		 * Some lines are obviously insertions or deletions because they don't
		 * match anything. Detect them now, and avoid even thinking about them
		 * in the main comparison algorithm.
		 */

		discard_confusing_lines();

		/*
		 * Now do the main comparison algorithm, considering just the
		 * undiscarded lines.
		 */

		xvec = filevec[0].undiscarded;
		yvec = filevec[1].undiscarded;

		int diags = filevec[0].nondiscarded_lines + filevec[1].nondiscarded_lines + 3;
		fdiag = new int[diags];
		fdiagoff = filevec[1].nondiscarded_lines + 1;
		bdiag = new int[diags];
		bdiagoff = filevec[1].nondiscarded_lines + 1;

		compareseq(0, filevec[0].nondiscarded_lines, 0, filevec[1].nondiscarded_lines);
		fdiag = null;
		bdiag = null;

		/*
		 * Modify the results slightly to make them prettier in cases where that
		 * can validly be done.
		 */

		shift_boundaries();

		/*
		 * Get the results of comparison in the form of a chain of `struct
		 * change's -- an edit script.
		 */
		return bld.build_script(filevec[0].changed_flag, filevec[0].buffered_lines,
				filevec[1].changed_flag, filevec[1].buffered_lines);

	}

