		/**
		 * Don't really discard the provisional lines except when they occur in
		 * a run of discardables, with nonprovisionals at the beginning and end.
		 * 
		 * @param discards
		 *            to discard
		 */
		private void filterDiscards(final byte[] discards)
		{
			final int end = buffered_lines;

			for (int i = 0; i < end; i++)
			{
				/* Cancel provisional discards not in middle of run of discards. */
				if (discards[i] == 2)
					discards[i] = 0;
				else if (discards[i] != 0)
				{
					/* We have found a nonprovisional discard. */
					int j;
					int length;
					int provisional = 0;

					/*
					 * Find end of this run of discardable lines. Count how many
					 * are provisionally discardable.
					 */
					for (j = i; j < end; j++)
					{
						if (discards[j] == 0)
							break;
						if (discards[j] == 2)
							++provisional;
					}

					/* Cancel provisional discards at end, and shrink the run. */
					while (j > i && discards[j - 1] == 2)
					{
						discards[--j] = 0;
						--provisional;
					}

					/*
					 * Now we have the length of a run of discardable lines
					 * whose first and last are not provisional.
					 */
					length = j - i;

					/*
					 * If 1/4 of the lines in the run are provisional, cancel
					 * discarding of all provisional lines in the run.
					 */
					if (provisional * 4 > length)
					{
						while (j > i)
							if (discards[--j] == 2)
								discards[j] = 0;
					}
					else
					{
						int consec;
						int minimum = 1;
						int tem = length / 4;

						/*
						 * MINIMUM is approximate square root of LENGTH/4. A
						 * subrun of two or more provisionals can stand when
						 * LENGTH is at least 16. A subrun of 4 or more can
						 * stand when LENGTH >= 64.
						 */
						while ((tem = tem >> 2) > 0)
							minimum *= 2;
						minimum++;

						/*
						 * Cancel any subrun of MINIMUM or more provisionals
						 * within the larger run.
						 */
						for (j = 0, consec = 0; j < length; j++)
							if (discards[i + j] != 2)
								consec = 0;
							else if (minimum == ++consec)
								/* Back up to start of subrun, to cancel it all. */
								j -= consec;
							else if (minimum < consec)
								discards[i + j] = 0;

						/*
						 * Scan from beginning of run until we find 3 or more
						 * nonprovisionals in a row or until the first
						 * nonprovisional at least 8 lines in. Until that point,
						 * cancel any provisionals.
						 */
						for (j = 0, consec = 0; j < length; j++)
						{
							if (j >= 8 && discards[i + j] == 1)
								break;
							if (discards[i + j] == 2)
							{
								consec = 0;
								discards[i + j] = 0;
							}
							else if (discards[i + j] == 0)
								consec = 0;
							else
								consec++;
							if (consec == 3)
								break;
						}

						/* I advances to the last line of the run. */
						i += length - 1;

						/* Same thing, from end. */
						for (j = 0, consec = 0; j < length; j++)
						{
							if (j >= 8 && discards[i - j] == 1)
								break;
							if (discards[i - j] == 2)
							{
								consec = 0;
								discards[i - j] = 0;
							}
							else if (discards[i - j] == 0)
								consec = 0;
							else
								consec++;
							if (consec == 3)
								break;
						}
					}
				}
			}
		}

