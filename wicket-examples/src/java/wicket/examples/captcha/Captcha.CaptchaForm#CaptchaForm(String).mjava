		/**
		 * Construct.
		 * 
		 * @param id
		 *            component id
		 */
		public CaptchaForm(String id)
		{
			super(id);

			// The dynamic image resource that generates the captcha image for
			// each request using a fresh (u)uid every time. The id is used by
			// the validator to check whether the input matches the expected
			// answer
			DynamicImageResource captchaImageResource = new DynamicImageResource()
			{
				protected byte[] getImageData()
				{
					try
					{
						ByteArrayOutputStream jpegOutputStream = new ByteArrayOutputStream();
						challengeId = new UID().toString();
						BufferedImage challenge = captchaService.getImageChallengeForID(
								challengeId, Session.get().getLocale());
						JPEGImageEncoder jpegEncoder = JPEGCodec
								.createJPEGEncoder(jpegOutputStream);
						jpegEncoder.encode(challenge);
						return jpegOutputStream.toByteArray();
					}
					catch (Exception e)
					{
						throw new RuntimeException(e);
					}
				}
			};
			add(new Image("captchaImage", captchaImageResource));

			// add the text field for receiving the client's answer
			IModel responseModel = new PropertyModel(this, "challengeResponse");
			TextField responseField = new TextField("response", responseModel)
			{
				protected final void onComponentTag(final ComponentTag tag)
				{
					super.onComponentTag(tag);
					// clear the field after each render
					tag.put("value", "");
				}
			};
			add(responseField);

			// and add the validator that checks the response against the
			// challenge
			responseField.add(new AbstractValidator()
			{
				public void validate(FormComponent component)
				{
					if (!captchaService.validateResponseForID(challengeId, component.getInput())
							.booleanValue())
					{
						error(component);
					}
				}

				protected String resourceKey(final FormComponent formComponent)
				{
					return "captcha.validation.failed";
				}
			});

			// add a feedback panel to trap any messages
			add(new FeedbackPanel("feedback"));
		}

