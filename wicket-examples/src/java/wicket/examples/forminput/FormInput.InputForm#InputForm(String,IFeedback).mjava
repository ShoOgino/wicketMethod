		/**
		 * Construct.
		 * 
		 * @param name
		 *            Component name
		 * @param feedback
		 *            Feedback display for form
		 */
		public InputForm(String name, IFeedback feedback)
		{
			super(name, new CompoundPropertyModel(new FormInputModel()), feedback);

			RequiredTextField stringTextField = new RequiredTextField("stringProperty");
			stringTextField.add(new ValidationEventRequestHandler("onchange"));
			add(stringTextField);
			add(new RequiredTextField("integerProperty", Integer.class));
			add(new RequiredTextField("doubleProperty", Double.class));
			add(new RequiredTextField("dateProperty", Date.class));
			add(new RequiredTextField("integerInRangeProperty", Integer.class).add(IntegerValidator
					.range(0, 100)));
			add(new CheckBox("booleanProperty"));
			add(new RadioChoice("numberRadioChoice", NUMBERS)
			{
				protected String getSuffix()
				{
					return "";
				}
			});
			add(new ListMultipleChoice("siteSelection", SITES));

			// as an example, we use a custom converter here.
			add(new TextField("urlProperty", URL.class)
			{
				public IConverter getConverter()
				{
					return new URLConverter();
				}
			});

			add(new ImageButton("saveButton"));

			add(new Link("resetButtonLink")
			{
				public void onClick()
				{
					// just call modelChanged so that any invalid input is cleared.
					InputForm.this.modelChanged();
				}
			}.add(new Image("resetButtonImage")));
		}

