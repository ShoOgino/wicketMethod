		/**
		 * Construct.
		 * 
		 * @param name
		 *            Component name
		 */
		public InputForm(MarkupContainer parent, String name)
		{
			super(parent, name, new CompoundPropertyModel(new FormInputModel()));

			// Dropdown for selecting locale
			add(new LocaleDropDownChoice(this, "localeSelect"));

			// Link to return to default locale
			add(new Link(this, "defaultLocaleLink")
			{
				@Override
				public void onClick()
				{
					WebRequest request = (WebRequest)getRequest();
					setLocale(request.getLocale());
				}
			});

			RequiredTextField stringTextField = new RequiredTextField(this, "stringProperty");
			stringTextField.setLabel(new Model("String"));
			add(stringTextField);
			RequiredTextField integerTextField = new RequiredTextField(this, "integerProperty",
					Integer.class);
			add(integerTextField.add(NumberValidator.POSITIVE));
			add(new RequiredTextField(this, "doubleProperty", Double.class));
			// we have a component attached to the label here, as we want to
			// synchronize the
			// id's of the label, textfield and datepicker. Note that you can
			// perfectly
			// do without labels
			WebMarkupContainer dateLabel = new WebMarkupContainer(this, "dateLabel");
			add(dateLabel);
			TextField datePropertyTextField = new TextField(this, "dateProperty", Date.class);
			add(datePropertyTextField);
			add(new DatePicker(this, "datePicker", dateLabel, datePropertyTextField));
			add(new RequiredTextField(this, "integerInRangeProperty", Integer.class)
					.add(NumberValidator.range(0, 100)));
			add(new CheckBox(this, "booleanProperty"));
			RadioChoice rc = new RadioChoice(this, "numberRadioChoice", NUMBERS).setSuffix("");
			rc.setLabel(new Model("number"));
			rc.setRequired(true);
			add(rc);

			RadioGroup group = new RadioGroup(this, "numbersGroup");
			add(group);
			ListView persons = new ListView(group, "numbers", NUMBERS)
			{
				@Override
				protected void populateItem(ListItem item)
				{
					item.add(new Radio(item, "radio", item.getModel()));
					item.add(new Label(item, "number", item.getModelObjectAsString()));
				};
			};
			group.add(persons);

			CheckGroup checks = new CheckGroup(this, "numbersCheckGroup");
			add(checks);
			ListView checksList = new ListView(checks, "numbers", NUMBERS)
			{
				@Override
				protected void populateItem(ListItem item)
				{
					item.add(new Check(item, "check", item.getModel()));
					item.add(new Label(item, "number", item.getModelObjectAsString()));
				};
			};
			checks.add(checksList);

			add(new ListMultipleChoice(this, "siteSelection", SITES));

			// TextField using a custom converter.
			add(new TextField(this, "urlProperty", URL.class)
			{
				public IConverter getConverter()
				{
					return new SimpleConverterAdapter()
					{
						@Override
						public String toString(Object value)
						{
							return value != null ? value.toString() : null;
						}

						@Override
						public Object toObject(String value)
						{
							try
							{
								return new URL(value.toString());
							}
							catch (MalformedURLException e)
							{
								throw new ConversionException("'" + value + "' is not a valid URL");
							}
						}
					};
				}
			});

			// TextField using a mask converter
			add(new TextField(this, "phoneNumberUS", UsPhoneNumber.class)
			{
				public IConverter getConverter()
				{
					// US telephone number mask
					return new MaskConverter("(###) ###-####", UsPhoneNumber.class);
				}
			});

			// and this is to show we can nest ListViews in Forms too
			add(new LinesListView(this, "lines"));

			add(new ImageButton(this, "saveButton"));

			Link link = new Link(this, "resetButtonLink")
			{
				@Override
				public void onClick()
				{
					// just call modelChanged so that any invalid input is
					// cleared.
					InputForm.this.modelChanged();
				}
			};
			link.add(new Image(link, "resetButtonImage"));
			add(link);
		}

