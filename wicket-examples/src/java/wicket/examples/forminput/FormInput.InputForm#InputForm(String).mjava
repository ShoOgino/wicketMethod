		/**
		 * Construct.
		 * 
		 * @param name
		 *            Component name
		 */
		public InputForm(String name)
		{
			super(name, new CompoundPropertyModel(new FormInputModel()));

			RequiredTextField stringTextField = new RequiredTextField("stringProperty");
			stringTextField.setLabel(new Model("String"));
			add(stringTextField);
			RequiredTextField integerTextField = new RequiredTextField("integerProperty", Integer.class);
			add(integerTextField);
			add(new RequiredTextField("doubleProperty", Double.class));
			// we have a component attached to the label here, as we want to synchronize the
			// id's of the label, textfield and datepicker. Note that you can perfectly
			// do without labels
			WebMarkupContainer dateLabel = new WebMarkupContainer("dateLabel");
			add(dateLabel);
			TextField datePropertyTextField = new TextField("dateProperty", Date.class);
			add(datePropertyTextField);
			add(new DatePicker("datePicker", dateLabel, datePropertyTextField));
			add(new RequiredTextField("integerInRangeProperty", Integer.class).add(
			        IntegerValidator.range(0, 100)));
			add(new CheckBox("booleanProperty"));
			RadioChoice rc = new RadioChoice("numberRadioChoice", NUMBERS).setSuffix("");
			rc.add(RequiredValidator.getInstance());
			add(rc);
			
			add(new ListMultipleChoice("siteSelection", SITES));

			// as an example, we use a custom converter here.
			add(new TextField("urlProperty", URL.class)
			{
				public IConverter getConverter()
				{
					return new URLConverter();
				}
			});

			// and this is to show we can nest ListViews in Forms too
			add(new LinesListView("lines"));

			add(new ImageButton("saveButton"));

			add(new Link("resetButtonLink")
			{
				public void onClick()
				{
					// just call modelChanged so that any invalid input is
					// cleared.
					InputForm.this.modelChanged();
				}
			}.add(new Image("resetButtonImage")));
		}

