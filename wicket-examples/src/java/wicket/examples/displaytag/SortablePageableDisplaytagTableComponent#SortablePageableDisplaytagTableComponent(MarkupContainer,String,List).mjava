	/**
	 * Constructor.
	 * 
	 * @param id
	 *            Name of component
	 * @param list
	 *            List of data to display
	 */
	public SortablePageableDisplaytagTableComponent(MarkupContainer parent,final String id, final List list)
	{
		super(parent,id);

		// Get an internal copy of the model data
		this.data = new ArrayList();
		this.data.addAll(list);

		// Add a table
		final SimplePageableListView table = new SimplePageableListView(this,"rows", list, 10);
		add(table);

		// Add a sortable header to the table
		add(new SortableListViewHeaders(this,"header", table)
		{
			protected int compareTo(SortableListViewHeader header, Object o1, Object o2)
			{
				if (header.getId().equals("id"))
				{
					return ((ListObject)o1).getId() - ((ListObject)o2).getId();
				}

				return super.compareTo(header, o1, o2);
			}

			protected Comparable getObjectToCompare(final SortableListViewHeader header,
					final Object object)
			{
				final String name = header.getId();
				if (name.equals("name"))
				{
					return ((ListObject)object).getName();
				}
				if (name.equals("email"))
				{
					return ((ListObject)object).getEmail();
				}
				if (name.equals("status"))
				{
					return ((ListObject)object).getStatus();
				}
				if (name.equals("comment"))
				{
					return ((ListObject)object).getDescription();
				}

				return "";
			}
		});

		// Add a headline
		add(new TableHeaderLabel(this,"headline", table));

		// Add navigation
		add(new PagingNavigation(this,"navigation", table));

		// Add some navigation links
		add(new PagingNavigationLink(this,"first", table, 0));
		add(new PagingNavigationIncrementLink(this,"prev", table, -1));
		add(new PagingNavigationIncrementLink(this,"next", table, 1));
		add(new PagingNavigationLink(this,"last", table, table.getPageCount() - 1));
	}

