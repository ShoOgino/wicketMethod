		/**
		 * @see wicket.Component#initModel()
		 */
		protected IModel initModel()
		{
			// do not use our own model, but use the model of DatePicker instead.
			// We need to do a little trick though, as the parent model may be a
			// CompoundPropertyModel. In that case, setObject would be called with THIS
			// component, resulting in Ognl trying to resolve expression 'dateInput'
			// on the model. If we dispatch get/setObject to the parent alltogether, we
			// will never have that kind of issues

			return new Model()
			{
				/**
				 * Returns the model object of the parent.
				 * @see wicket.model.IModel#getObject(wicket.Component)
				 */
				public Object getObject(Component component)
				{
					MarkupContainer parent = getParent();
					IModel parentModel = parent.getModel();
					if (parentModel != null)
					{
						return parentModel.getObject(parent);
					}
					return null;
				};

				/**
				 * Sets the object on the parents' model.
				 * @see wicket.model.IModel#setObject(wicket.Component, java.lang.Object)
				 */
				public void setObject(Component component, Object object)
				{
					MarkupContainer parent = getParent();
					IModel parentModel = parent.getModel();
					if (parentModel != null)
					{
						parentModel.setObject(parent, object);						
					}
				};

			};
		}

