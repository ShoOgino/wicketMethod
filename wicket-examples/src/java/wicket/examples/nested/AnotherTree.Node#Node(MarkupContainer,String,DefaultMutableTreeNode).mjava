		/**
		 * Construct.
		 * 
		 * @param panelId
		 *            The id of the component
		 * @param node
		 *            The tree node for this panel
		 */
		public Node(MarkupContainer parent,String panelId, final DefaultMutableTreeNode node)
		{
			super(parent,panelId);

			Object userObject = node.getUserObject();

			// create a link for expanding and collapsing the node
			final Link junctionLink = new Link(this,"junctionLink")
			{
				public void onClick()
				{
					junctionLinkClicked(node);
				}
			};
			add(junctionLink);

			// we make this a proper model instead of just evaluating the
			// string, as we want to have the current value everytime
			// the label is rendered
			IModel junctionLabelModel = new AbstractReadOnlyModel()
			{
				public Object getObject(Component component)
				{
					return (!node.isLeaf()) ? (isExpanded(node)) ? "^" : ">" : "";
				}
			};
			String junctionLabel = "";
			if (!node.isLeaf())
			{
				junctionLabel = (isExpanded(node)) ? "[-]" : "[+]";
			}
			junctionLink.add(new Label(junctionLink,"junctionLabel", junctionLabelModel));

			// create a link for selecting a node
			final Link nodeLink = new Link(this,"nodeLink")
			{
				public void onClick()
				{
					nodeLinkClicked(node);
				}
			};
			String label = (userObject instanceof List) ? "" : String.valueOf(node.getUserObject());
			nodeLink.add(new Label(nodeLink,"label", label));
			add(nodeLink);
		}

