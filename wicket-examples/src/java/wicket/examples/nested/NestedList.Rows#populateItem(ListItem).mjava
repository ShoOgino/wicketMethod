		/**
		 * @see wicket.markup.html.list.ListView#populateItem(wicket.markup.html.list.ListItem)
		 */
		@Override
		protected void populateItem(ListItem listItem)
		{
			Object modelObject = listItem.getModelObject();

			if (modelObject instanceof List)
			{
				// create a panel that renders the sub lis
				NestedList nested = new NestedList<T>(listItem, "nested", (List)modelObject);
				// if the current element is a list, we create a dummy row/
				// label element
				// as we have to confirm to our HTML definition, and set it's
				// visibility
				// property to false as we do not want LI tags to be rendered.
				WebMarkupContainer row = new WebMarkupContainer(listItem, "row");
				row.setVisible(false);
				new WebMarkupContainer(row, "label");
			}
			else
			{
				// if the current element is not a list, we create a dummy panel
				// element
				// to confirm to our HTML definition, and set this panel's
				// visibility
				// property to false to avoid having the UL tag rendered
				NestedList nested = new NestedList<T>(listItem, "nested", null);
				nested.setVisible(false);
				// add the row (with the LI element attached, and the label with
				// the
				// row's actual value to display
				WebMarkupContainer row = new WebMarkupContainer(listItem, "row");
				new Label(row, "label", modelObject.toString());
			}
		}

