	/**
	 * Constructor.
	 * @param searchCDPage the search page to navigate back to
	 * @param id the id of the cd to edit
	 */
	public EditPage(final SearchPage searchCDPage, Long id)
	{
		super();
		cdModel = new HibernateObjectModel(id, CD.class, new HibernateSessionDelegate());
		this.searchCDPage = searchCDPage;
		add(new Label("cdTitle", new TitleModel(cdModel)));
		FeedbackPanel feedback = new FeedbackPanel("feedback");
		add(feedback);
		add(new DetailForm("detailForm", feedback, cdModel));
		add(new ImageUploadForm("imageUpload", cdModel));

		// create an image resource that displays a question mark when no image is
		// set on the cd, or displays a thumbnail of the cd's image when there is one
		ImageResource thumbImgResource = new ImageResource()
		{
			public IResource getResource()
			{
				final CD cd = (CD)cdModel.getObject(null);
				if (cd.getImage() == null)
				{
					return IMG_UNKNOWN.getResource();
				}
				else
				{
					DynamicImageResource img = new DynamicImageResource()
					{
						protected byte[] getImageData()
						{
							return cd.getImage();
						}
					};
					ThumbnailImageResource res =
						new ThumbnailImageResource(img, 100);
					return res.getResource();
				}
			}

			public String getPath()
			{
				invalidate(); // force getting the resource on each request;
				return super.getPath();
			}
		};

		// create a link that displays the full image in a popup page
		ImagePopupLink popupImageLink = new ImagePopupLink("popupImageLink", cdModel);

		// create an image using the image resource
		popupImageLink.add(new Image("cdimage", thumbImgResource));

		// add the link to the original image
		add(popupImageLink);

		// add link for deleting the image
		add(new DeleteImageLink("deleteImageLink", cdModel));
	}

