	/**
	 * @see wicket.examples.WicketExampleApplication#init()
	 */
	protected void init()
	{
		getExceptionSettings().setThrowExceptionOnMissingResource(false);
		getRequestCycleSettings().setRenderStrategy(Settings.REDIRECT_TO_RENDER);

		// Handle unauthorized access to pages
		getSecuritySettings().setUnauthorizedComponentInstantiationListener(new IUnauthorizedComponentInstantiationListener()
		{
			public void onUnauthorizedInstantiation(final Component component)
			{
				// If there is a sign in page class declared, and the unauthorized
				// component is a page, but it's not the sign in page
				if (component instanceof Page)
				{
					// Redirect to intercept page to let the user sign in
					throw new RestartResponseAtInterceptPageException(SignIn.class);
				}
				else
				{
					// The component was not a page, so throw an exception
					throw new UnauthorizedInstantiationException(component.getClass());
				}
			}
		});

		// Create a simple authorization strategy, that checks all pages of type
		// Authenticated web page.
		SimplePageAuthorizationStrategy authorizationStrategy = new SimplePageAuthorizationStrategy(
				AuthenticatedWebPage.class)
		{
			protected boolean isAuthorized()
			{
				// check whether the user is logged on
				return (((LibrarySession)Session.get()).isSignedIn());
			}
		};

		// set the strategy
		getSecuritySettings().setAuthorizationStrategy(authorizationStrategy);
	}

