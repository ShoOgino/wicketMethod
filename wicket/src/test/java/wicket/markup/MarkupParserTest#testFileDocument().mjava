	/**
	 * 
	 * @throws ParseException
	 * @throws ResourceStreamNotFoundException
	 * @throws IOException
	 */
	public final void testFileDocument() throws ParseException, ResourceStreamNotFoundException,
			IOException
	{
		IResourceStreamFactory locator = new ResourceStreamFactory();
		MarkupResourceStream resource = newMarkupResourceStream(locator, this.getClass(), "1",
				null, "html");

		MarkupFragment tokens = parse(resource);
		log.info("tok(0)=" + tokens.get(0));
		// Assert.assertEquals(docText, tokens.get(0).toString());

		resource = newMarkupResourceStream(locator, this.getClass(), "2", null, "html");
		tokens = parse(resource);
		log.info("tok(0)=" + tokens.get(0));
		// Assert.assertEquals(docText, tokens.get(0).toString());

		resource = newMarkupResourceStream(locator, this.getClass(), "3", null, "html");
		tokens = parse(resource);
		log.info("tok(0)=" + tokens.get(0));
		// Assert.assertEquals(docText, tokens.get(0).toString());

		resource = newMarkupResourceStream(locator, this.getClass(), "4", null, "html");
		tokens = parse(resource);
		log.info("tok(0)=" + tokens.get(0));
		// Assert.assertEquals(docText, tokens.get(0).toString());

		// File from jar (URL resource)
		resource = newMarkupResourceStream(locator, PageExpiredErrorPage.class, null, null, "html");
		tokens = parse(resource);
		log.info("tok(0)=" + tokens.get(0));
		// Assert.assertEquals(docText, tokens.get(0).toString());

		resource = newMarkupResourceStream(locator, this.getClass(), "5", null, "html");
		tokens = parse(resource);
		log.info("tok(0)=" + tokens.get(0));
		// Assert.assertEquals(docText, tokens.get(0).toString());

		// wicket:param is no longer supported
		// resource = newMarkupResourceStream(locator, this.getClass(), "6",
		// null, "html");
		// tokens = parse(resource);
		// log.info("tok(0)=" + tokens.get(0));
		// Assert.assertEquals(docText, tokens.get(0).toString());

		resource = newMarkupResourceStream(locator, this.getClass(), "7", null, "html");
		tokens = parse(resource);
		log.info("tok(0)=" + tokens.get(0));
		// Assert.assertEquals(docText, tokens.get(0).toString());

		resource = newMarkupResourceStream(locator, this.getClass(), "8", null, "html");
		tokens = parse(resource);
		log.info("tok(0)=" + tokens.get(0));
		// Assert.assertEquals(docText, tokens.get(0).toString());

		resource = newMarkupResourceStream(locator, this.getClass(), "9", null, "html");
		tokens = parse(resource);
		log.info("tok(0)=" + tokens.get(0));
		// Assert.assertEquals(docText, tokens.get(0).toString());

		resource = newMarkupResourceStream(locator, this.getClass(), "9", null, "html");
		MarkupParser parser = new MarkupParserFactory()
				.newMarkupParser(resource);
		parser.setStripComments(true);
		parser.readAndParse();
		log.info("tok(0)=" + tokens.get(0));
		// Assert.assertEquals(docText, tokens.get(0).toString());
	}

