	/**
	 * test component form processing
	 */
	public void testFormProcessing()
	{
		// setup some values we will use for testing as well as a test model
//		 FIXME backported from 1.2.1 needs to be reworked for 2.0
		/*
		final String radio1 = "radio1-selection";
		// object used to test compound property model
		MockModelObject modelObject = new MockModelObject();

		// object used to test regular model
		Model model = new Model();

		// set up necessary objects to emulate a form submission

		tester.createRequestCycle();
		MockPage page = new MockPage();

		// create component hierarchy

		final Form form = new Form("form", new CompoundPropertyModel(modelObject));

		final RadioGroup group = new RadioGroup("prop1");

		final WebMarkupContainer container = new WebMarkupContainer("container");

		final Radio choice1 = new Radio("radio1", new Model(radio1));
		final Radio choice2 = new Radio("prop2");

		final RadioGroup group2 = new RadioGroup("group2", model);

		final Radio choice3 = new Radio("radio3", new Model(radio1));

		page.add(form);
		form.add(group);
		group.add(container);
		container.add(choice1);
		group.add(choice2);
		form.add(group2);
		group2.add(choice3);

		// test mock form submissions

		modelObject.setProp1(radio1);

		form.onFormSubmitted();
		assertTrue("group: running with nothing selected - model must be set to null", modelObject
				.getProp1() == null);
		assertTrue("group2: running with nothing selected - model must be set to null", model
				.getObject(null) == null);

		tester.getServletRequest().setParameter(group.getInputName(), choice1.getPath().substring(group.getPath().length() + 1));
		tester.getServletRequest().setParameter(group2.getInputName(), choice3.getPath().substring(group2.getPath().length() + 1));
		form.onFormSubmitted();
		assertEquals("group: running with choice1 selected - model must be set to value of radio1",
				modelObject.getProp1(), choice1.getModelObject());
		assertEquals(
				"group2: running with choice3 selected - model must be set to value of radio1",
				model.getObject(null), choice3.getModelObject());

		tester.getServletRequest().setParameter(group.getInputName(), choice2.getPath().substring(group.getPath().length() + 1));
		form.onFormSubmitted();
		assertEquals("group: running with choice2 selected - model must be set to value of radio2",
				modelObject.getProp1(), choice2.getModelObject());

		tester.getServletRequest().setParameter(group2.getInputName(), choice1.getPath().substring(group.getPath().length() + 1));
		try
		{
			form.onFormSubmitted();
			fail("group2: ran with an invalid choice selected but did not fail");
		}
		catch (WicketRuntimeException e)
		{

		}
*/
	}

