	/**
	 * Create set of tests by taking the testUrlXXX arrays and running through all possible
	 * permutations of their combinations.
	 * 
	 * @param testObjects
	 *            Used to create a url.
	 * @param options
	 */
	public void testIsValid(Object[] testObjects, int options)
	{
		UrlValidator urlVal = new UrlValidator(null, options);
		assertTrue(urlVal.isValid("http://www.google.com"));
		assertTrue(urlVal.isValid("http://www.google.com/"));
		int statusPerLine = 60;
		int printed = 0;
		if (printIndex)
		{
			statusPerLine = 6;
		}
		do
		{
			StringBuffer testBuffer = new StringBuffer();
			boolean expected = true;
			for (int testPartsIndexIndex = 0; testPartsIndexIndex < testPartsIndex.length; ++testPartsIndexIndex)
			{
				int index = testPartsIndex[testPartsIndexIndex];
				ResultPair[] part = (ResultPair[])testObjects[testPartsIndexIndex];
				testBuffer.append(part[index].item);
				expected &= part[index].valid;
			}
			String url = testBuffer.toString();
			boolean result = urlVal.isValid(url);
			assertEquals(url, expected, result);
			if (printStatus)
			{
				if (printIndex)
				{
					System.out.print(testPartsIndextoString());
				}
				else
				{
					if (result == expected)
					{
						System.out.print('.');
					}
					else
					{
						System.out.print('X');
					}
				}
				printed++;
				if (printed == statusPerLine)
				{
					System.out.println();
					printed = 0;
				}
			}
		}
		while (incrementTestPartsIndex(testPartsIndex, testObjects));
		if (printStatus)
		{
			System.out.println();
		}
	}

