	/**
	 * test component form processing
	 */
	// TODO (Eelco) This is an aweful test. Why is 'mock page' (which isn't a
	// real mock, but just some arbitrary page) used rather than a page with
	// markup that corresponds to the component structure that is build up?
	// Components and markup go together in Wicket, period.
	public void testFormProcessing()
	{
		// setup some values we will use for testing as well as a test model
		final String check1 = "check1-selection";
		final String check2 = "check2-selection";

		MockModelObject modelObject = new MockModelObject();
		modelObject.setProp2(check2);

		// test model constructors
		List<Object> list = new ArrayList<Object>();
		CollectionModel<Object> model = new CollectionModel<Object>(list);

		final CheckGroup<Object> group2 = new CheckGroup<Object>("group2", model);
		assertTrue(group2.getDefaultModelObject() == list);

		final CheckGroup<Object> group3 = new CheckGroup<Object>("group3", list);
		assertTrue(group3.getDefaultModelObject() == list);


		// set up necessary objects to emulate a form submission

		// this could have been any page it seems. see comment at method
		MockPage page = new MockPage();

		// create component hierarchy

		final Form<MockModelObject> form = new Form<MockModelObject>("form",
			new CompoundPropertyModel<MockModelObject>(modelObject))
		{
			private static final long serialVersionUID = 1L;

			@Override
			public String getMarkupId()
			{
				// hack for the fact that this test doesn't relate to any markup
				return "foo";
			}
		};

		final CheckGroup<Object> group = new CheckGroup<Object>("prop1");

		final WebMarkupContainer container = new WebMarkupContainer("container");

		final Check<Serializable> choice1 = new Check<Serializable>("check1",
			new Model<Serializable>(check1));
		final Check<String> choice2 = new Check<String>("prop2");

		page.add(form);
		form.add(group);
		group.add(container);
		container.add(choice1);
		group.add(choice2);

		// test mock form submissions

		modelObject.getProp1().add(check1);

		form.onFormSubmitted();
		assertTrue("running with nothing selected - model must be empty", modelObject.getProp1()
			.size() == 0);

		tester.getRequest().getPostRequestParameters().setParameterValue(group.getInputName(),
			String.valueOf(choice1.getValue()));
		form.onFormSubmitted();
		assertTrue("running with choice1 selected - model must only contain value of check1",
			modelObject.getProp1().size() == 1 && modelObject.getProp1().contains(check1));

		tester.getRequest().getPostRequestParameters().setParameterValue(group.getInputName(),
			String.valueOf(choice2.getValue()));
		form.onFormSubmitted();
		assertTrue("running with choice2 selected - model must only contain value of check2",
			modelObject.getProp1().size() == 1 && modelObject.getProp1().contains(check2));

		// throw in some nulls into the request param to make sure they are
		// ignored
		tester.getRequest()
			.getPostRequestParameters()
			.addParameterValue(group.getInputName(), null);
		tester.getRequest().getPostRequestParameters().addParameterValue(group.getInputName(),
			String.valueOf(choice1.getValue()));
		tester.getRequest().getPostRequestParameters().addParameterValue(group.getInputName(),
			String.valueOf(choice2.getValue()));

		form.onFormSubmitted();

		assertTrue(
			"running with choice1 and choice2 selected - model must only contain values of check1 and check2",
			modelObject.getProp1().size() == 2 && modelObject.getProp1().contains(check2) &&
				modelObject.getProp1().contains(check1));

		tester.getRequest().getPostRequestParameters().setParameterValue(group.getInputName(),
			"some weird choice uuid to test error");
		try
		{
			form.onFormSubmitted();
			fail("running with an invalid choice value in the request param, should fail");
		}
		catch (WicketRuntimeException e)
		{

		}


	}

