	/**
	 * Get a list of all html files
	 * 
	 * @param startDir
	 * @return List
	 * @throws FileNotFoundException
	 * @throws ClassNotFoundException
	 */
	private List<File> getFileListing(final File startDir) throws FileNotFoundException
	{
		final List<File> result = new ArrayList<File>();
		final File[] filesAndDirs = startDir.listFiles();
		for (File file : filesAndDirs)
		{
			if (file.isFile() == false)
			{
				// Directory: recursive call
				final List<File> deeperList = getFileListing(file);
				result.addAll(deeperList);
			}
			else
			{
				// Oly html files arre relevant
				if (file.getName().endsWith(".html"))
				{
					// Exclude all file known to be excluded
					boolean hit = false;
					for (String name : exclude)
					{
						if (file.getPath().endsWith(name))
						{
							hit = true;
							break;
						}
					}
					if (hit == false)
					{
						result.add(file);

						// Try to load the corresponding class
						String name = file.getPath();
						int pos = name.indexOf("\\wicket");
						name = name.substring(pos + 1);
						name = name.substring(0, name.length() - 5);
						name = name.replace('\\', '.');
						name = name.replace("..", ".");
						
						// make sure the class loader loaded the class already
						try
						{
							Class clazz = this.getClass().getClassLoader().loadClass(name);
							
							Constructor constructor = null;
							try
							{
								constructor = clazz.getConstructor(new Class[] {});
							}
							catch (Exception ex)
							{
								try
								{
									constructor = clazz.getConstructor(new Class[] { MarkupContainer.class, String.class });
								}
								catch (Exception ex2)
								{
									log.error("Failed to load constructor for: " + clazz.toString());
									throw ex2;
								}
							}
//							Constructor constructor = containerClass.getConstructor(new Class[] { MarkupContainer.class, String.class, IModel.class }); 
							this.containers.add((Class<? extends MarkupContainer>)clazz);
						}
						catch (Exception ex)
						{
							// ignore
						}
					}
				}
			}
		}
		return result;
	}

