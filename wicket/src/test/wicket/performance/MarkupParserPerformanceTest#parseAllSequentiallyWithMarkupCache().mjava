	/**
	 * Parse the markup in sequentiell order. Usufull to identify hotspots.
	 * 
	 * @throws Exception
	 */
	private void parseAllSequentiallyWithMarkupCache() throws Exception
	{
		log.info("Sequentially parse all markups (with MarkupCache)");

		DummyPage page = new DummyPage();
		
		int i = 0;
		Class<? extends MarkupContainer> markupContainerClass = null;

		try
		{
			for (Class<? extends MarkupContainer>containerClass : this.containers)
			{
				markupContainerClass = containerClass;
				
				Constructor constructor = null;
				try
				{
					constructor = containerClass.getConstructor(new Class[] {});
				}
				catch (Exception ex)
				{
					try
					{
						constructor = containerClass.getConstructor(new Class[] { MarkupContainer.class, String.class });
					}
					catch (Exception ex2)
					{
						log.error("Failed to load constructor for: " + markupContainerClass.toString());
					}
				}
//				Constructor constructor = containerClass.getConstructor(new Class[] { MarkupContainer.class, String.class, IModel.class }); 
//				this.application.getMarkupCache().getMarkupStream(container, true);

				if ((++i % 100) == 0)
				{
					log.info("... " + i);
				}
			}
		}
		catch (Exception ex)
		{
			log.error("Failed to load markup: " + markupContainerClass.toString());
			throw ex;
		}

		log.info("Finished: " + i);
	}

