		/**
		 * Adjust inserts/deletes of blank lines to join changes as much as
		 * possible. We do something when a run of changed lines include a blank
		 * line at one end and have an excluded blank line at the other. We are
		 * free to choose which blank line is included. `compareseq' always
		 * chooses the one at the beginning, but usually it is cleaner to
		 * consider the following blank line to be the "change". The only
		 * exception is if the preceding blank line would join this change to
		 * other changes.
		 * 
		 * @param f
		 *            the file being compared against
		 */

		void shift_boundaries(file_data f)
		{
			final boolean[] changed = changed_flag;
			final boolean[] other_changed = f.changed_flag;
			int i = 0;
			int j = 0;
			int i_end = buffered_lines;
			int preceding = -1;
			int other_preceding = -1;

			for (;;)
			{
				int start, end, other_start;

				/*
				 * Scan forwards to find beginning of another run of changes.
				 * Also keep track of the corresponding point in the other file.
				 */

				while (i < i_end && !changed[1 + i])
				{
					while (other_changed[1 + j++])
					{
						/*
						 * Non-corresponding lines in the other file will count
						 * as the preceding batch of changes.
						 */
						other_preceding = j;
					}
					i++;
				}

				if (i == i_end)
				{
					break;
				}

				start = i;
				other_start = j;

				for (;;)
				{
					/* Now find the end of this run of changes. */

					while (i < i_end && changed[1 + i])
					{
						i++;
					}
					end = i;

					/*
					 * If the first changed line matches the following unchanged
					 * one, and this run does not follow right after a previous
					 * run, and there are no lines deleted from the other file
					 * here, then classify the first changed line as unchanged
					 * and the following line as changed in its place.
					 */

					/*
					 * You might ask, how could this run follow right after
					 * another? Only because the previous run was shifted here.
					 */

					if (end != i_end
							&& equivs[start] == equivs[end]
							&& !other_changed[1 + j]
							&& end != i_end
							&& !((preceding >= 0 && start == preceding) || (other_preceding >= 0 && other_start == other_preceding)))
					{
						changed[1 + end++] = true;
						changed[1 + start++] = false;
						++i;
						/*
						 * Since one line-that-matches is now before this run
						 * instead of after, we must advance in the other file
						 * to keep in synch.
						 */
						++j;
					}
					else
					{
						break;
					}
				}

				preceding = i;
				other_preceding = j;
			}
		}

