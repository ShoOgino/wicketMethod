	/**
	 * @throws IOException
	 */
	public void testMoveDownLink() throws IOException
	{
		// Prepare the mock application to test the Link
		WebRequestCycle cycle = createRequestCycle();

		// Create a ListView with a model object which contains 4 items
		ListView lv = createListView(4);

		// add the ListView to the page
		cycle.getResponsePage().add(lv);

		// Create a ListItem for list object at index 1.
		ListItem li = new ListItem(lv, 1);

		// Create a move-up Link for the listItem and simulate a user
		// clicking it
		Link link = li.moveDownLink("1");
		link.onClick();
		assertEquals(new Integer(0), lv.getListObject(0));
		assertEquals(new Integer(2), lv.getListObject(1));
		assertEquals(new Integer(1), lv.getListObject(2));
		assertEquals(new Integer(3), lv.getListObject(3));

		// Repeat it for some critical entries
		li = new ListItem(lv, 3);
		link = li.moveDownLink("1");
		try
		{
			link.onClick();
		}
		catch (IndexOutOfBoundsException ex)
		{
			link = null;
		}
		assertNull(link);

		li = new ListItem(lv, 0);
		link = li.moveDownLink("1");
		link.onClick();
		assertEquals(new Integer(2), lv.getListObject(0));
		assertEquals(new Integer(0), lv.getListObject(1));
		assertEquals(new Integer(1), lv.getListObject(2));
		assertEquals(new Integer(3), lv.getListObject(3));

		// Be aware: listItem is linked to the index, not the component. Thus
		// repeating the click-event will again swap item 0 and 1.
		link.onClick();
		assertEquals(new Integer(0), lv.getListObject(0));
		assertEquals(new Integer(2), lv.getListObject(1));
		assertEquals(new Integer(1), lv.getListObject(2));
		assertEquals(new Integer(3), lv.getListObject(3));
	}

