	/**
	 * Test that detach closes the streams
	 * 
	 * @throws Exception 
	 */
	public void testInternalDetach() throws Exception
	{
		final MockPageWithFormAndUploadField page = new MockPageWithFormAndUploadField();
		
		FileUploadField field = new FileUploadField("upload");
		page.getForm().add(field);

		application.startPage(new ITestPageSource() 
		{
			private static final long serialVersionUID = 1L;

			public Page getTestPage()
			{
				return page;
			}
		});

		// Setup the request. It should be a IMultipartWebRequest
		RequestCycle requestCycle = application.createRequestCycle();
		MockHttpServletRequest servletRequest = application.getServletRequest();
		servletRequest.setMethod("POST");
		servletRequest.setParameter("form2:hf:fs", "");
		servletRequest.setParameter("wicketState", "");
		
		// Let's upload the dtd file. It's large enough to avoid being in memory.
		servletRequest.addFile("upload", new File("wicket-xhtml1-strict.dtd"), "text/xml");

		requestCycle.setRequest(new MultipartServletWebRequest(servletRequest, Bytes.MAX));
		
		// Get the file upload
		FileUpload fileUpload = field.getFileUpload();
		
		assertNotNull(fileUpload);
		
		// Get an input stream from the file upload
		InputStream is = fileUpload.getInputStream();
		
		// We should be able to read a byte
		assertTrue(is.read() != -1);
		
		field.internalOnDetach();
		
		// The input stream should be closed so we shouldn't be able to read any more bytes
		try 
		{
			is.read();
			fail();
		} 
		catch (IOException e)
		{
			// Expected
		}
		catch (Exception e)
		{
			fail();
		}
	}

