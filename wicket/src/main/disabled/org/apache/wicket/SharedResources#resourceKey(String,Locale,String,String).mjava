	/**
	 * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT CALL IT.
	 * 
	 * <p>
	 * Inserts _[locale] and _[style] into path just before any extension that might exist.
	 * 
	 * @param path
	 *            The resource path
	 * @param locale
	 *            The locale
	 * @param style
	 *            The style (see {@link org.apache.wicket.Session})
	 * @param variation
	 *            The component specific variation of the style
	 * @return The localized path
	 */
	public static String resourceKey(final String path, final Locale locale, final String style,
		final String variation)
	{
		// escape sequence for '..' (prevents crippled urls in browser)
		final CharSequence parentEscape = Application.get()
			.getResourceSettings()
			.getParentFolderPlaceholder();

		final String extension = Files.extension(path);
		String basePath = Files.basePath(path, extension);

		if (Strings.isEmpty(parentEscape) &&
			(Application.get().getConfigurationType() == Application.DEVELOPMENT) &&
			basePath.contains("../"))
		{
			log.error("----------------------------------------------------------------------------------------");
			log.error("Your path looks like: " + path);
			log.error("For security reasons moving up '../' is disabled by default. Please see");
			log.error("IResourceSettings.getParentFolderPlaceholder() and PackageResourceGuard for more details");
			log.error("----------------------------------------------------------------------------------------");
		}

		// get relative path to resource, replace '..' with escape sequence
		basePath = basePath.replace("../", parentEscape + "/");
		final AppendingStringBuffer buffer = new AppendingStringBuffer(basePath.length() + 16);
		buffer.append(basePath);

		// First style because locale can append later on.
		if (style != null)
		{
			buffer.append("_");
			buffer.append(style);
		}
		if (variation != null)
		{
			buffer.append("_");
			buffer.append(variation);
		}
		if (locale != null)
		{
			buffer.append("_");
			boolean l = locale.getLanguage().length() != 0;
			boolean c = locale.getCountry().length() != 0;
			boolean v = locale.getVariant().length() != 0;
			buffer.append(locale.getLanguage());
			if (c || (l && v))
			{
				buffer.append('_').append(locale.getCountry()); // This may just
				// append '_'
			}
			if (v && (l || c))
			{
				buffer.append('_').append(locale.getVariant());
			}
		}
		if (extension != null)
		{
			buffer.append('.');
			buffer.append(extension);
		}
		return buffer.toString();
	}

