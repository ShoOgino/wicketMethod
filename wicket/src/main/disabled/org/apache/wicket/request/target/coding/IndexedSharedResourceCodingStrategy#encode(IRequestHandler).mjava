	/**
	 * 
	 * @see org.apache.wicket.request.target.coding.IRequestTargetUrlCodingStrategy#encode(org.apache.wicket.IRequestHandler)
	 */
	public CharSequence encode(final IRequestHandler requestTarget)
	{
		if (!(requestTarget instanceof ISharedResourceRequestTarget))
		{
			throw new IllegalArgumentException("This encoder can only be used with instances of " +
				ISharedResourceRequestTarget.class.getName());
		}

		final ISharedResourceRequestTarget target = (ISharedResourceRequestTarget)requestTarget;

		// create url to shared resource
		final AppendingStringBuffer url = new AppendingStringBuffer();
		url.append(getMountPath());

		final ObsoleteRequestParameters requestParameters = target.getRequestParameters();

		Map<String, ?> params = requestParameters.getParameters();

		if (params != null)
		{
			params = new LinkedHashMap<String, Object>(params);

			int index = 0;

			// append indexed parameters to url:
			// these parameters are enumerated with the keys "0", "1", ...
			while (!params.isEmpty())
			{
				final String key = Integer.toString(index++);
				final Object value = params.get(key);

				// no more indexed parameters?
				if (value == null)
				{
					break;
				}

				// indexed parameters may not contain arrays
				if (value instanceof String[])
				{
					throw new IllegalArgumentException(
						"indexed parameter value must not be an array");
				}

				// remove indexed parameters from rest of parameters
				params.remove(key);

				// append indexed parameter to url
				url.append('/').append(urlEncodePathComponent(value.toString()));
			}

			// create query string from remaining parameters
			if (!params.isEmpty())
			{
				boolean first = true;

				// go through remaining parameters
				for (Map.Entry<String, ?> arg : params.entrySet())
				{
					final String key = urlEncodeQueryComponent(arg.getKey());
					final Object obj = arg.getValue();

					// for string arrays, create multiple query string parameters with all the
					// values
					if (obj instanceof String[])
					{
						for (String value : (String[])obj)
						{
							appendToQueryString(url, first, key, value);
							first = false;
						}
					}
					else
					{
						// for single query string value, just append it to url
						appendToQueryString(url, first, key, obj.toString());
						first = false;
					}
				}
			}
		}
		return url;
	}

