	/**
	 * Load the base markup
	 * 
	 * @param container
	 *            The original requesting markup container
	 * @param markup
	 *            The markup to checked for inheritance
	 * @return A markup object with the the base markup elements resolved.
	 */
	@SuppressWarnings("unchecked")
	private MarkupFragment getBaseMarkup(final MarkupContainer container,
			final MarkupFragment markup)
	{
		// Get the super class to than retrieve the markup associated with it
		final Class<? extends MarkupContainer> markupClass = (Class<? extends MarkupContainer>)markup
				.getMarkup().getResource().getMarkupClass().getSuperclass();

		final MarkupFragment baseMarkup = this.application.getMarkupCache().getMarkup(container,
				markupClass);
		if (baseMarkup == MarkupFragment.NO_MARKUP_FRAGMENT)
		{
			throw new MarkupNotFoundException(
					"Base markup of inherited markup not found. Component class: "
							+ markup.getMarkup().getResource().getContainerInfo()
									.getContainerClass().getName()
							+ " Enable debug messages for wicket.util.resource.Resource to get a list of all filenames tried.");
		}

		// Register an after-load listener for base markup. The listener
		// implementation will remove the derived markup from the cache as
		// reloading the base markup invalidates the derived markup as well
		this.application.getMarkupCache().addAfterLoadListener(
				baseMarkup.getMarkup().getResource(), new IChangeListener()
				{
					public void onChange()
					{
						if (log.isDebugEnabled())
						{
							log.debug("Remove derived markup from cache: "
									+ markup.getMarkup().getResource());
						}
						application.getMarkupCache().removeMarkup(markup.getMarkup().getResource());
					}

					/**
					 * Make sure there is only one listener per derived markup
					 * 
					 * @see java.lang.Object#equals(java.lang.Object)
					 */
					@Override
					public boolean equals(final Object obj)
					{
						return true;
					}

					/**
					 * Make sure there is only one listener per derived markup
					 * 
					 * @see java.lang.Object#hashCode()
					 */
					@Override
					public int hashCode()
					{
						return markup.getMarkup().getResource().getCacheKey().hashCode();
					}
				});

		return baseMarkup;
	}

