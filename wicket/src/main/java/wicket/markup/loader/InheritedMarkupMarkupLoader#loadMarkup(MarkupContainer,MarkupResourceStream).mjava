	/**
	 * @see wicket.markup.loader.IMarkupLoader#loadMarkup(wicket.MarkupContainer,
	 *      wicket.markup.MarkupResourceStream)
	 */
	@Override
	public final MarkupFragment loadMarkup(final MarkupContainer container,
			final MarkupResourceStream markupResourceStream) throws IOException,
			ResourceStreamNotFoundException
	{
		// read and parse the markup
		MarkupFragment markup = super.loadMarkup(container, markupResourceStream);

		// Check if markup contains <wicket:extend> which tells us that
		// we need to read the base markup as well.
		final MarkupFragment extendFragment = requiresBaseMarkup(markup);
		if (extendFragment != null)
		{
			final MarkupFragment baseMarkup = getBaseMarkup(container, markup);

			// Merge base and derived markup
			if (log.isDebugEnabled())
			{
				final String derivedResource = Strings.afterLast(markup.getMarkup().getResource()
						.toString(), '/');
				final String baseResource = Strings.afterLast(baseMarkup.getMarkup().getResource()
						.toString(), '/');
				log.debug("Merge markup: derived markup: " + derivedResource + "; base markup: "
						+ baseResource);
			}

			// Merge derived and base markup
			markup = merge(markup, baseMarkup, extendFragment);

			// make the new markup immutable
			markup.makeImmutable();

			if (log.isDebugEnabled())
			{
				log.debug("Merged markup: " + markup.toString());
			}
		}
		return markup;
	}

