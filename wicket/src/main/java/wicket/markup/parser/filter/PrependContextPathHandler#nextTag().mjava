	/**
	 * Get the next MarkupElement from the parent MarkupFilter and handle it if
	 * the specific filter criteria are met. Depending on the filter, it may
	 * return the MarkupElement unchanged, modified or it remove by asking the
	 * parent handler for the next tag.
	 * 
	 * @see wicket.markup.parser.IMarkupFilter#nextTag()
	 * @return Return the next eligible MarkupElement
	 */
	public MarkupElement nextTag() throws ParseException
	{
		// Get the next tag. If null, no more tags are available
		final ComponentTag tag = nextComponentTag();
		if (tag == null || tag.getId() != null)
		{
			return tag;
		}

		// Don't touch any wicket:id component
		if (tag.getId() != null)
		{
			return tag;
		}

		// this call should always get the default of the application or the
		// overriden one.
		if (contextPath != null)
		{
			for (final String attrName : attributeNames)
			{
				final String attrValue = tag.getAttributes().getString(attrName);
				if ((attrValue != null) && (attrValue.startsWith("/") == false)
						&& (attrValue.indexOf(":") < 0) && !(attrValue.startsWith("#")))
				{
					final String url;
					if (this.contextPath != null)
					{
						url = contextPath + attrValue;
					}
					else
					{
						url = attrValue;
					}
					tag.getAttributes().put(attrName, url);
					tag.setModified(true);
				}
			}
		}

		return tag;
	}

