	/**
	 * @see wicket.markup.parser.onLoadListener.IMarkupLoadListener#onAssociatedMarkupLoaded(wicket.MarkupContainer,
	 *      wicket.markup.MarkupFragment)
	 */
	public void onAssociatedMarkupLoaded(final MarkupContainer container,
			final MarkupFragment fragment)
	{
		// Remove any wicket header container
		container.visitChildren(WicketHeadContainer.class, new IVisitor()
		{
			public Object component(final Component<?> component)
			{
				component.remove();
				return CONTINUE_TRAVERSAL;
			}
		});
		
		// Get the container for the headers from the page
		final Page page = container.getPage();
		final HeaderContainer headerContainer;
		if (container instanceof WebPage)
		{
			headerContainer = ((WebPage)page).getHeaderContainer();
		}
		else
		{
			headerContainer = (HeaderContainer)page.get(HtmlHeaderSectionHandler.HEADER_ID);
		}

		// Search for wicket:head in the associated markup and copy the body
		// onload and onunload attributes
		fragment.visitChildren(MarkupFragment.class, new MarkupFragment.IVisitor()
		{
			private boolean foundBody = false;

			/**
			 * @see wicket.markup.MarkupFragment.IVisitor#visit(wicket.markup.MarkupElement,
			 *      wicket.markup.MarkupFragment)
			 */
			public Object visit(final MarkupElement element, final MarkupFragment parent)
			{
				final MarkupFragment frag = (MarkupFragment)element;
				final ComponentTag tag = frag.getTag();
				if (tag.isWicketHeadTag())
				{
					if (foundBody == true)
					{
						// Create a MarkupStream and position it at the error
						// location
						MarkupStream markupStream = new MarkupStream(fragment);
						while (markupStream.hasMore())
						{
							if (markupStream.next() == tag)
							{
								break;
							}
						}
						throw new MarkupException(
								"<wicket:head> must be before the <body>, <wicket:panel> ... tag");
					}

					WicketHeadContainer header = newWicketHeaderContainer(container, frag);
					// TODO check again why setVisible() doesn't work here
					header.setEnable(headerContainer.okToRender(header));

					return CONTINUE_TRAVERSAL_BUT_DONT_GO_DEEPER;
				}
				else if (tag.isBodyTag())
				{
					foundBody = true;
					if (page instanceof WebPage)
					{
						WebPage webPage = (WebPage)page;
						final CharSequence onLoad = tag.getString(ONLOAD);
						if (onLoad != null)
						{
							// Attach an AttributeModifier to the body container
							// which appends the new value to the onLoad
							// attribute
							webPage.getBodyContainer().addOnLoadModifier(onLoad, container);
						}

						final CharSequence onUnLoad = tag.getString(ONUNLOAD);
						if (onUnLoad != null)
						{
							// Same for unload
							webPage.getBodyContainer().addOnUnLoadModifier(onUnLoad, container);
						}
					}
				}
				else if (tag.isMajorWicketComponentTag())
				{
					foundBody = true;
				}

				return CONTINUE_TRAVERSAL;
			}
		});
	}

