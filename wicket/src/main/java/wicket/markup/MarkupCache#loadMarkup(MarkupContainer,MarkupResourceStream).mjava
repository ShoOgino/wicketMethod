	/**
	 * Loads markup from a resource stream.
	 * 
	 * @param container
	 *            The original requesting markup container
	 * @param markupResourceStream
	 *            The markup resource stream to load
	 * @return The markup
	 */
	private final MarkupFragment loadMarkup(final MarkupContainer container,
			final MarkupResourceStream markupResourceStream)
	{
		try
		{
			final MarkupFragment markup = newMarkupLoader().loadMarkup(container,
					markupResourceStream);

			// add the markup to the cache
			if (markupResourceStream.getCacheKey() != null)
			{
				markupCache.put(markupResourceStream.getCacheKey(), markup);
			}

			// trigger all listeners registered on the markup just loaded
			afterLoadListeners.notifyListeners(markupResourceStream);

			return markup;
		}
		catch (final ResourceStreamNotFoundException e)
		{
			log.error("Unable to find markup from " + markupResourceStream, e);
		}
		catch (final IOException e)
		{
			log.error("Unable to read markup from " + markupResourceStream, e);
		}

		// In case of an error, remove the cache entry
		synchronized (markupCache)
		{
			markupCache.remove(markupResourceStream.getCacheKey());
			afterLoadListeners.remove(markupResourceStream);
		}

		return MarkupFragment.NO_MARKUP_FRAGMENT;
	}

