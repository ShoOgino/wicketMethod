	/**
	 * Create a new markup filter chain and initialize with all default filters
	 * required.
	 */
	private final void initializeMarkupFilters()
	{
		// Chain together all the different markup filters and configure them
		this.markupFilterChain = xmlParser;
		xmlParser.setPriority(0);

		registerMarkupFilter(new WicketTagIdentifier(this.markup));
		registerMarkupFilter(new TagTypeHandler());
		registerMarkupFilter(new HtmlHandler());
		registerMarkupFilter(new WicketRemoveTagHandler());
		registerMarkupFilter(new WicketLinkTagHandler());
		registerMarkupFilter(new WicketNamespaceHandler(this.markup));

		// Provided the wicket component requesting the markup is known ...
		final MarkupResourceStream resource = this.markup.getResource();
		if (resource != null)
		{
			final ContainerInfo containerInfo = resource.getContainerInfo();
			if (containerInfo != null)
			{
				registerMarkupFilter(new WicketMessageTagHandler());
				registerMarkupFilter(new BodyOnLoadHandler());

				// Pages require additional handlers
				if (Page.class.isAssignableFrom(containerInfo.getContainerClass()))
				{
					registerMarkupFilter(new HtmlHeaderSectionHandler(this));
				}

				registerMarkupFilter(new HeadForceTagIdHandler(containerInfo.getContainerClass()));
			}
		}
		
		registerMarkupFilter(new PrependContextPathHandler());
	}

