	/**
	 * Try to resolve the tag, then create a component, add it to the container
	 * and render it.
	 * 
	 * @see wicket.markup.resolver.IComponentResolver#resolve(MarkupContainer,
	 *      MarkupStream, ComponentTag)
	 * 
	 * @param container
	 *            The container parsing its markup
	 * @param markupStream
	 *            The current markupStream
	 * @param tag
	 *            The current component tag while parsing the markup
	 * @return true, if componentId was handle by the resolver. False, otherwise
	 */
	public boolean resolve(final MarkupContainer container, final MarkupStream markupStream,
			final ComponentTag tag)
	{
		// It must be <wicket:link>
		if (tag.isLinkTag())
		{
			final String id = Component.AUTO_COMPONENT_PREFIX + "_link_"
					+ container.getPage().getAutoIndex();
			final Component component = new WebMarkupContainer(container, id)
			{
				private static final long serialVersionUID = 1L;

				/**
				 * @see wicket.MarkupContainer#isTransparentResolver()
				 */
				@Override
				public boolean isTransparentResolver()
				{
					return true;
				}
			};

			component.render(markupStream);

			// Yes, we handled the tag
			return true;
		}

		// We were not able to handle the tag
		return false;
	}

