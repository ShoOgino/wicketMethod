	/**
	 * Populates the tree item. It creates all necesary components for the tree
	 * to work properly.
	 */
	@Override
	protected void populateTreeItem(WebMarkupContainer<TreeNode> item, int level)
	{
		final TreeNode node = item.getModelObject();

		newIndentation(item, "indent", item.getModelObject(), level);

		newJunctionLink(item, "link", "image", node);

		MarkupContainer nodeLink = newNodeLink(item, "nodeLink", node);

		newNodeIcon(nodeLink, "icon", node);

		new Label(nodeLink, "label", new Model<String>()
		{
			private static final long serialVersionUID = 1L;

			@Override
			public String getObject()
			{
				return renderNode(node);
			}
		});

		// do distinguish between selected and unselected rows we add an
		// behavior
		// that modifies row css class.
		item.add(new AbstractBehavior()
		{
			private static final long serialVersionUID = 1L;

			@Override
			public void onComponentTag(Component component, ComponentTag tag)
			{
				super.onComponentTag(component, tag);
				if (getTreeState().isNodeSelected(node))
				{
					tag.put("class", "row-selected");
				}
				else
				{
					tag.put("class", "row");
				}
			}
		});
	}

