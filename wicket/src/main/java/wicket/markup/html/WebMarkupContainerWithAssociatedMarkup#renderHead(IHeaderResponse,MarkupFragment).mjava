	/**
	 * 
	 * @param response
	 * @param fragment
	 */
	private void renderHead(final IHeaderResponse response, final MarkupFragment fragment)
	{
		// Get the header container <head> from the page
		final Page page = getPage();
		final HeaderContainer headerContainer = (HeaderContainer)page
				.get(HtmlHeaderSectionHandler.HEADER_ID);

		// Search for wicket:head in the associated markup, create container for
		// these tags and copy the body onload and onunload attributes
		fragment.visitChildren(MarkupFragment.class, new MarkupFragment.IVisitor()
		{
			private boolean foundBody = false;

			/**
			 * @see wicket.markup.MarkupFragment.IVisitor#visit(wicket.markup.MarkupElement,
			 *      wicket.markup.MarkupFragment)
			 */
			public Object visit(final MarkupElement element, final MarkupFragment parent)
			{
				final MarkupFragment frag = (MarkupFragment)element;
				final ComponentTag tag = frag.getTag();

				// if <wicket:head>, than
				if (tag.isWicketHeadTag())
				{
					if (foundBody == true)
					{
						throwMarkupException(fragment, tag,
								"<wicket:head> must be before the <body>, <wicket:panel> ... tag");
					}

					// Create a new wicket header container
					WicketHeadContainer header = newWicketHeaderContainer(frag);

					// Determine if the wicket:head markup should be printed or
					// not.
					header.setEnable(headerContainer.okToRender(header));
					header.render(new MarkupStream(frag));

					return CONTINUE_TRAVERSAL_BUT_DONT_GO_DEEPER;
				}
				else if (tag.isBodyTag())
				{
					// Found <body>. "Copy" the attributes to the page's body
					// tag, if the container loading the markup is not a Page
					foundBody = true;
					if (page instanceof WebPage)
					{
						addBodyModifier(BodyContainer.ONLOAD, tag);
						addBodyModifier(BodyContainer.ONUNLOAD, tag);
					}
				}
				else if (tag.isMajorWicketComponentTag())
				{
					// Allow for improved error messages
					foundBody = true;
				}

				return CONTINUE_TRAVERSAL;
			}
		});
	}

