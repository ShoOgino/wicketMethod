	/**
	 * @see wicket.AttributeModifier#newValue(java.lang.String,
	 *      java.lang.String)
	 */
	@Override
	protected String newValue(final String currentValue, final String replacementValue)
	{
		// If no behavior owner has been provided, than behave as if this
		// were a standard normal attribute modifier
		if (this.componentReference != null)
		{
			// Get the owner of the attribute modifier (e.g. the Panel, not the
			// Body)
			final Component<?> behaviorOwner = componentReference.get();

			// If case the components memory has been GCed already, than disable
			// the attribute modifier and return the attribute value unchanged.
			if (behaviorOwner == null)
			{
				setEnabled(false);
				return currentValue;
			}

			// It must have a Page, otherwise one of its parents has been
			// removed. No Page, than disable the attribute modifier and
			// return the attribute value unchanged.

			// Component.findPage() is 'protected'. But this works as well.
			if (behaviorOwner.findParent(Page.class) == null)
			{
				setEnabled(false);
				return currentValue;
			}

			// And the "Panel" must be visible. Wicket core tests only
			// that the body (the component the attribute modifier is
			// attached to) is visible.
			if (behaviorOwner.isVisibleInHierarchy() == false)
			{
				return currentValue;
			}
		}
		if (currentValue != null && !currentValue.trim().endsWith(";"))
		{
			return currentValue + ";" + replacementValue;
		}
		return (currentValue == null ? replacementValue : currentValue + replacementValue);
	}

