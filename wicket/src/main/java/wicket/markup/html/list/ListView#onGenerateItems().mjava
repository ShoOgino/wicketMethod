	/**
	 * Generates items of the listview. Subclasses can override to introduce a
	 * different way items can be generated.
	 * 
	 * Newly created items should be populated by
	 * {@link ListView#populateItem(ListItem)} method.
	 * 
	 * When this item is invoked the old listitems are still present in the
	 * listview in order to support item recycling, dont forget to call
	 * {@link #removeAll()} if you are going to generate a completely new set of
	 * items.
	 */
	protected void onGenerateItems()
	{
		// Get number of items to be displayed
		final int size = getViewSize();
		if (getReuseItems())
		{
			// Remove all ListItems no longer required
			final int maxIndex = firstIndex + size;
			for (final Iterator iterator = iterator(); iterator.hasNext();)
			{
				// Get next child component
				final ListItem child = (ListItem)iterator.next();
				if (child != null)
				{
					final int index = child.getIndex();
					if (index < firstIndex || index >= maxIndex)
					{
						iterator.remove();
					}
				}
			}
		}
		else
		{
			// Automatically rebuild all ListItems before rendering the
			// list view
			removeAll();
		}

		// Loop through the markup in this container for each item
		for (int i = 0; i < size; i++)
		{
			// Get index
			final int index = firstIndex + i;

			// If this component does not already exist, populate it
			ListItem<T> item = (ListItem<T>)get(Integer.toString(index));
			if (item == null)
			{
				// Create item for index
				item = newItem(index);

				// Populate the list item
				onBeginPopulateItem(item);
				populateItem(item);
				item.attach();
			}
		}
	}

