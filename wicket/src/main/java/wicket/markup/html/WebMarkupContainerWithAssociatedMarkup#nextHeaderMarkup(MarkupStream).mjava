	/**
	 * 
	 * @param associatedMarkupStream
	 * @return xxx
	 */
	private final int nextHeaderMarkup(final MarkupStream associatedMarkupStream)
	{
		// No associated markup => no header section
		if (associatedMarkupStream == null)
		{
			return -1;
		}

		// Scan the markup for <wicket:head>.
		MarkupElement elem = associatedMarkupStream.get();
		while (elem != null)
		{
			if (elem instanceof ComponentTag)
			{
				ComponentTag tag = (ComponentTag)elem;
				if (tag.isOpen() && tag.isWicketHeadTag())
				{
					if (this.noMoreWicketHeadTagsAllowed == true)
					{
						throw new MarkupException(
								"<wicket:head> tags are only allowed before <body>, </head>, <wicket:panel> etc. tag. Component: "
										+ this.toString());
					}
					return associatedMarkupStream.getCurrentIndex();
				}
				else if (this.noMoreWicketHeadTagsAllowed == false)
				{
					// wicket:head must be before border, panel or extend
					if (tag.isOpen()
							&& (tag.isPanelTag() || tag.isBorderTag() || tag.isExtendTag()))
					{
						this.noMoreWicketHeadTagsAllowed = true;
					}
					// wicket:head must be before </head>
					else if (tag.isClose() && tag.isHeadTag())
					{
						this.noMoreWicketHeadTagsAllowed = true;
					}
					// wicket:head must be before <body>
					else if (tag.isOpen() && tag.isBodyTag())
					{
						this.noMoreWicketHeadTagsAllowed = true;
					}
				}
			}
			elem = associatedMarkupStream.next();
		}

		// No (more) wicket:head found
		return -1;
	}

