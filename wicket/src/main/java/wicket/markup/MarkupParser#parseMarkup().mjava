	/**
	 * Scans the given markup and extracts balancing tags.
	 * 
	 * @return The markup associated with the resource
	 */
	private MarkupFragment parseMarkup()
	{
		final Stack<MarkupFragment> fragmentStack = new Stack<MarkupFragment>();
		this.currentFragment = this.rootFragment;

		try
		{
			// allways remember the latest index (size)
			int size = currentFragment.size();

			// Loop through tags
			for (ComponentTag tag; null != (tag = (ComponentTag)this.markupFilterChain.nextTag());)
			{
				boolean add = (tag.getId() != null);
				if (!add && tag.getXmlTag().isClose())
				{
					add = ((tag.getOpenTag() != null) && (tag.getOpenTag().getId() != null));
				}

				// Add tag to list?
				if (add || tag.isModified())
				{
					final CharSequence text = this.xmlParser.getInputFromPositionMarker(tag
							.getPos());

					// Add text from last position to tag position
					if (text.length() > 0)
					{
						String rawMarkup = text.toString();

						if (this.stripComments)
						{
							rawMarkup = removeComment(rawMarkup);
						}

						if (this.compressWhitespace)
						{
							rawMarkup = compressWhitespace(rawMarkup);
						}

						// Make sure you add it at the correct location.
						// IMarkupFilters might have added elements as well.
						currentFragment.addMarkupElement(size, new RawMarkup(rawMarkup));
					}

					if (add)
					{
						// Add to list unless preview component tag remover
						// flagged as removed
						if (!WicketRemoveTagHandler.IGNORE.equals(tag.getId()))
						{
							if (tag.isOpen() || tag.isOpenClose())
							{
								fragmentStack.push(currentFragment);
								MarkupFragment newFragment = new MarkupFragment(this.markup);
								currentFragment.addMarkupElement(newFragment);
								currentFragment = newFragment;
							}

							currentFragment.addMarkupElement(tag);
							if (tag.isClose() || tag.isOpenClose() || tag.hasNoCloseTag())
							{
								currentFragment = fragmentStack.pop();
							}
						}
					}
					else if (tag.isModified())
					{
						currentFragment.addMarkupElement(new RawMarkup(tag.toCharSequence()));
					}

					this.xmlParser.setPositionMarker();
				}

				// allways remember the latest index (size)
				size = currentFragment.size();
			}
		}
		catch (final ParseException ex)
		{
			// Add remaining input string
			final CharSequence text = this.xmlParser.getInputFromPositionMarker(-1);
			if (text.length() > 0)
			{
				currentFragment.addMarkupElement(new RawMarkup(text));
			}

			this.markup.setEncoding(this.xmlParser.getEncoding());
			this.markup.setXmlDeclaration(this.xmlParser.getXmlDeclaration());

			// Create a MarkupStream and position it at the error location
			MarkupElement element = currentFragment.get(currentFragment.size() - 1);
			MarkupStream markupStream = new MarkupStream(this.rootFragment);
			while (markupStream.hasMore())
			{
				if (markupStream.next() == element)
				{
					break;
				}
			}

			throw new MarkupException(markupStream, ex.getMessage(), ex);
		}

		// Add tail?
		final CharSequence text = this.xmlParser.getInputFromPositionMarker(-1);
		if (text.length() > 0)
		{
			String rawMarkup = text.toString();

			if (this.stripComments)
			{
				rawMarkup = removeComment(rawMarkup);
			}

			if (this.compressWhitespace)
			{
				rawMarkup = compressWhitespace(rawMarkup);
			}

			currentFragment.addMarkupElement(new RawMarkup(rawMarkup));
		}

		// Do we have unclosed tags in the markup? Re-balance the markup tree
		if (fragmentStack.size() > 0)
		{
			currentFragment.handleUnclosedTags();
			currentFragment = this.rootFragment;
		}

		// remove "empty" root fragment
		if ((currentFragment.size() == 1) && (currentFragment.get(0) instanceof MarkupFragment))
		{
			currentFragment = (MarkupFragment)currentFragment.get(0);
		}
		
		return currentFragment;
	}

