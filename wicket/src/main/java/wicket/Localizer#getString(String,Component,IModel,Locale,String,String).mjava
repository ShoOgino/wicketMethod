	/**
	 * Get the localized string using all of the supplied parameters. This
	 * method is left public to allow developers full control over string
	 * resource loading. However, it is recommended that one of the other
	 * convenience methods in the class are used as they handle all of the work
	 * related to obtaining the current user locale and style information.
	 * 
	 * @param key
	 *            The key to obtain the resource for
	 * @param component
	 *            The component to get the resource for (optional)
	 * @param model
	 *            The model to use for substitutions in the strings (optional)
	 * @param locale
	 *            The locale to get the resource for (optional)
	 * @param style
	 *            The style to get the resource for (optional) (see
	 *            {@link wicket.Session})
	 * @param defaultValue
	 *            The default value (optional)
	 * @return The string resource
	 * @throws MissingResourceException
	 *             If resource not found and configuration dictates that
	 *             exception should be thrown
	 */
	public String getString(final String key, final Component component, final IModel model,
			Locale locale, String style, final String defaultValue) throws MissingResourceException
	{
		final List searchStack;
		final String path;
		if (component != null)
		{
			// The reason why we need to create that stack is because we need to
			// walk it downwards starting with Page down to the Component
			searchStack = getComponentStack(component);
			path = Strings.replaceAll(component.getPageRelativePath(), ":", ".").toString();

			if (locale == null)
			{
				locale = component.getLocale();
			}

			if (style == null)
			{
				style = component.getStyle();
			}
		}
		else
		{
			searchStack = null;
			path = null;

			Session session = Session.get();
			if (locale == null)
			{
				locale = session.getLocale();
			}

			if (style == null)
			{
				style = session.getStyle();
			}
		}

		// Iterate over all registered string resource loaders until the
		// property has been found
		String string = visitResourceLoaders(key, path, searchStack, locale, style);

		// If a property value has been found, than replace the placeholder
		// and we are done
		if (string != null)
		{
			return substitutePropertyExpressions(component, string, model);
		}

		// Resource not found, so handle missing resources based on application
		// configuration
		final IResourceSettings resourceSettings = Application.get().getResourceSettings();
		if (resourceSettings.getUseDefaultOnMissingResource() && (defaultValue != null))
		{
			return defaultValue;
		}

		if (resourceSettings.getThrowExceptionOnMissingResource())
		{
			AppendingStringBuffer message = new AppendingStringBuffer("Unable to find resource: "
					+ key);
			if (component != null)
			{
				message.append(" for component: ");
				message.append(component.getPageRelativePath());
				message.append(" [class=").append(component.getClass().getName()).append("]");
			}
			throw new MissingResourceException(message.toString(), (component != null ? component
					.getClass().getName() : ""), key);
		}
		else
		{
			return "[Warning: String resource for '" + key + "' not found]";
		}
	}

