	/**
	 * Compares the specified Object with this List for equality. Returns true
	 * if and only if the specified Object is also a List, both Lists have the
	 * same size, and all corresponding pairs of elements in the two Lists are
	 * <em>equal</em>. (Two elements <code>e1</code> and <code>e2</code>
	 * are <em>equal</em> if
	 * <code>(e1==null ? e2==null : e1.equals(e2))</code>.) In other words,
	 * two Lists are defined to be equal if they contain the same elements in
	 * the same order.
	 * <p>
	 * This implementation first checks if the specified object is this List. If
	 * so, it returns true; if not, it checks if the specified object is a List.
	 * If not, it returns false; if so, it iterates over both lists, comparing
	 * corresponding pairs of elements. If any comparison returns false, this
	 * method returns false. If either Iterator runs out of elements before
	 * before the other it returns false (as the Lists are of unequal length);
	 * otherwise it returns true when the iterations complete.
	 * 
	 * @param o
	 *            the Object to be compared for equality with this List.
	 * @return true if the specified Object is equal to this List.
	 */
	public boolean equals(Object o)
	{
		if (o == this)
			return true;
		if (!(o instanceof List))
			return false;

		List l2 = (List)(o);
		if (size() != l2.size())
			return false;

		ListIterator e1 = listIterator();
		ListIterator e2 = l2.listIterator();
		while (e1.hasNext())
		{
			Object o1 = e1.next();
			Object o2 = e2.next();
			if (!(o1 == null ? o2 == null : o1.equals(o2)))
				return false;
		}
		return true;
	}

