	/**
	 * Locate a file based on its path (potentially with a style), a locale and
	 * an extension. See class comments for more details on how the locale is
	 * used and the order applied to find the resource.
	 * 
	 * @param clazz
	 *            The class requesting the resource
	 * @param path
	 *            Full path to resource, possibly including style, but not
	 *            locale or extension
	 * @param locale
	 *            The locale to apply
	 * @param extension
	 *            The resource's extension
	 * @return The resource, or null if not found.
	 */
	private IResourceStream locate(final Class clazz, final String path, final Locale locale,
			final String extension)
	{
		// 1. Apply Locale default toString() implementation. See Locale.
		{
			final IResourceStream resource = locate(clazz, path + '_' + locale.toString()
					+ extension);
			if (resource != null)
			{
				resource.setLocale(locale);
				return resource;
			}
		}

		// Get language and country, either of which may be the empty string
		final String language = locale.getLanguage();
		final String country = locale.getCountry();

		// 2. If country and language are available
		if (!Strings.isEmpty(language) && !Strings.isEmpty(country))
		{
			final IResourceStream resource = locate(clazz, path + '_' + language + '_' + country
					+ extension);
			if (resource != null)
			{
				resource.setLocale(new Locale(language, country));
				return resource;
			}
		}

		// 3. If language is available
		if (!Strings.isEmpty(language))
		{
			final IResourceStream resource = locate(clazz, path + '_' + language + extension);
			if (resource != null)
			{
				resource.setLocale(new Locale(language));
				return resource;
			}
		}

		// Not found
		return null;
	}

