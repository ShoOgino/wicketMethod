	/**
	 * Inserts the StringBuffer into this AppendingStringBuffer.
	 * <p>
	 * The characters of the <code>StringBuffer</code> argument are inserted, in
	 * order, into this AppendingStringBuffer at the indicated offset, moving up any
	 * characters originally above that position and increasing the length of
	 * this AppendingStringBuffer by the length of the argument. If <code>str</code>
	 * is <code>null</code>, then the four characters <code>"null"</code>
	 * are inserted into this string buffer.
	 * <p>
	 * The character at index <i>k</i> in the new character sequence is equal
	 * to:
	 * <ul>
	 * <li>the character at index <i>k</i> in the old character sequence, if
	 * <i>k</i> is less than <code>offset</code>
	 * <li>the character at index <i>k</i><code>-offset</code> in the
	 * argument <code>str</code>, if <i>k</i> is not less than
	 * <code>offset</code> but is less than <code>offset+str.length()</code>
	 * <li>the character at index <i>k</i><code>-str.length()</code> in the
	 * old character sequence, if <i>k</i> is not less than
	 * <code>offset+str.length()</code>
	 * </ul>
	 * <p>
	 * The offset argument must be greater than or equal to <code>0</code>,
	 * and less than or equal to the length of this AppendingStringBuffer.
	 * 
	 * @param offset
	 *            the offset.
	 * @param str
	 *            a StringBuffer.
	 * @return a reference to this <code>AppendingStringBuffer</code> object.
	 * @exception StringIndexOutOfBoundsException
	 *                if the offset is invalid.
	 * @see java.lang.StringBuffer#length()
	 */
	public AppendingStringBuffer insert(int offset, StringBuffer str)
	{
		if ((offset < 0) || (offset > count))
		{
			throw new StringIndexOutOfBoundsException();
		}

		if (str == null)
		{
			return append("null");
		}
		int len = str.length();
		int newcount = count + len;
		if (newcount > value.length)
		{
			expandCapacity(newcount);
		}
		System.arraycopy(value, offset, value, offset + len, count - offset);
		str.getChars(0, len, value, offset);
		count = newcount;
		return this;
	}

