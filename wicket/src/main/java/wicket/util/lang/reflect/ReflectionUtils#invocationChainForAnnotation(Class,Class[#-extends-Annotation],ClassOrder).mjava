	/**
	 * Returns a list of methods that are annotated with the specified
	 * annotation and with multiple representatives of the same override chain
	 * filtered
	 * 
	 * @param clazz
	 * @param annot
	 * @param order
	 * @return list of methods
	 */
	public static List<Method> invocationChainForAnnotation(Class clazz,
			Class<? extends Annotation> annot, ClassOrder order)
	{
		int index = 0;
		switch (order)
		{
			case SUB_TO_SUPER :
				index = 1;
				break;
			case SUPER_TO_SUB :
				index = 2;
				break;
		}

		ClassReflectionCache classCache = classToMethods[index].get(clazz);
		if (classCache == null)
		{
			classCache = new ClassReflectionCache(clazz, order, IMethodFilter.IGNORE_OVERRIDES);
			classToMethods[index].put(clazz, classCache);
		}
		return classCache.methodsForAnnot(annot);

	}

