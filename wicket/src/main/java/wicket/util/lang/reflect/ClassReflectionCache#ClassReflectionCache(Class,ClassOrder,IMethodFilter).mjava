	/**
	 * Construct.
	 * 
	 * @param clazz
	 *            class whose reflection information is cached
	 * @param order
	 *            order in which fields and methods are sorted
	 * @param methodFilter
	 *            filter used to determine whether a method should be stored in
	 *            the cache
	 */
	public ClassReflectionCache(Class clazz, ClassOrder order, IMethodFilter methodFilter)
	{
		// build the cache

		Map<Class<? extends Annotation>, ArrayList<Method>> map;
		map = new HashMap<Class<? extends Annotation>, ArrayList<Method>>();

		ClassHieararchyIterator classes = new ClassHieararchyIterator(clazz, order);
		while (classes.hasNext())
		{
			Method[] methods = classes.next().getDeclaredMethods();
			for (Method method : methods)
			{
				Annotation[] annots = method.getDeclaredAnnotations();
				for (Annotation annot : annots)
				{
					ArrayList<Method> annotatedMethods = map.get(annot.annotationType());
					if (annotatedMethods == null)
					{
						annotatedMethods = new ArrayList<Method>();
						map.put(annot.annotationType(), annotatedMethods);
					}
					if (methodFilter.accept(method, annotatedMethods))
					{
						annotatedMethods.add(method);
					}

				}
			}
		}

		annotToMethods = new HashMap<Class<? extends Annotation>, List<Method>>();
		for (Entry<Class<? extends Annotation>, ArrayList<Method>> mapping : map.entrySet())
		{
			ArrayList<Method> methods = mapping.getValue();
			methods.trimToSize();
			annotToMethods.put(mapping.getKey(), Collections.unmodifiableList(methods));
		}
	}

