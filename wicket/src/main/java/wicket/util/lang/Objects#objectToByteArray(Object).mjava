	/**
	 * Serializes an object into a byte array.
	 * 
	 * @param object
	 *            The object
	 * @return The serialized object
	 */
	public static byte[] objectToByteArray(final Object object)
	{
		try
		{
			final ByteArrayOutputStream out = new ByteArrayOutputStream();
			try
			{
				new ObjectOutputStream(out).writeObject(object);

				// let's keep this commented in SVN until we're absolutely sure
				// it works without any flaws
				// new WicketObjectOutputStream(out).writeObject(object);
			}
			finally
			{
				out.close();
			}
			return out.toByteArray();
		}
		catch (IOException e)
		{
			if (SerializableChecker.isAvailable())
			{
				// trigger serialization again, but this time gather some more
				// info
				try
				{
					new SerializableChecker(object).check();
				}
				catch (Exception e1)
				{
					// the message contains a pointer to where in the object
					// hierarchy to trouble maker is
					log.error("Error serializing object " + object.getClass() + " [object="
							+ object + "]", e1);
				}
			}
			else
			{
				// the message contains a pointer to where in the object
				// hierarchy to trouble maker is
				log.error("Error serializing object " + object.getClass() + " [object=" + object
						+ "]", e);
			}
		}
		return null;
	}

