	/**
	 * 
	 * @param response
	 * @param markupId
	 *            id of client-side dom element
	 * @param component
	 *            component to render
	 */
	private void respondComponent(final Response response, final String markupId,
			final Component component)
	{
		if (component.getRenderBodyOnly() == true)
		{
			throw new IllegalStateException(
					"Ajax render cannot be called on component that has setRenderBodyOnly enabled. Component: "
							+ component.toString());
		}

		component.setOutputMarkupId(true);

		// Initialize temporary variables
		final Page page = component.getPage();
		if (page == null)
		{
			throw new IllegalStateException(
					"Ajax request attempted on a component that is not associated with a Page");
		}

		page.startComponentRender(component);

		// render any associated headers of the component
		respondHeaderContribution(response, component);

		Response componentResponse = new StringResponse();
		try
		{
			RequestCycle.get().setResponse(componentResponse);

			component.renderComponent();
		}
		finally
		{
			// Restore original response
			RequestCycle.get().setResponse(response);
		}

		page.endComponentRender(component);

		response.write("<component id=\"");
		response.write(markupId);
		response.write("\" ");
		String data = componentResponse.toString();
		if (needsEncoding(componentResponse.toString()))
		{
			response.write(" encoding=\"");
			response.write(getEncodingName());
			response.write("\" ");
			data = encode(data);
		}
		response.write("><![CDATA[");
		response.write(data);
		response.write("]]></component>");
	}

