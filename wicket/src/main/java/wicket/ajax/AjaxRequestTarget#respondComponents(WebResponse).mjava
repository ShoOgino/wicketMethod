	/**
	 * Processes components added to the target. This involves attaching
	 * components, rendering markup into a client side xml envelope, and
	 * detaching them
	 * 
	 * @param response
	 */
	private void respondComponents(WebResponse response)
	{
		Iterator it;

		try
		{
			// process feedback
			it = markupIdToComponent.entrySet().iterator();
			while (it.hasNext())
			{
				final Component component = (Component)((Entry)it.next()).getValue();
				if (component instanceof MarkupContainer)
				{
					MarkupContainer container = (MarkupContainer)component;

					// collect feedback
					container.visitChildren(IFeedback.class, new IVisitor()
					{
						public Object component(Component component)
						{
							((IFeedback)component).updateFeedback();
							return IVisitor.CONTINUE_TRAVERSAL;
						}
					});
				}

				if (component instanceof IFeedback)
				{
					((IFeedback)component).updateFeedback();
				}
			}

			// attach components
			it = markupIdToComponent.entrySet().iterator();
			while (it.hasNext())
			{
				final Component component = (Component)((Entry)it.next()).getValue();
				component.internalAttach();
			}

			// process component markup
			it = markupIdToComponent.entrySet().iterator();
			while (it.hasNext())
			{
				final Map.Entry entry = (Entry)it.next();
				final Component component = (Component)entry.getValue();
				final String markupId = (String)entry.getKey();

				respondComponent(response, markupId, component);
			}

		}
		finally
		{
			// detach
			it = markupIdToComponent.entrySet().iterator();
			if (it.hasNext())
			{
				final Component component = (Component)((Entry)it.next()).getValue();
				component.getPage().internalDetach();
			}
		}
	}

