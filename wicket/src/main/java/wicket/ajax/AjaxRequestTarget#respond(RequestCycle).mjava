	/**
	 * @see wicket.IRequestTarget#respond(wicket.RequestCycle)
	 */
	public final void respond(final RequestCycle requestCycle)
	{
		try
		{
			final Application app = Application.get();

			// Determine encoding
			final String encoding = app.getRequestCycleSettings().getResponseRequestEncoding();

			// Set content type based on markup type for page
			final WebResponse response = (WebResponse)requestCycle.getResponse();
			response.setCharacterEncoding(encoding);
			response.setContentType("text/xml; charset=" + encoding);

			// Make sure it is not cached by a client
			response.setHeader("Expires", "Mon, 26 Jul 1997 05:00:00 GMT");
			response.setHeader("Cache-Control", "no-cache, must-revalidate");
			response.setHeader("Pragma", "no-cache");

			response.write("<?xml version=\"1.0\" encoding=\"");
			response.write(encoding);
			response.write("\"?>");
			response.write("<ajax-response>");

			// invoke onbeforerespond event on listeners
			if (listeners != null)
			{
				final Map components = Collections.unmodifiableMap(markupIdToComponent);

				Iterator it = listeners.iterator();
				while (it.hasNext())
				{
					((IListener)it.next()).onBeforeRespond(components, this);
				}
			}

			// normal behavior
			Iterator it = prependJavascripts.iterator();
			while (it.hasNext())
			{
				String js = (String)it.next();
				respondInvocation(response, js);
			}

			// process added components
			respondComponents(response);

			it = appendJavascripts.iterator();
			while (it.hasNext())
			{
				String js = (String)it.next();
				respondInvocation(response, js);
			}

			// invoke onafterresponse event on listeners
			if (listeners != null)
			{
				final Map components = Collections.unmodifiableMap(markupIdToComponent);

				// create response that will be used by listeners to append
				// javascript
				final IJavascriptResponse jsresponse = new IJavascriptResponse()
				{

					public void addJavascript(String script)
					{
						respondInvocation(response, script);
					}

				};

				it = listeners.iterator();
				while (it.hasNext())
				{
					((IListener)it.next()).onAfterRespond(components, jsresponse);
				}
			}

			response.write("</ajax-response>");
		}
		catch (RuntimeException ex)
		{
			// log the error but output nothing in the response, parse
			// failure
			// of response will cause any javascript failureHandler to be
			// invoked
			LOG.error("Error while responding to an AJAX request: " + toString(), ex);
		}
	}

