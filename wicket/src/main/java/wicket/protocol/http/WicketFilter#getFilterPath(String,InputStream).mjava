	private String getFilterPath(String filterName, InputStream is) throws ServletException
	{
		/*
		 * Filter mappings look like this:
		 * 
		 * <filter-mapping> <filter-name>WicketFilter</filter-name>
		 * <url-pattern>/*</url-pattern> <...> <filter-mapping>
		 */
		try
		{
			ArrayList urlPatterns = new ArrayList();
			Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(is);
			is.close();
			NodeList filterMappings = doc.getElementsByTagName("filter-mapping");
			for (int i = 0; i < filterMappings.getLength(); i++)
			{
				Node filterMapping = filterMappings.item(i);
				NodeList mappingElements = filterMapping.getChildNodes();

				// We might have filter-name and url-pattern in the
				// wrong order, even though it's a DTD-violation -
				// many containers don't use strict parsing, so we
				// have to deal with this.
				String urlPattern = null;
				boolean add = false;
				for (int j = 0; j < mappingElements.getLength(); j++)
				{
					Node mappingElement = mappingElements.item(j);
					if (mappingElement.getNodeType() != Node.ELEMENT_NODE)
					{
						continue;
					}
					if (mappingElement.getNodeName().equals("filter-name")
							&& mappingElement.getFirstChild().getNodeValue().equals(filterName))
					{
						add = true;
					}
					if (mappingElement.getNodeName().equals("url-pattern"))
					{
						urlPattern = mappingElement.getFirstChild().getNodeValue();
					}
				}
				if (add)
				{
					add = false;
					urlPatterns.add(urlPattern);
				}
			}
			// By the time we get here, we have a list of urlPatterns we match
			// this filter against.
			// In all likelihood, we will only have one. If we have none, we
			// have an error.
			// If we have more than one, we pick the first one to use for any
			// 302 redirects that
			// require absolute URLs.
			if (urlPatterns.size() == 0)
			{
				throw new ServletException(
						"Error initialising WicketFilter - you have no filter-mapping element with a url-pattern that uses filter: "
								+ filterName);
			}
			String urlPattern = (String)urlPatterns.get(0);

			// Check for leading '/' and trailing '*'.
			if (!urlPattern.startsWith("/") || !urlPattern.endsWith("*"))
			{
				throw new ServletException(
						"Filter mappings for Wicket filter must start with '/' and end with '*'.");
			}

			// Strip trailing '*' and leading '/'.
			return urlPattern.substring(1, urlPattern.length() - 1);
		}
		catch (Exception e)
		{
			throw new ServletException("Error finding filter " + filterName + " in web.xml", e);
		}
	}

