	/**
	 * Create the mock http application that can be used for testing.
	 * 
	 * @param path
	 *            The absolute path on disk to the web application contents
	 *            (e.g. war root) - may be null
	 * @see wicket.protocol.http.MockServletContext
	 */
	public MockWebApplication(final String path)
	{
		Application.set(this);
		
		context = new MockServletContext(this, path);

		setWicketServlet(new WicketServlet()
		{
			private static final long serialVersionUID = 1L;

			public ServletContext getServletContext()
			{
				return context;
			}

			/**
			 * @see javax.servlet.GenericServlet#getInitParameter(java.lang.String)
			 */
			public String getInitParameter(String name)
			{
				return null;
			}

			/**
			 * @see javax.servlet.GenericServlet#getServletName()
			 */
			public String getServletName()
			{
				return "WicketMockServlet";
			}
		});

		// Call internal init method of web application for default
		// initialisation
		this.internalInit();
		
		getDebugSettings().setSerializeSessionAttributes(false);
		
		// Call init method of web application
		this.init();
		
		// We initialize components here rather than in the constructor or
		// in the internal init, because in the init method class aliases
		// can be added, that would be used in installing resources in the
		// component.
		this.initializeComponents();

		servletSession = new MockHttpSession(context);
		servletRequest = new MockHttpServletRequest(this, servletSession, context);
		servletResponse = new MockHttpServletResponse();
		wicketRequest = newWebRequest(servletRequest);
		wicketSession = getSession(wicketRequest);
		requestCycleFactory = wicketSession.getRequestCycleFactory();

		// set the default context path
		getApplicationSettings().setContextPath(context.getServletContextName());

		getRequestCycleSettings().setRenderStrategy(IRequestCycleSettings.ONE_PASS_RENDER);
		getResourceSettings().setResourceFinder(new WebApplicationPath(context));
		getPageSettings().setAutomaticMultiWindowSupport(false);
		
		createRequestCycle();
	}

