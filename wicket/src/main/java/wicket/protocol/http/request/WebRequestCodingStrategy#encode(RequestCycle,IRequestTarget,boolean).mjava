	/**
	 * Encode the given request target. If a mount is found, that mounted url
	 * will be returned. Otherwise, one of the delegation methods will be
	 * called. In case you are using custom targets that are not part of the
	 * default target hierarchy, you need to override
	 * {@link #doEncode(RequestCycle, IRequestTarget)}, which will be called
	 * after the defaults have been tried. When that doesn't provide a url
	 * either, and exception will be thrown saying that encoding could not be
	 * done.
	 * 
	 * @see wicket.request.IRequestCodingStrategy#encode(wicket.RequestCycle,
	 *      wicket.IRequestTarget)
	 */
	public final CharSequence encode(final RequestCycle requestCycle,
			final IRequestTarget requestTarget, final boolean absolutePath)
	{
		// First check to see whether the target is mounted
		CharSequence url = pathForTarget(requestTarget);
		
		if (url != null) {
			// Do nothing - we've found the URL and it's mounted.
		}
		else if (requestTarget instanceof IBookmarkablePageRequestTarget)
		{
			url = encode(requestCycle, (IBookmarkablePageRequestTarget)requestTarget);
		}
		else if (requestTarget instanceof ISharedResourceRequestTarget)
		{
			url = encode(requestCycle, (ISharedResourceRequestTarget)requestTarget);
		}
		else if (requestTarget instanceof IListenerInterfaceRequestTarget)
		{
			url = encode(requestCycle, (IListenerInterfaceRequestTarget)requestTarget);
		}
		else if (requestTarget instanceof IPageRequestTarget)
		{
			url = encode(requestCycle, (IPageRequestTarget)requestTarget);
		}
		// fallthough for non-default request targets
		else
		{
			url = doEncode(requestCycle, requestTarget);
		}
		
		if (url != null)
		{
			if (url.length() > 0 && url.charAt(0) == '/')
			{
				url = url.subSequence(1, url.length());
			}

			if (absolutePath)
			{
				url = urlPrefix(requestCycle).toString() + url;
			}
			String relativeUrl = requestCycle.getRequest().getRelativeURL();
			String segments = "";
			for (int i = 0; i < relativeUrl.length(); i++)
			{
				if (relativeUrl.charAt(i) == '?')
				{
					break;
				}
				if (relativeUrl.charAt(i) == '/')
				{
					segments += "../";
				}
			}
			if (segments.length() > 0)
			{
				url = segments + url;
			}
			else if (url.length() > 0 && (url.charAt(0) == '?' || url.charAt(0) == ';'))
			{
				url = "./" + url;
			}
			url = requestCycle.getOriginalResponse().encodeURL(url);
			return url;
		}
		
		// Just return null intead of throwing an exception. So that it can be
		// handled better
		return null;
	}

