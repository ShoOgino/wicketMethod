		/**
		 * @param sessionId
		 * @param page
		 */
		private void savePage(String sessionId, Page page)
		{
			File sessionDir = new File(getWorkDir(), sessionId);
			sessionDir.mkdirs();
			File pageFile = getPageFile(page.getNumericId(), page.getCurrentVersionNumber(), page
					.getAjaxVersionNumber(), sessionDir);

			FileOutputStream fos = null;
			long t1 = System.currentTimeMillis();
			long t2 = 0;
			int length = 0;
			try
			{
				final ByteArrayOutputStream out = new ByteArrayOutputStream();
				try
				{
					new ObjectOutputStream(out).writeObject(page);
				}
				finally
				{
					out.close();
				}
				byte[] bytes = out.toByteArray();
				t2 = System.currentTimeMillis();
				fos = new FileOutputStream(pageFile);
				ByteBuffer bb = ByteBuffer.wrap(bytes);
				fos.getChannel().write(bb);
				length = bytes.length;
			}
			catch (Exception e)
			{
				// TODO as long as our extended info isn't accurate, at least
				// print the stack trace
				log.error(e.getMessage(), e);
				
				// TODO doesn't work yet.
				// trigger serialization again, but this time gather some more
				// info
//				try
//				{
//					Objects.checkSerializable(page);
//				}
//				catch (Exception e1)
//				{
//					log.error("Error saving page " + page.getClass() + "[" + page.getId() + ","
//							+ page.getCurrentVersionNumber() + "] for the sessionid " + sessionId
//							+ ": " + e1.getMessage(), e1);
//				}
			}
			finally
			{
				try
				{
					if (fos != null)
					{
						fos.close();
					}
				}
				catch (IOException ex)
				{
					// ignore
				}
			}
			if (log.isDebugEnabled())
			{
				long t3 = System.currentTimeMillis();
				log.debug("storing page " + page.getClass() + "[" + page.getNumericId() + ","
						+ page.getCurrentVersionNumber() + "] size: " + length + " for session "
						+ sessionId + " took " + (t2 - t1) + " miliseconds to serialize and "
						+ (t3 - t2) + " miliseconds to save");
			}
		}

