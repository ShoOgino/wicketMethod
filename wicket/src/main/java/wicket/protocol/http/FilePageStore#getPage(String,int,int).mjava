	/**
	 * @see wicket.protocol.http.SecondLevelCacheSessionStore.IPageStore#getPage(java.lang.String,
	 *      int, int)
	 */
	public Page getPage(String sessionId, int id, int versionNumber)
	{
		File sessionDir = new File(getWorkDir(), sessionId);
		if (sessionDir.exists())
		{
			File pageFile = getPageFile(id, versionNumber, sessionDir);
			if (pageFile.exists())
			{

				// TODO Deleting newer files was not a good idea, as pushing the
				// back button a few times and then pressing refresh, would
				// trigger this delete, while the forward button is still in
				// effect. We should try to come up with an alternative, where
				// we don't serialize and write to the same file all the time,
				// but are sure we do when we need to. This would probably
				// involve keeping meta data or do something smart.

				// int tmp = versionNumber;
				// File f;
				// while ((f = getPageFile(id, tmp++, sessionDir)).exists())
				// {
				// f.delete();
				// }

				FileInputStream fis = null;
				try
				{
					byte[] pageData = null;
					fis = new FileInputStream(pageFile);
					int length = (int)pageFile.length();
					ByteBuffer bb = ByteBuffer.allocate(length);
					fis.getChannel().read(bb);
					if (bb.hasArray())
					{
						pageData = bb.array();
					}
					else
					{
						pageData = new byte[length];
						bb.get(pageData);
					}

					Page page = (Page)Objects.byteArrayToObject(pageData);
					return page.getVersion(versionNumber);
				}
				catch (Exception e)
				{
					log.debug("Error loading page " + id + "," + versionNumber
							+ " for the sessionid " + sessionId + " from disk", e);
				}
				finally
				{
					try
					{
						if (fis != null)
						{
							fis.close();
						}
					}
					catch (IOException ex)
					{
						// ignore
					}
				}
			}
		}
		return null;
	}

