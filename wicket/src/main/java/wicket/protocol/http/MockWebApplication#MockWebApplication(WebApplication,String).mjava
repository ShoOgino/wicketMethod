	/**
	 * Create the mock http tester that can be used for testing.
	 * 
	 * @param application
	 *            The wicket application object
	 * @param path
	 *            The absolute path on disk to the web tester contents (e.g. war
	 *            root) - may be null
	 * @see wicket.protocol.http.MockServletContext
	 */
	public MockWebApplication(final WebApplication application, final String path)
	{
		this.application = application;

		context = newServletContext(path);
		filter = new WicketFilter()
		{
			@Override
			protected IWebApplicationFactory getApplicationFactory()
			{
				return new IWebApplicationFactory()
				{
					public WebApplication createApplication(WicketFilter filter)
					{
						return application;
					};
				};
			}
		};

		try
		{
			filter.init(new FilterConfig()
			{

				public ServletContext getServletContext()
				{
					return context;
				}

				public Enumeration getInitParameterNames()
				{
					return null;
				}

				public String getInitParameter(String name)
				{
					if (name.equals(WicketFilter.FILTER_PATH_PARAM))
					{
						return application.getName();
					}
					return null;
				}

				public String getFilterName()
				{
					return "WicketMockServlet";
				}
			});
		}
		catch (ServletException e)
		{
			throw new RuntimeException(e);
		}

		Application.set(this.application);

		this.servletSession = new MockHttpSession(context);
		this.servletRequest = new MockHttpServletRequest(this.application, servletSession, context);
		this.servletResponse = new MockHttpServletResponse();
		this.wicketRequest = this.application.newWebRequest(servletRequest);
		this.wicketSession = this.application.getSession(wicketRequest);
		this.requestCycleFactory = this.wicketSession.getRequestCycleFactory();

		// set the default context path
		this.application.getApplicationSettings().setContextPath(context.getServletContextName());

		this.application.getRequestCycleSettings()
				.setRenderStrategy(RenderStrategy.ONE_PASS_RENDER);
		this.application.getResourceSettings().setResourceFinder(new WebApplicationPath(context));
		this.application.getPageSettings().setAutomaticMultiWindowSupport(false);

		// Since the purpose of MockWebApplication is singlethreaded 
		// programmatic testing it doesn't make much sense to have a
		// modification watcher thread started to watch for changes in the
		// markup.
		// Disabling this also helps test suites with many test cases 
		// (problems has been noticed with >~300 test cases). The problem 
		// is that even if the wicket tester is GC'ed the modification 
		// watcher still runs, taking up file handles and memory, leading
		// to "Too many files opened" or a regular OutOfMemoryException
		this.application.getResourceSettings().setResourcePollFrequency(null);

		createRequestCycle();
	}

