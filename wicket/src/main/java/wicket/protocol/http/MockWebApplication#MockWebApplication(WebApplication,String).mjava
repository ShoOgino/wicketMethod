	/**
	 * Create the mock http tester that can be used for testing.
	 * 
	 * @param application
	 *            The wicket application object
	 * @param path
	 *            The absolute path on disk to the web tester contents (e.g. war
	 *            root) - may be null
	 * @see wicket.protocol.http.MockServletContext
	 */
	public MockWebApplication(final WebApplication application, final String path)
	{
		this.application = application;

		context = newServletContext(path);
		filter = new WicketFilter()
		{
			@Override
			protected IWebApplicationFactory getApplicationFactory()
			{
				return new IWebApplicationFactory()
				{
					public WebApplication createApplication(WicketFilter filter)
					{
						return application;
					};
				};
			}
		};

		try
		{
			filter.init(new FilterConfig()
			{

				public ServletContext getServletContext()
				{
					return context;
				}

				public Enumeration getInitParameterNames()
				{
					return null;
				}

				public String getInitParameter(String name)
				{
					if (name.equals(WicketFilter.FILTER_PATH_PARAM))
					{
						return application.getName();
					}
					return null;
				}

				public String getFilterName()
				{
					return "WicketMockServlet";
				}
			});
		}
		catch (ServletException e)
		{
			throw new RuntimeException(e);
		}

		Application.set(this.application);

		this.servletSession = new MockHttpSession(context);
		this.servletRequest = new MockHttpServletRequest(this.application, servletSession, context);
		this.servletResponse = new MockHttpServletResponse();
		this.wicketRequest = this.application.newWebRequest(servletRequest);
		this.wicketSession = this.application.getSession(wicketRequest);
		this.requestCycleFactory = this.wicketSession.getRequestCycleFactory();

		// -----------------------------------
		// Copied from WicketFilter

		// Call internal init method of web application for default
		// initialisation
		this.application.internalInit();

		// Call init method of web application
		this.application.init();

		// We initialize components here rather than in the constructor or
		// in the internal init, because in the init method class aliases
		// can be added, that would be used in installing resources in the
		// component.
		this.application.initializeComponents();

		// Give the application the option to log that it is started
		this.application.logStarted();
		// -----------------------------------

		// set the default context path
		this.application.getApplicationSettings().setContextPath(context.getServletContextName());

		this.application.getRequestCycleSettings()
				.setRenderStrategy(RenderStrategy.ONE_PASS_RENDER);
		this.application.getResourceSettings().setResourceFinder(new WebApplicationPath(context));
		this.application.getPageSettings().setAutomaticMultiWindowSupport(false);
		this.application.getResourceSettings().setResourcePollFrequency(null);

		this.application.getDebugSettings().setSerializeSessionAttributes(false);

		createRequestCycle();
	}

