	/**
	 * Gets the immuatable markup for this class.
	 * 
	 * @param throwException
	 *            If true, throw an exception, if markup could not be found
	 * @return A stream of MarkupElement elements
	 */
	public final MarkupFragment getAssociatedMarkup(final boolean throwException)
	{
		if (this.associatedMarkup == null)
		{
			try
			{
				this.associatedMarkup = getApplication().getMarkupCache().getMarkup(this,
						throwException);
			}
			catch (MarkupException ex)
			{
				// re-throw it. The exception contains already all the
				// information required.
				throw ex;
			}
			catch (WicketRuntimeException ex)
			{
				// throw exception since there is no associated markup
				throw new MarkupNotFoundException(
						exceptionMessage("Markup of type '"
								+ getMarkupType()
								+ "' for component '"
								+ getClass().getName()
								+ "' not found."
								+ " Enable debug messages for wicket.util.resource to get a list of all filenames tried"),
						ex);
			}

			onAssociatedMarkupLoaded(this.associatedMarkup);
		}

		return this.associatedMarkup;
	}

