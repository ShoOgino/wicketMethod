	/**
	 * Gets the markup fragment associated with the component. Except for Pages,
	 * Panels and Borders, it is assumed that the first markup element of the
	 * fragment is a tag.
	 * <p>
	 * If the markup fragment has been determined previously, the transient
	 * cache of the Component is returned. Else, the parent container will be
	 * asked to provide the markup for its child and the object returned will be
	 * cached for later re-use.
	 * 
	 * @return markup fragment.
	 */
	public MarkupFragment getMarkupFragment()
	{
		if (this.markupFragment != null)
		{
			return this.markupFragment;
		}

		MarkupContainer parent = getParent();
		if (parent == null)
		{
			throw new MarkupNotFoundException("The component is expected to have a parent: "
					+ getId());
		}

		this.markupFragment = parent.getMarkupFragment(getId());
		if (this.markupFragment == null)
		{
			throw new MarkupNotFoundException("Unable to find markup for Component: " + getId());
		}

		// Attached behaviors provided by the ComponentTag which
		// one of the markup handlers might have added.
		if (this.markupFragment.size() > 0)
		{
			final ComponentTag tag = this.markupFragment.getTag();

			// add any behaviors attached to the component tag
			if ((tag != null) && tag.hasBehaviors())
			{
				Iterator<IBehavior> behaviors = tag.getBehaviors();
				while (behaviors.hasNext())
				{
					add(behaviors.next());
				}
			}
		}

		return markupFragment;
	}

