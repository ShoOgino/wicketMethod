	/**
	 * Performs a render of this component as part of a Page level render
	 * process.
	 * <p>
	 * For component level re-render (e.g. AJAX) please call
	 * {@link #renderComponent(MarkupStream)}. Though render() does seem to
	 * work, it will fail for panel children.
	 * 
	 * @param markupStream
	 */
	public final void render(final MarkupStream markupStream)
	{
		setMarkupStream(markupStream);
		setFlag(FLAG_IS_RENDERED_ONCE, true);

		// Determine if component is visible using it's authorization status
		// and the isVisible property.
		if (isRenderAllowed() && isVisible())
		{
			// Rendering is beginning
			if (log.isDebugEnabled())
			{
				log.debug("Begin render " + this);
			}

			try
			{
				// Call implementation to render component
				onBeforeRender();
				try
				{
					IComponentBorder border = getBorder();
					if(border != null) border.renderBefore(this);
					onRender(markupStream);
					if(border != null) border.renderAfter(this);
				}
				finally
				{
					onAfterRender();
				}

				// Component has been rendered
				rendered();
			}
			catch (RuntimeException ex)
			{
				// Call each behaviors onException() to allow the
				// behavior to clean up
				if (behaviors != null)
				{
					for (IBehavior behavior : behaviors)
					{
						try
						{
							behavior.exception(this, ex);
						}
						catch (Throwable ex2)
						{
							log.error("Error while cleaning up after exception", ex2);
						}
					}
				}

				// Re-throw the exception
				throw ex;
			}

			if (log.isDebugEnabled())
			{
				log.debug("End render " + this);
			}
		}
		else
		{
			markupStream.skipComponent();
		}
	}

