	/**
	 * Clean up the request cycle.
	 */
	private void detach()
	{
		// clean up target stack; calling detach has effects like
		// NOTE: don't remove the targets as testing code might need them
		// furthermore, the targets will be cg-ed with this cycle too
		for (Iterator iter = requestTargets.iterator(); iter.hasNext();)
		{
			IRequestTarget target = (IRequestTarget)iter.next();
			if (target != null)
			{
				try
				{
					target.detach(this);
				}
				catch (RuntimeException e)
				{
					log.error("there was an error cleaning up target " + target + ".", e);
				}
			}
		}

		// remove any rendered feedback messages from the session
		try
		{
			session.cleanupFeedbackMessages();
		}
		catch (RuntimeException re)
		{
			log.error("there was an error cleaning up the feedback messages", re);
		}

		if (updateSession)
		{
			// At the end of our response, we need to set any session
			// attributes that might be required to update the cluster
			try
			{
				session.update();
			}
			catch (RuntimeException re)
			{
				log.error("there was an error updating the session " + session + ".", re);
			}
		}

		// clear the used pagemap for this thread,
		// maybe we can move this a few lines above to have a but more
		// concurrency (session.update)
		if (getResponse() instanceof BufferedWebResponse)
		{
			try
			{
				((BufferedWebResponse)getResponse()).filter();
			}
			catch (RuntimeException re)
			{
				log.error("there was an error filtering the response.", re);
			}
		}

		try
		{
			IRequestLogger requestLogger = getApplication().getRequestLogger();
			if (requestLogger != null)
			{
				requestLogger.requestTime((System.currentTimeMillis() - startTime));
			}
		}
		catch (RuntimeException re)
		{
			log.error("there was an error in the RequestLogger ending.", re);
		}

		try
		{
			session.requestDetached();
		}
		catch (RuntimeException re)
		{
			log.error("there was an error detaching the request from the session " + session + ".",
					re);
		}

		try
		{
			onEndRequest();
		}
		catch (RuntimeException e)
		{
			log.error("Exception occurred during onEndRequest", e);
		}

		// Release thread local resources
		try
		{
			threadDetach();
		}
		catch (RuntimeException re)
		{
			log.error("Exception occurred during threadDetach", re);
		}
	}

