	/**
	 * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT CALL IT.
	 * 
	 * Get the page for the given path.
	 * 
	 * @param pageMapName
	 *            The name of the page map where the page is
	 * @param path
	 *            Component path
	 * @param versionNumber
	 *            The version of the page required
	 * @return The page based on the first path component (the page id), or null
	 *         if the requested version of the page cannot be found.
	 */
	public final Page getPage(final String pageMapName, final String path, final int versionNumber)
	{
		if (log.isDebugEnabled())
		{
			log.debug("Getting page [path = " + path + ", versionNumber = " + versionNumber + "]");
		}

		// Get page map by name, creating the default page map automatically
		PageMap pageMap = pageMapForName(pageMapName, Objects.equal(PageMap.DEFAULT_NAME,
				pageMapName));
		if (pageMap != null)
		{
			synchronized (usedPageMaps) // get a lock so be sure that only one is made 
			{
				if(pageMapsUsedInRequest == null)
				{
					// TODO!! this is not synchronized.. it should be (on session?)
					pageMapsUsedInRequest = new HashMap<PageMap, Thread>(3);
				}
			}
			synchronized (pageMapsUsedInRequest)
			{
				long startTime = System.currentTimeMillis();

				// Get page entry for id and version
				Thread t = pageMapsUsedInRequest.get(pageMap);
				while (t != null && t != Thread.currentThread())
				{
					try
					{
						// TODO make longer and configurable
						pageMapsUsedInRequest.wait(20000); // wait 20 seconds
						// max.
					}
					catch (InterruptedException ex)
					{
						throw new WicketRuntimeException(ex);
					}
					t = pageMapsUsedInRequest.get(pageMap);
					if (t != null && t != Thread.currentThread()
							&& (startTime + 20000) < System.currentTimeMillis())
					{
						// if it is still not the right thread..
						// This must be a wicket bug or some other (dead)lock in
						// the code.
						throw new WicketRuntimeException("After 20s the Pagemap " + pageMapName
								+ " is still locked by: " + t
								+ ", giving up trying to get the page for path: " + path);
					}
				}
				pageMapsUsedInRequest.put(pageMap, Thread.currentThread());
				final String id = Strings.firstPathComponent(path, Component.PATH_SEPARATOR);
				Page page = pageMap.get(Integer.parseInt(id), versionNumber);
				if (page == null)
				{
					pageMapsUsedInRequest.remove(pageMap);
					pageMapsUsedInRequest.notifyAll();
				}
				return page;
			}
		}
		return null;
	}

