	/**
	 * Gets the subset of the currently coupled {@link IBehavior}s that are of the provided type as
	 * a unmodifiable list or null if there are no behaviors attached. Returns an empty list rather
	 * than null if there are no behaviors coupled to this component.
	 * 
	 * @param type
	 *            The type or null for all
	 * 
	 * @return The subset of the currently coupled behaviors that are of the provided type as a
	 *         unmodifiable list or null
	 */
	protected List<IBehavior> getBehaviors(Class< ? extends IBehavior> type)
	{
		List<IBehavior> behaviors = getBehaviorsImpl();
		if (behaviors == null)
		{
			return Collections.emptyList();
		}

		List<IBehavior> subset = new ArrayList<IBehavior>(behaviors.size()); // avoid growing
		for (Iterator<IBehavior> i = behaviors.iterator(); i.hasNext();)
		{
			Object behavior = i.next();
			if (type == null || type.isAssignableFrom(behavior.getClass()))
			{
				subset.add((IBehavior)behavior);
			}
		}
		return Collections.unmodifiableList(subset);
	}

