	/**
	 * 
	 * @see org.apache.wicket.resource.loader.IStringResourceLoader#loadStringResource(java.lang.Class,
	 *      java.lang.String, java.util.Locale, java.lang.String, java.lang.String)
	 */
	public String loadStringResource(Class<?> clazz, final String key, final Locale locale,
		final String style, final String variation)
	{
		// only care about IValidator subclasses
		if (clazz == null || !IValidator.class.isAssignableFrom(clazz))
		{
			return null;
		}

		IPropertiesFactory propertiesFactory = Application.get()
			.getResourceSettings()
			.getPropertiesFactory();

		while (true)
		{
			// figure out the base path for the class
			String path = clazz.getName().replace('.', '/');

			// iterate over all the combinations
			ResourceNameIterator iter = new ResourceNameIterator(path, style, variation, locale,
				null);
			while (iter.hasNext())
			{
				String newPath = iter.next();

				final Properties props = propertiesFactory.load(clazz, newPath);
				if (props != null)
				{
					// Lookup the value
					String value = props.getString(key);
					if (value != null)
					{
						if (log.isDebugEnabled())
						{
							log.debug("Found resource from: " + props + "; key: " + key);
						}

						return value;
					}
				}
			}

			// Move to the next superclass
			clazz = clazz.getSuperclass();

			if (clazz == null || Object.class.equals(clazz))
			{
				// nothing more to search, done
				break;
			}
		}

		// not found
		return null;
	}

