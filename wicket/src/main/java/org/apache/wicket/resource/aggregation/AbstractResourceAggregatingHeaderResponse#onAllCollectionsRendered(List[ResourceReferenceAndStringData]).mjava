	/**
	 * After all the collections have been rendered, we call this callback so your subclass can add
	 * any other logic as needed. For instance, if you are aggregating YUI resources, your
	 * {@link #renderCollection(Set, Object, ResourceReferenceCollection)} method might have
	 * rendered only a YUI constructor that loaded all the JS files for each group. Then, you need
	 * to loop through the references again, and render any JS inside a sandboxed YUI.use()
	 * statement. You would render those here by creating the YUI.use statement, and call
	 * <tt>getHeaderResponse().renderJavascript(yourJS, null)</tt>
	 * 
	 * @param allTopLevelReferences
	 *            all the references that were rendered by the developers
	 */
	protected void onAllCollectionsRendered(
		List<ResourceReferenceAndStringData> allTopLevelReferences)
	{

	}

