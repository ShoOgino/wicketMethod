	/**
	 * Tries to find if a PortletContext is available. Searches for the 'detect portlet context'
	 * flag in various places and if true, tries to load the {@link javax.portlet.PortletContext}.
	 * 
	 * @param config
	 *            the FilterConfig object
	 * @return true if {@link javax.portlet.PortletContext} was successfully loaded
	 * @throws ServletException
	 *             on IO errors
	 */
	protected boolean isPortletContextAvailable(FilterConfig config) throws ServletException
	{
		boolean detectPortletContext = false;

		// search for portlet detection boolean in various places
		String parameter = config.getInitParameter(DETECT_PORTLET_CONTEXT);
		// search filter parameter
		if (parameter != null)
		{
			detectPortletContext = Boolean.valueOf(parameter).booleanValue();
		}
		else
		{
			parameter = config.getServletContext().getInitParameter(
				DETECT_PORTLET_CONTEXT_FULL_NAME);
			// search web.xml context paramter
			if (parameter != null)
			{
				detectPortletContext = Boolean.valueOf(parameter).booleanValue();
			}
			else
			{
				InputStream is = Thread.currentThread()
					.getContextClassLoader()
					.getResourceAsStream(WICKET_PORTLET_PROPERTIES);
				// search wicket.properties
				if (is != null)
				{
					try
					{
						Properties properties = new Properties();
						properties.load(is);
						detectPortletContext = Boolean.valueOf(
							properties.getProperty(DETECT_PORTLET_CONTEXT_FULL_NAME, "false"))
							.booleanValue();
					}
					catch (IOException e)
					{
						throw new ServletException(
							"Failed to load WicketPortlet.properties from classpath", e);
					}
				}
			}
		}
		if (detectPortletContext)
		{
			// load the portlet context
			try
			{
				Class.forName("javax.portlet.PortletContext");
				return true;
			}
			catch (ClassNotFoundException e)
			{
			}
		}
		return false;
	}

