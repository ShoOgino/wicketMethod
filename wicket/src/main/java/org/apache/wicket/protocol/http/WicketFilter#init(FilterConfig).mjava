	/**
	 * 
	 * @see javax.servlet.Filter#init(javax.servlet.FilterConfig)
	 */
	public void init(FilterConfig filterConfig) throws ServletException
	{
		initIgnorePaths(filterConfig);

		this.filterConfig = filterConfig;
		String filterMapping = filterConfig.getInitParameter(WicketFilter.FILTER_MAPPING_PARAM);

		if (SERVLET_PATH_HOLDER.equals(filterMapping))
		{
			servletMode = true;
		}

		final ClassLoader previousClassLoader = Thread.currentThread().getContextClassLoader();
		final ClassLoader newClassLoader = getClassLoader();
		try
		{
			if (previousClassLoader != newClassLoader)
			{
				Thread.currentThread().setContextClassLoader(newClassLoader);
			}

			// Try to configure filterPath from web.xml if it's not specified as
			// an init-param.
			if (filterMapping == null)
			{
				InputStream is = filterConfig.getServletContext().getResourceAsStream(
					"/WEB-INF/web.xml");
				if (is != null)
				{
					try
					{
						filterPath = getFilterPath(filterConfig.getFilterName(), is);
					}
					catch (ServletException e)
					{
						log.error("Error reading servlet/filter path from web.xml", e);
					}
					catch (SecurityException e)
					{
						// Swallow this at INFO.
						log.info("Couldn't read web.xml to automatically pick up servlet/filter path: " +
							e.getMessage());
					}
					if (filterPath == null)
					{
						log.info("Unable to parse filter mapping web.xml for " +
							filterConfig.getFilterName() + ". " + "Configure with init-param " +
							FILTER_MAPPING_PARAM + " if it is not \"/*\".");
					}
				}
			}

			IWebApplicationFactory factory = getApplicationFactory();

			// Construct WebApplication subclass
			webApplication = factory.createApplication(this);

			// Set this WicketFilter as the filter for the web application
			webApplication.setWicketFilter(this);

			// Store instance of this application object in servlet context to
			// make integration with outside world easier
			String contextKey = "wicket:" + filterConfig.getFilterName();
			filterConfig.getServletContext().setAttribute(contextKey, webApplication);

			// set the application thread local in case initialization code uses it
			Application.set(webApplication);

			// Call internal init method of web application for default
			// initialization
			webApplication.internalInit();

			// Call init method of web application
			webApplication.init();

			// We initialize components here rather than in the constructor or
			// in the internal init, because in the init method class aliases
			// can be added, that would be used in installing resources in the
			// component.
			webApplication.initializeComponents();

			// Give the application the option to log that it is started
			webApplication.logStarted();

			portletOnlyFilter = Boolean.valueOf(filterConfig.getInitParameter(PORTLET_ONLY_FILTER))
				.booleanValue();

			if (isPortletContextAvailable(filterConfig))
			{
				filterPortletContext = newWicketFilterPortletContext();
			}
			if (filterPortletContext != null)
			{
				filterPortletContext.initFilter(filterConfig, webApplication);
			}
		}
		finally
		{
			Application.unset();
			if (newClassLoader != previousClassLoader)
			{
				Thread.currentThread().setContextClassLoader(previousClassLoader);
			}
		}
	}

