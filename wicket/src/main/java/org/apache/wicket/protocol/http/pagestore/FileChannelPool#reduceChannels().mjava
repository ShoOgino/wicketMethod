	/**
	 * Tries to reduce (close) enough channels to have at least one channel free (so that there are
	 * maximum capacity - 1 opened channel).
	 */
	private void reduceChannels()
	{
		// how much channels we need to close?
		int channelsToReduce = nameToChannel.size() - capacity + 1;

		// while there are still channels to close and we have still idle
		// channels left
		while (channelsToReduce > 0 && idleChannels.isEmpty() == false)
		{
			FileChannel channel = idleChannels.getFirst();
			String channelName = channelToName.get(channel);

			// remove oldest idle channel
			idleChannels.removeFirst();
			nameToChannel.remove(channelName);
			channelToName.remove(channel);

			// this shouldn't really happen
			if (channelToUseCount.get(channel) != null)
			{
				log.warn("Channel " + channelName + " is both idle and in use at the same time!");
				channelToUseCount.remove(channel);
			}

			try
			{
				channel.close();
			}
			catch (IOException e)
			{
				log.error("Error closing file channel", e);
			}
			--channelsToReduce;
		}

		if (channelsToReduce > 0)
		{
			log.warn("Unable to reduce enough channels, no idle channels left to remove.");
		}
	}

