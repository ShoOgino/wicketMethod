	/**
	 * Consumes and processes all portlet requests. All the doX methods delegate to this method,
	 * including processAction and serveResource.
	 * 
	 * @param request
	 * @param response
	 * @param requestType
	 * @param pageType
	 * @throws PortletException
	 * @throws IOException
	 */
	protected void processRequest(PortletRequest request, PortletResponse response,
		String requestType, String pageType) throws PortletException, IOException
	{

		String wicketURL = null;
		String wicketFilterPath = null;
		String wicketFilterQuery = null;

		// FIXME portal comment: sets the name of the parameter to store the wicket url as a request
		// attribute, so that we can ?...?
		request.setAttribute(WICKET_URL_PORTLET_PARAMETER_ATTR,
			getWicketUrlPortletParameter(request));

		// get the actual wicketURL for this request, to be passed onto Wicket core for processing
		wicketURL = getWicketURL(request, pageType, getDefaultPage(pageType));
		wicketFilterPath = getWicketConfigParameter(request, WICKET_FILTER_PATH,
			this.wicketFilterPath);
		wicketFilterQuery = getWicketConfigParameter(request, WICKET_FILTER_QUERY,
			this.wicketFilterQuery);

		boolean actionRequest = ACTION_REQUEST.equals(requestType);

		// store the response state and request type in the request object, so they can be looked up
		// from a different context
		WicketResponseState responseState = new WicketResponseState();

		request.setAttribute(RESPONSE_STATE_ATTR, responseState);
		request.setAttribute(RESOURCE_URL_FACTORY_ATTR, resourceURLFactory);
		request.setAttribute(REQUEST_TYPE_ATTR, requestType);
		String portletResourceURL = request.getParameter(PORTLET_RESOURCE_URL_PARAMETER);
		if (portletResourceURL != null)
		{
			request.setAttribute(PORTLET_RESOURCE_URL_ATTR, portletResourceURL);
		}

		// FIXME javadoc - need explanation of why action requests are special
		// need to record the effective wicket url of the rendered result, so that the subsequent
		// portlet 'view' requests can delegate to wicket to render the correct location/wicket url.
		if (actionRequest)
		{
			// create the request dispatcher, to delegate the request to the wicket filter
			ServletContext servletContext = getServletContext(this, request, response);
			HttpServletRequest req = getHttpServletRequest(this, request, response);
			HttpServletResponse res = getHttpServletResponse(this, request, response);
			RequestDispatcher rd = servletContext.getRequestDispatcher(wicketURL);

			if (rd != null)
			{
				// http://issues.apache.org/jira/browse/PB-2:
				// provide servlet access to the Portlet components even from
				// an actionRequest in extension to the JSR-168 requirement
				// PLT.16.3.2 which (currently) only covers renderRequest
				// servlet inclusion.
				if (req.getAttribute("javax.portlet.config") == null)
				{
					req.setAttribute("javax.portlet.config", getPortletConfig());
				}
				if (req.getAttribute("javax.portlet.request") == null)
				{
					req.setAttribute("javax.portlet.request", request);
				}
				if (req.getAttribute("javax.portlet.response") == null)
				{
					req.setAttribute("javax.portlet.response", response);
				}
				try
				{
  				    // delegate to wicket filter - this is where the magic happens
					rd.include(req, res);
					processActionResponseState(wicketURL, wicketFilterPath, wicketFilterQuery,
						(ActionRequest)request, (ActionResponse)response, responseState);
				}
				catch (ServletException e)
				{
					throw new PortletException(e);
				}
			}
		}
		else
		{
			PortletRequestDispatcher rd = null;
			String previousURL = null;
			while (true)
			{
				rd = getPortletContext().getRequestDispatcher(wicketURL);
				if (rd != null)
				{
					rd.include((RenderRequest)request, (RenderResponse)response);
					String redirectLocation = responseState.getRedirectLocation();
					if (redirectLocation != null)
					{
						redirectLocation = fixWicketUrl(redirectLocation, wicketFilterPath,
							wicketFilterQuery);
						boolean validWicketUrl = redirectLocation.startsWith(wicketFilterPath);
						if (portletResourceURL != null)
						{
							if (validWicketUrl)
							{
								HashMap parameters = new HashMap(2);
								parameters.put(
									(String)request.getAttribute(WicketPortlet.WICKET_URL_PORTLET_PARAMETER_ATTR) +
										request.getPortletMode().toString(),
									new String[] { redirectLocation });
								parameters.put(PORTLET_RESOURCE_URL_PARAMETER,
									new String[] { "true" });
								redirectLocation = resourceURLFactory.createResourceURL(
									getPortletConfig(), (RenderRequest)request,
									(RenderResponse)response, parameters);
							}
							getHttpServletResponse(this, request, response).sendRedirect(
								redirectLocation);
						}
						else if (validWicketUrl &&
							((previousURL == null || previousURL != redirectLocation)))
						{
							previousURL = wicketURL;
							wicketURL = redirectLocation;
							((RenderResponse)response).reset();
							responseState.reset();
							continue;
						}
						else
						{
							// TODO: unhandled/unsupport RenderResponse redirect
						}
					}
				}
				break;
			}
		}
	}

