	/**
	 * Encode the given request target. If a mount is found, that mounted url will be returned.
	 * Otherwise, one of the delegation methods will be called. In case you are using custom targets
	 * that are not part of the default target hierarchy, you need to override
	 * {@link #doEncode(RequestCycle, IRequestTarget)}, which will be called after the defaults have
	 * been tried. When that doesn't provide a url either, an exception will be thrown saying that
	 * encoding could not be done.
	 * 
	 * @see org.apache.wicket.request.IRequestCodingStrategy#encode(org.apache.wicket.RequestCycle,
	 *      org.apache.wicket.IRequestTarget)
	 */
	public final CharSequence encode(final RequestCycle requestCycle,
		final IRequestTarget requestTarget)
	{
		// First check to see whether the target is mounted
		CharSequence url = pathForTarget(requestTarget);

		RequestContext requestContext = RequestContext.get();
		boolean portletRequest = requestContext.isPortletRequest();
		boolean sharedResourceURL = false;

		if (url != null && !portletRequest)
		{
			// Do nothing - we've found the URL and it's mounted.
		}
		else if (requestTarget instanceof IBookmarkablePageRequestTarget)
		{
			url = requestContext.encodeRenderURL(url == null ? encode(requestCycle,
				(IBookmarkablePageRequestTarget)requestTarget) : url);
		}
		else if (requestTarget instanceof ISharedResourceRequestTarget)
		{
			url = requestContext.encodeSharedResourceURL(url == null ? encode(requestCycle,
				(ISharedResourceRequestTarget)requestTarget) : url);
			sharedResourceURL = true;
		}
		else if (requestTarget instanceof PageIdRequestTarget)
		{
			url = encode(requestCycle, (PageIdRequestTarget)requestTarget);
		}
		else if (requestTarget instanceof IListenerInterfaceRequestTarget)
		{
			if (url == null)
			{
				url = encode(requestCycle, (IListenerInterfaceRequestTarget)requestTarget);
			}
			if (portletRequest)
			{
				IListenerInterfaceRequestTarget iliRequestTarget = (IListenerInterfaceRequestTarget)requestTarget;
				RequestListenerInterface rli = iliRequestTarget.getRequestListenerInterface();
				if (IResourceListener.class.isAssignableFrom(rli.getMethod().getDeclaringClass()) ||
					IBehaviorListener.class.isAssignableFrom(rli.getMethod().getDeclaringClass()))
				{
					url = requestContext.encodeResourceURL(url);
				}
				else if (IRedirectListener.class.isAssignableFrom(rli.getMethod()
					.getDeclaringClass()))
				{
					if (((WebRequestCycle)requestCycle).getWebRequest().isAjax())
					{
						// TODO: Probably not all Ajax based redirects need to break out of
						// ResourceURL encoding
						// Need to find out and/or provide some kind of extension how to indicate
						// this
						url = ((PortletRequestContext)requestContext).encodeRenderURL(url, true);
					}
					else
					{
						url = requestContext.encodeRenderURL(url);
					}
				}
				else
				{
					PortletRequestContext prc = (PortletRequestContext)requestContext;
					boolean forceActionURL = prc.isAjax();
					if (forceActionURL)
					{
						List<IBehavior> behaviors = iliRequestTarget.getTarget().getBehaviors();
						for (int i = 0, size = behaviors.size(); i < size; i++)
						{
							if (AbstractAjaxBehavior.class.isAssignableFrom(behaviors.get(i)
								.getClass()))
							{
								forceActionURL = false;
								break;
							}
						}
					}
					url = prc.encodeActionURL(url, forceActionURL);
				}
			}
		}
		else if (url == null)
		{
			if (requestTarget instanceof IPageRequestTarget)
			{
				// This calls page.urlFor(IRedirectListener.INTERFACE), which calls
				// the function we're in again. We therefore need to jump out here
				// and return the url immediately, otherwise we end up prefixing it
				// with relative path or absolute prefixes twice.
				return encode(requestCycle, (IPageRequestTarget)requestTarget);
			}
			// fall through for non-default request targets
			else
			{
				url = doEncode(requestCycle, requestTarget);
			}
		}

		if (url != null)
		{
			String result = null;

			if (!sharedResourceURL && portletRequest)
			{
				result = url.toString();
			}
			else
			{
				// Add the actual URL. This will be relative to the Wicket
				// Servlet/Filter, with no leading '/'.
				PrependingStringBuffer prepender = new PrependingStringBuffer(url.toString());

				// Prepend prefix to the URL to make it relative to the current
				// request.
				prepender.prepend(requestCycle.getRequest().getRelativePathPrefixToWicketHandler());

				result = prepender.toString();
				// We need to special-case links to the home page if we're at the
				// same level.
				if (result.length() == 0)
				{
					result = "./";
				}
			}
			return requestCycle.getOriginalResponse().encodeURL(result);
		}

		// Just return null instead of throwing an exception. So that it can be
		// handled better
		return null;
	}

