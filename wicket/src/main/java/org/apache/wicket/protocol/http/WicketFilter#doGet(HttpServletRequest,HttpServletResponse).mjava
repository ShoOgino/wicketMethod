	/**
	 * Handles servlet page requests.
	 * 
	 * @param servletRequest
	 *            Servlet request object
	 * @param servletResponse
	 *            Servlet response object
	 * @return true if the request was handled by wicket, false otherwise
	 * @throws ServletException
	 *             Thrown if something goes wrong during request handling
	 * @throws IOException
	 */
	public boolean doGet(final HttpServletRequest servletRequest,
		final HttpServletResponse servletResponse) throws ServletException, IOException
	{
		String relativePath = getRelativePath(servletRequest);

		// Special-case for home page - we redirect to add a trailing slash.
		if (relativePath.length() == 0 &&
			!Strings.stripJSessionId(servletRequest.getRequestURI()).endsWith("/"))
		{
			String redirectUrl = servletRequest.getRequestURI() + "/";
			String queryString = servletRequest.getQueryString();
			if (queryString != null)
			{
				redirectUrl += "?" + queryString;
			}
			servletResponse.sendRedirect(servletResponse.encodeRedirectURL(redirectUrl));
			return true;
		}

		final ClassLoader previousClassLoader = Thread.currentThread().getContextClassLoader();
		final ClassLoader newClassLoader = getClassLoader();
		try
		{
			if (previousClassLoader != newClassLoader)
			{
				Thread.currentThread().setContextClassLoader(newClassLoader);
			}

			checkCharacterEncoding(servletRequest);

			// Create a new webrequest
			final WebRequest request = webApplication.newWebRequest(servletRequest);

			// Are we using REDIRECT_TO_BUFFER?
			if (webApplication.getRequestCycleSettings().getRenderStrategy() == IRequestCycleSettings.REDIRECT_TO_BUFFER)
			{
				// Try to see if there is a redirect stored
				ISessionStore sessionStore = webApplication.getSessionStore();
				String sessionId = sessionStore.getSessionId(request, false);
				if (sessionId != null)
				{
					BufferedHttpServletResponse bufferedResponse = null;
					String queryString = servletRequest.getQueryString();
					if (!Strings.isEmpty(queryString))
					{
						bufferedResponse = webApplication.popBufferedResponse(sessionId,
							queryString);
					}
					else
					{
						bufferedResponse = webApplication.popBufferedResponse(sessionId,
							relativePath);
					}

					if (bufferedResponse != null)
					{
						bufferedResponse.writeTo(servletResponse);
						// redirect responses are ignored for the request
						// logger...
						return true;
					}
				}
			}

			WebResponse response = null;
			boolean externalCall = !Application.exists();
			try
			{
				// if called externally (i.e. WicketServlet) we need to set the thread local here
				// AND clean it up at the end of the request
				if (externalCall)
				{
					Application.set(webApplication);
				}

				// Create a response object and set the output encoding according to
				// wicket's application settings.
				response = webApplication.newWebResponse(servletResponse);
				response.setAjax(request.isAjax());
				response.setCharacterEncoding(webApplication.getRequestCycleSettings()
					.getResponseRequestEncoding());

				createRequestContext(request, response);

				// Create request cycle
				final RequestCycle cycle = webApplication.newRequestCycle(request, response);

				try
				{
					// Process request
					cycle.request();

					return cycle.wasHandled();
				}
				catch (AbortException e)
				{
					// noop
				}
			}
			finally
			{
				// Close response
				try
				{
					if (response != null)
					{
						response.close();
					}
				}
				catch (Exception e)
				{
					log.error("closing the buffer error", e);
				}
				finally
				{
					// Clean up thread local session
					Session.unset();

					if (externalCall)
					{
						// Clean up thread local application if this was an external call
						// (if not, doFilter will clean it up)
						Application.unset();
						RequestContext.unset();
					}
				}
			}
		}
		finally
		{
			if (newClassLoader != previousClassLoader)
			{
				Thread.currentThread().setContextClassLoader(previousClassLoader);
			}
		}
		return true;
	}

