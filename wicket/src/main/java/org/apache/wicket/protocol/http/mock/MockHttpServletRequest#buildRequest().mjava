	/**
	 * Build the request based on the uploaded files and the parameters.
	 * 
	 * @return The request as a string.
	 */
	private byte[] buildRequest()
	{
		if (uploadedFiles == null && useMultiPartContentType == false)
		{
			if (post.getParameterNames().size() == 0)
			{
				return "".getBytes();
			}
			Url url = new Url();
			for (final String parameterName : post.getParameterNames())
			{
				List<StringValue> values = post.getParameterValues(parameterName);
				for (StringValue value : values)
				{
					url.addQueryParameter(parameterName, value.toString());
				}
			}
			String body = url.toString().substring(1);
			return body.getBytes();
		}


		try
		{
			// Build up the input stream based on the files and parameters
			ByteArrayOutputStream out = new ByteArrayOutputStream();

			// Add parameters
			for (final String parameterName : post.getParameterNames())
			{
				List<StringValue> values = post.getParameterValues(parameterName);
				for (StringValue value : values)
				{
					newAttachment(out);
					out.write("; name=\"".getBytes());
					out.write(parameterName.getBytes());
					out.write("\"".getBytes());
					out.write(crlf.getBytes());
					out.write(crlf.getBytes());
					out.write(post.getParameterValue(parameterName).toString().getBytes());
					out.write(crlf.getBytes());
				}
			}

			// Add files
			if (uploadedFiles != null)
			{
				for (String fieldName : uploadedFiles.keySet())
				{
					UploadedFile uf = uploadedFiles.get(fieldName);

					newAttachment(out);
					out.write("; name=\"".getBytes());
					out.write(fieldName.getBytes());
					out.write("\"; filename=\"".getBytes());
					out.write(uf.getFile().getName().getBytes());
					out.write("\"".getBytes());
					out.write(crlf.getBytes());
					out.write("Content-Type: ".getBytes());
					out.write(uf.getContentType().getBytes());
					out.write(crlf.getBytes());
					out.write(crlf.getBytes());

					// Load the file and put it into the the inputstream
					FileInputStream fis = new FileInputStream(uf.getFile());

					try
					{
						IOUtils.copy(fis, out);
					}
					finally
					{
						fis.close();
					}
					out.write(crlf.getBytes());
				}
			}

			out.write(boundary.getBytes());
			out.write("--".getBytes());
			out.write(crlf.getBytes());
			return out.toByteArray();
		}
		catch (IOException e)
		{
			// NOTE: IllegalStateException(Throwable) only exists since Java 1.5
			throw new WicketRuntimeException(e);
		}
	}

