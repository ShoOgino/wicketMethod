	/**
	 * Initialize the request parameters to point to the given component.
	 * 
	 * @param component
	 *            The component
	 */
	public void setRequestToComponent(final Component component)
	{

		if (component instanceof BookmarkablePageLink)
		{
			final Class<? extends Page> clazz = ((BookmarkablePageLink<?>)component).getPageClass();
			parameters.put(WebRequestCodingStrategy.BOOKMARKABLE_PAGE_PARAMETER_NAME,
				':' + clazz.getName());
		}
		else
		{
			int version = 0;
			Class<?> clazz = null;
			if (component instanceof IRedirectListener)
			{
				clazz = IRedirectListener.class;
			}
			else if (component instanceof IResourceListener)
			{
				clazz = IResourceListener.class;
			}
			else if (component instanceof IFormSubmitListener)
			{
				clazz = IFormSubmitListener.class;
			}
			else if (component instanceof ILinkListener)
			{
				clazz = ILinkListener.class;
			}
			else if (component instanceof IOnChangeListener)
			{
				clazz = IOnChangeListener.class;
			}
			else
			{
				throw new IllegalArgumentException(
					"The component class doesn't seem to implement any of the known *Listener interfaces: " +
						component.getClass());
			}

			// manually create the url using default strategy and format
			parameters.put(WebRequestCodingStrategy.INTERFACE_PARAMETER_NAME, ':' +
				component.getPath() + ':' + (version == 0 ? "" : "" + version) + ':' +
				Classes.simpleName(clazz) + "::");

			// see if we can replace our manual listener url with a properly generated one...

			try
			{
				RequestListenerInterface rli = (RequestListenerInterface)clazz.getField("INTERFACE")
					.get(clazz);

				String auto = component.getRequestCycle().urlFor(component, rli).toString();

				// check for crypted strategy
				if (auto.startsWith("?x="))
				{
					auto = auto.substring(3);
					parameters.put("x", auto);
					parameters.remove(WebRequestCodingStrategy.INTERFACE_PARAMETER_NAME);
				}
				else
				{
					int idx = auto.indexOf(WebRequestCodingStrategy.INTERFACE_PARAMETER_NAME);
					if (idx >= 0)
					{
						auto = auto.substring(idx +
							WebRequestCodingStrategy.INTERFACE_PARAMETER_NAME.length() + 1);
					}
					else
					{
						idx = auto.indexOf("&");
						if (idx >= 0)
						{
							auto = auto.substring(0, idx);
						}
					}
					parameters.put(WebRequestCodingStrategy.INTERFACE_PARAMETER_NAME, auto);
				}
			}
			catch (Exception e)
			{
				// noop
			}

			if (component.isStateless() && component.getPage().isBookmarkable())
			{
				parameters.put(WebRequestCodingStrategy.BOOKMARKABLE_PAGE_PARAMETER_NAME,
					':' + component.getPage().getClass().getName());
			}
		}
	}

