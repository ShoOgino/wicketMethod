	/**
	 * Removes all children from this container.
	 * <p>
	 * Note: implementation does not call {@link MarkupContainer#remove(Component) } for each
	 * component.
	 */
	public final void removeAll()
	{
		if (children != null)
		{
			addStateChange(new Change()
			{
				private static final long serialVersionUID = 1L;

				final Object removedChildren = children;

				@Override
				public String toString()
				{
					return "RemoveAllChange[component: " + getPath() + ", removed Children: " +
						removedChildren + "]";
				}

				@Override
				public void undo()
				{
					children = removedChildren;
					int size = children_size();
					for (int i = 0; i < size; i++)
					{
						// Get next child
						final Component< ? > child = children_get(i);
						child.setParent(MarkupContainer.this);
					}
				}
			});

			// Loop through child components
			int size = children_size();
			for (int i = 0; i < size; i++)
			{
				Object childObject = children_get(i, false);
				if (childObject instanceof Component)
				{
					// Get next child
					final Component< ? > child = (Component< ? >)childObject;

					// Do not call remove() because the state change would than be
					// recorded twice.
					child.detachModel();
					child.setParent(null);
				}
			}

			children = null;
		}
	}

