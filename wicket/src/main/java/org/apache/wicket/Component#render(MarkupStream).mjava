	/**
	 * Performs a render of this component as part of a Page level render process.
	 * <p>
	 * For component level re-render (e.g. AJAX) please call {@link #renderComponent(MarkupStream)}.
	 * Though render() does seem to work, it will fail for panel children.
	 * 
	 * @param markupStream
	 */
	public final void render(MarkupStream markupStream)
	{
		// Remove/Cleanup when migrating to MarkupFragments. Only needed as long as rendering is
		// based on MarkupStream
		if (getApplication().getMarkupFragmentEnabled())
		{
			// Step 1: Make sure there is a markup available for the Component
			IMarkupFragment markup = getMarkup();
			if (!(this instanceof Page) && (markup == null))
			{
				throw new IllegalArgumentException("MarkupFragment not found: " + toString() +
					". Please see Application.getMarkupFragmentEnabled() as well.");
			}

			// Step 2: A markup stream based on the markup should yield the same result.
			if ((markupStream != null) || !(this instanceof Page))
			{
				MarkupStream ms = new MarkupStream(markup);

				// We need to skip the component in the original markup stream to avoid
				// exceptions later on.
				if (markupStream != null)
				{
					markupStream.skipComponent();
				}

				// We want to use the new markup stream
				markupStream = ms;
			}
		}

		// We need to know the index before we do the visibility check.
		// Otherwise we wouldn't know the markup index for invisible components
		if (markupStream != null)
		{
			markupIndex = markupStream.getCurrentIndex();
		}

		markRendering(true);

		setMarkupStream(markupStream);

		if (markupStream != null)
		{
			// Guarantee that the markupStream is set and determineVisibility not yet tested
			// See WICKET-2049
			markupStream.getTag().onBeforeRender(this, markupStream);
		}

		// Determine if component is visible using it's authorization status
		// and the isVisible property.
		if (determineVisibility())
		{
			setFlag(FLAG_HAS_BEEN_RENDERED, true);

			// Rendering is beginning
			if (log.isDebugEnabled())
			{
				log.debug("Begin render " + this);
			}

			try
			{
				notifyBehaviorsComponentBeforeRender();
				onRender(markupStream);
				notifyBehaviorsComponentRendered();

				// Component has been rendered
				rendered();
			}
			catch (RuntimeException ex)
			{
				// Call each behaviors onException() to allow the
				// behavior to clean up
				for (IBehavior behavior : getBehaviors())
				{
					if (isBehaviorAccepted(behavior))
					{
						try
						{
							behavior.exception(this, ex);
						}
						catch (Throwable ex2)
						{
							log.error("Error while cleaning up after exception", ex2);
						}
					}
				}

				// Re-throw the exception
				throw ex;
			}

			if (log.isDebugEnabled())
			{
				log.debug("End render " + this);
			}
		}
		// markupStream is null when rendering a page
		else if (markupStream != null)
		{
			if (getFlag(FLAG_PLACEHOLDER))
			{
				final ComponentTag tag = markupStream.getTag();
				renderPlaceholderTag(tag, getResponse());
			}
			markupStream.skipComponent();
		}
	}

