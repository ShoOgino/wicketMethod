	/**
	 * Clean up the request cycle. Please note that you (the user of Wicket) will probably never
	 * have a need to call detach() yourself. It is used Wicket internally only. But you may
	 * subclass RequestCycle in order to execute additional code during detach. Do not forget to
	 * call super.detach() in or subclass.
	 */
	public void detach()
	{
		// clean up target stack; calling detach has effects like
		// NOTE: don't remove the targets as testing code might need them
		// furthermore, the targets will be gc-ed with this cycle too
		for (int i = 0; i < requestTargets.size(); i++)
		{
			IRequestTarget target = requestTargets.get(i);
			if (target != null)
			{
				try
				{
					target.detach(this);
				}
				catch (RuntimeException e)
				{
					log.error("there was an error cleaning up target " + target + ".", e);
				}
			}
		}

		try
		{
			onAfterTargetsDetached();
		}
		catch (Throwable re)
		{
			log.error("there was an error processing onAfterTargetsDetached", re);
		}

		if (automaticallyClearFeedbackMessages)
		{
			// remove any rendered and otherwise obsolete feedback messages from
			// the session
			try
			{
				if (sessionExists())
				{
					getSession().cleanupFeedbackMessages();
				}
			}
			catch (RuntimeException re)
			{
				log.error("there was an error cleaning up the feedback messages", re);
			}
		}

		// if we have a request logger, update that now
		try
		{
			IRequestLogger requestLogger = getApplication().getRequestLogger();
			if (requestLogger != null)
			{
				requestLogger.requestTime((System.currentTimeMillis() - startTime));
			}
		}
		catch (RuntimeException re)
		{
			log.error("there was an error in the RequestLogger ending.", re);
		}

		// let the session cleanup after a request, flushing changes etc.
		if (sessionExists())
		{
			try
			{
				getSession().requestDetached();
			}
			catch (RuntimeException re)
			{
				log.error("there was an error detaching the request from the session " + session +
					".", re);
			}
		}

		if (getResponse() instanceof BufferedWebResponse)
		{
			try
			{
				BufferedWebResponse response = (BufferedWebResponse)getResponse();
				response.filter();
			}
			catch (RuntimeException re)
			{
				log.error("there was an error filtering the response.", re);
			}
		}

		try
		{
			onEndRequest();
		}
		catch (RuntimeException e)
		{
			log.error("Exception occurred during onEndRequest", e);
		}

		Session session = getSession();
		if (session != null)
		{
			session.getPageManager().commitRequest();
		}

		// Release thread local resources
		try
		{
			threadDetach();
		}
		catch (RuntimeException re)
		{
			log.error("Exception occurred during threadDetach", re);
		}
	}

