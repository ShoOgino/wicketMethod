	/**
	 * Render the markup starting at the current position of the markup strean
	 * 
	 * @see #onComponentTagBody(MarkupStream, ComponentTag)
	 * 
	 * @param providerMarkupStream
	 * @param openTag
	 */
	private void renderFragment(final MarkupStream providerMarkupStream, final ComponentTag openTag)
	{
		// remember the current position in the markup. Will have to come back to it.
		int currentIndex = providerMarkupStream.getCurrentIndex();

		// Find the markup fragment
		while (providerMarkupStream.hasMore())
		{
			MarkupElement elem = providerMarkupStream.get();
			if (elem instanceof ComponentTag)
			{
				ComponentTag tag = providerMarkupStream.getTag();
				if (tag.isOpen() || tag.isOpenClose())
				{
					if (tag.getId().equals(markupId))
					{
						break;
					}
				}
			}

			providerMarkupStream.nextOpenTag();
		}

		if (providerMarkupStream.hasMore() == false)
		{
			throw new MarkupException("Markup of component class `" +
				providerMarkupStream.getContainerClass().getName() +
				"` does not contain a fragment with wicket:id `" + markupId + "`. Context: " +
				toString());
		}

		try
		{
			// Get the fragments open tag
			ComponentTag fragmentOpenTag = providerMarkupStream.getTag();

			// if it is an open close tag, skip this fragment.
			if (!fragmentOpenTag.isOpenClose())
			{
				// We'll completely ignore the fragments open tag. It'll not be
				// rendered
				providerMarkupStream.next();

				// Render the body of the fragment
				super.onComponentTagBody(providerMarkupStream, fragmentOpenTag);
			}
		}
		finally
		{
			// Make sure the markup stream is positioned where we started back
			// at the original component
			providerMarkupStream.setCurrentIndex(currentIndex);
		}
	}

