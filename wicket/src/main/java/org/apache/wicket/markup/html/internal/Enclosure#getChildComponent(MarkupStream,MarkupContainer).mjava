	/**
	 * @param markupStream
	 * @param container
	 * @return The component associated with the
	 */
	private Component getChildComponent(final MarkupStream markupStream, MarkupContainer container)
	{
		Component controller = container.get(childId.toString());
		if (controller == null)
		{
			int orgIndex = markupStream.getCurrentIndex();
			try
			{
				while (markupStream.hasMore())
				{
					markupStream.next();
					if (markupStream.skipUntil(ComponentTag.class))
					{
						ComponentTag tag = markupStream.getTag();
						if ((tag != null) && (tag.isOpen() || tag.isOpenClose()))
						{
							if (childId.equals(tag.getId()))
							{
								controller = ComponentResolvers.resolveByComponentHierarchy(
									container, markupStream, tag);
								break;
							}
						}
					}
				}
			}
			finally
			{
				markupStream.setCurrentIndex(orgIndex);
			}
		}
		return controller;
	}

