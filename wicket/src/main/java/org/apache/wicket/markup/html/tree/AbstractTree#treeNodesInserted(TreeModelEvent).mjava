	/**
	 * @see javax.swing.event.TreeModelListener#treeNodesInserted(javax.swing.event.TreeModelEvent)
	 */
	public final void treeNodesInserted(TreeModelEvent e)
	{
		if (dirtyAll)
		{
			return;
		}

		// get the parent node of inserted nodes
		TreeNode parentNode = (TreeNode)e.getTreePath().getLastPathComponent();

		if (isNodeVisible(parentNode))
		{
			// parentNode was a leaf before this insertion event only if every one of
			// its current children is in the event's list of children
			boolean wasLeaf = true;
			List<?> eventChildren = Arrays.asList(e.getChildren());
			Enumeration<?> treeChildren = parentNode.children();
			while (wasLeaf && treeChildren.hasMoreElements())
			{
				if (!eventChildren.contains(treeChildren.nextElement()))
				{
					wasLeaf = false;
				}
			}

			if (wasLeaf)
			{
				// parentNode now has children for the first time, so we need to invalidate
				// grandparent so that parentNode's junctionLink gets rebuilt with a plus/minus link
				Object grandparentNode = getParentNode(parentNode);
				invalidateNodeWithChildren(grandparentNode);
				getTreeState().expandNode(parentNode);
			}
			else
			{
				if (isNodeExpanded(parentNode))
				{
					TreeItem parentItem = nodeToItemMap.get(parentNode);
					if (parentItem != null)
					{
						if (parentItem.getChildren() == null || parentItem.getChildren().isEmpty())
						{
							invalidateNode(parentNode, true);
						}

						for (int i = 0; i < e.getChildren().length; ++i)
						{
							Object node = e.getChildren()[i];
							int index = e.getChildIndices()[i];
							TreeItem item = newTreeItem(parentItem, node, parentItem.getLevel() + 1);
							itemContainer.add(item);

							if (parentItem.getChildren() != null)
							{
								parentItem.getChildren().add(index, item);
								markTheLastButOneChildDirty(parentItem, item);
							}

							if (!dirtyItems.contains(item))
							{
								dirtyItems.add(item);
							}

							if (!dirtyItemsCreateDOM.contains(item) &&
								!item.hasParentWithChildrenMarkedToRecreation())
							{
								dirtyItemsCreateDOM.add(item);
							}
						}
					}
				}
			}
		}
	}

