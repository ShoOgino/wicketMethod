	/**
	 * Convenience method for subclasses to call. It is exactly like you would implement
	 * getMarkup(child) in your subclass. The only difference is, you need to provide the name of
	 * tag, such as 'panel' in &lt;wicket:panel&gt;
	 * 
	 * @param tagName
	 * @param child
	 * @return the markup fragment for the child
	 */
	public final IMarkupFragment getMarkup(final String tagName, final Component child)
	{
		Checks.argumentNotEmpty(tagName, "tagName");

		// get the associated markup resource file
		IMarkupFragment markup = getAssociatedMarkup();
		if (markup == null)
		{
			throw new MarkupException("Unable to find associated markup file for: " +
				this.toString());
		}

		// Find <wicket:'name'>
		IMarkupFragment panelMarkup = findTag(markup, tagName);
		if (panelMarkup == null)
		{
			throw new MarkupNotFoundException("Expected to find <wicket:" + tagName +
				"> in associated markup file. Markup: " + markup.toString());
		}

		// If child == null, return the markup fragment starting with the <wicket:border> tag
		if (child == null)
		{
			return panelMarkup;
		}

		// Find the markup for the child component
		panelMarkup = panelMarkup.find(child.getId());
		if (panelMarkup != null)
		{
			return panelMarkup;
		}

		return findMarkupInAssociatedFileHeader(markup, child);
	}

