	/**
	 * @see javax.swing.event.TreeModelListener#treeNodesRemoved(javax.swing.event.TreeModelEvent)
	 */
	public final void treeNodesRemoved(TreeModelEvent removalEvent)
	{
		if (dirtyAll)
		{
			return;
		}

		// get the parent node of deleted nodes
		TreeNode parentNode = (TreeNode)removalEvent.getTreePath().getLastPathComponent();
		TreeItem parentItem = nodeToItemMap.get(parentNode);

		if (parentItem != null && isNodeVisible(parentNode))
		{
			if (parentNode.getChildCount() == 0)
			{
				// rebuild parent's icon to show it no longer has children
				invalidateNode(parentNode, true);
			}

			if (isNodeExpanded(parentNode))
			{
				// deleted nodes were visible; we need to delete their TreeItems
				for (Object deletedNode : removalEvent.getChildren())
				{
					TreeItem itemToDelete = nodeToItemMap.get(deletedNode);
					if (itemToDelete != null)
					{
						markTheLastButOneChildDirty(parentItem, itemToDelete);

						// remove all the deleted item's children
						visitItemChildren(itemToDelete, new IItemCallback()
						{
							public void visitItem(TreeItem item)
							{
								removeItem(item);
								getTreeState().selectNode(item.getModelObject(), false);
							}
						});

						parentItem.getChildren().remove(itemToDelete);
						removeItem(itemToDelete);
						getTreeState().selectNode(itemToDelete.getModelObject(), false);
					}
				}
			}
		}
	}

