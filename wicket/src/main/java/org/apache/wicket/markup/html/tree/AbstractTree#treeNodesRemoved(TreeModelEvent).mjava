	/**
	 * @see javax.swing.event.TreeModelListener#treeNodesRemoved(javax.swing.event.TreeModelEvent)
	 */
	public final void treeNodesRemoved(TreeModelEvent e)
	{
		// get the parent node of inserted nodes
		Object parent = e.getTreePath().getLastPathComponent();
		TreeItem parentItem = nodeToItemMap.get(parent);

		if (parentItem != null && isNodeVisible(parent) && isNodeExpanded(parent))
		{
			boolean nonEmpty = parentItem.getChildren() != null && !parentItem.getChildren().isEmpty();
			for (int i = 0; i < e.getChildren().length; ++i)
			{
				Object node = e.getChildren()[i];

				TreeItem item = nodeToItemMap.get(node);
				if (item != null)
				{
					markTheLastButOneChildDirty(parentItem, item);

					// go though item children and remove every one of them
					visitItemChildren(item, new IItemCallback()
					{
						public void visitItem(TreeItem item)
						{
							removeItem(item);

							// deselect the node
							getTreeState().selectNode(item.getDefaultModelObject(), false);
						}
					});
					
					parentItem.getChildren().remove(item);
					
					removeItem(item);

					getTreeState().selectNode(item.getDefaultModelObject(), false);					
					
				}
			}
			if (nonEmpty && parentItem.getChildren().isEmpty())
			{
				invalidateNode(parent, true);
			}
		}
	}

