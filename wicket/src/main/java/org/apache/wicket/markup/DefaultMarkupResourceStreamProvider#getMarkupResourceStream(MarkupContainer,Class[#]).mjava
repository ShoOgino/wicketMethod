	/**
	 * Create a new markup resource stream for the container.
	 * <p>
	 * Note: it will only called once, the IResourceStream will be cached by MarkupCache.
	 * <p>
	 * Note: IResourceStreamLocators should be used in case the strategy to find a markup resource
	 * should be extended for ALL components of your application.
	 * 
	 * @see org.apache.wicket.util.resource.locator.IResourceStream
	 * @see org.apache.wicket.markup.DefaultMarkupResourceStreamProvider
	 * 
	 * @param container
	 * @param containerClass
	 *            The container the markup should be associated with
	 * @return A IResourceStream if the resource was found
	 */
	public IResourceStream getMarkupResourceStream(final MarkupContainer container,
		Class<?> containerClass)
	{
		// Get locator to search for the resource
		final IResourceStreamLocator locator = Application.get()
			.getResourceSettings()
			.getResourceStreamLocator();

		String style = container.getStyle();
		String variation = container.getVariation();
		Locale locale = container.getLocale();
		String ext = container.getMarkupType().getExtension();

		// Markup is associated with the containers class. Walk up the class
		// hierarchy up to MarkupContainer to find the containers markup
		// resource.
		while (containerClass != MarkupContainer.class)
		{
			String path = containerClass.getName().replace('.', '/');
			IResourceStream resourceStream = locator.locate(container.getClass(), path, style,
				variation, locale, ext, false);

			// Did we find it already?
			if (resourceStream != null)
			{
				return new MarkupResourceStream(resourceStream, new ContainerInfo(container),
					containerClass);
			}

			// Walk up the class hierarchy one level, if markup has not
			// yet been found
			containerClass = containerClass.getSuperclass();
		}

		return null;
	}

