	/**
	 * Construct.
	 * 
	 * @param id
	 *            component id
	 * @param referer
	 *            the class that is referring; is used as the relative root for getting the resource
	 * @param file
	 *            model that supplies the relative location of the packaged file. Must return an
	 *            instance of {@link String}
	 * @param attributeToReplace
	 *            the attribute to replace of the target tag
	 */
	public PackagedResourceReference(final String id, final Class<?> referer,
		final IModel<String> file, final String attributeToReplace)
	{
		super(id);

		if (referer == null)
		{
			throw new IllegalArgumentException("Referer may not be null");
		}
		if (file == null)
		{
			throw new IllegalArgumentException("File may not be null");
		}
		if (attributeToReplace == null)
		{
			throw new IllegalArgumentException("AttributeToReplace may not be null");
		}

		IModel<String> srcReplacement = new Model<String>()
		{
			private static final long serialVersionUID = 1L;

			@Override
			public String getObject()
			{
				String str = file.getObject();
				if (str == null)
				{
					throw new IllegalArgumentException("The model must provide a non-null object");
				}
				// can this check be safely removed?
				if (!(str instanceof String))
				{
					throw new IllegalArgumentException("The model must provide a string");
				}
				String f = getConverter(String.class).convertToString(str, getLocale());
				ResourceReference ref = new ResourceReference(referer, f, getLocale(), getStyle());
				CharSequence url = urlFor(ref);
				return url != null ? url.toString() : null;
			}
		};
		add(new AttributeModifier(attributeToReplace, true, srcReplacement));
	}

