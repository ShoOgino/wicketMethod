	/**
	 * Append an additional hidden input tag to support anchor tags that can submit a form.
	 * 
	 * @param markupStream
	 *            The markup stream
	 * @param openTag
	 *            The open tag for the body
	 */
	@Override
	protected void onComponentTagBody(final MarkupStream markupStream, final ComponentTag openTag)
	{
		if (isRootForm())
		{
			// get the hidden field id
			String nameAndId = getHiddenFieldId();

			// render the hidden field
			AppendingStringBuffer buffer = new AppendingStringBuffer(
				"<div style=\"display:none\"><input type=\"hidden\" name=\"").append(nameAndId)
				.append("\" id=\"")
				.append(nameAndId)
				.append("\" />");

			// if it's a get, did put the parameters in the action attribute,
			// and have to write the url parameters as hidden fields
			if (encodeUrlInHiddenFields())
			{
				String url = urlFor(IFormSubmitListener.INTERFACE).toString();
				int i = url.indexOf('?');
				String[] params = ((i > -1) ? url.substring(i + 1) : url).split("&");

				writeParamsAsHiddenFields(params, buffer);
			}
			buffer.append("</div>");
			getResponse().write(buffer);

			// if a default submitting component was set, handle the rendering of that
			if (defaultSubmittingComponent instanceof Component)
			{
				final Component< ? > submittingComponent = (Component< ? >)defaultSubmittingComponent;
				if (submittingComponent.isVisibleInHierarchy() && submittingComponent.isEnabled())
				{
					appendDefaultButtonField(markupStream, openTag);
				}
			}
		}

		// do the rest of the processing
		super.onComponentTagBody(markupStream, openTag);
	}

