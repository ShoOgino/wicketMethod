	/**
	 * Inserts the string representation of the <code>char</code> argument into this string
	 * buffer.
	 * <p>
	 * The second argument is inserted into the contents of this string buffer at the position
	 * indicated by <code>offset</code>. The length of this string buffer increases by one.
	 * <p>
	 * The overall effect is exactly as if the argument were converted to a string by the method
	 * {@link String#valueOf(char)} and the character in that string were then
	 * {@link #insert(int, String) inserted} into this <code>AppendingStringBuffer</code> object
	 * at the position indicated by <code>offset</code>.
	 * <p>
	 * The offset argument must be greater than or equal to <code>0</code>, and less than or
	 * equal to the length of this string buffer.
	 * 
	 * @param offset
	 *            the offset.
	 * @param c
	 *            a <code>char</code>.
	 * @return a reference to this <code>AppendingStringBuffer</code> object.
	 * @exception IndexOutOfBoundsException
	 *                if the offset is invalid.
	 * @see java.lang.StringBuffer#length()
	 */
	public AppendingStringBuffer insert(int offset, char c)
	{
		int newcount = count + 1;
		if (newcount > value.length)
		{
			expandCapacity(newcount);
		}
		System.arraycopy(value, offset, value, offset + 1, count - offset);
		value[offset] = c;
		count = newcount;
		return this;
	}

