	/**
	 * Simulates the firing of an Ajax event. You add an Ajax event to a <code>Component</code> by
	 * using:
	 * 
	 * <pre>
	 *     ...
	 *     component.add(new AjaxEventBehavior(&quot;ondblclick&quot;) {
	 *         public void onEvent(AjaxRequestTarget) {}
	 *     });
	 *     ...
	 * </pre>
	 * 
	 * You can then test that the code inside <code>onEvent</code> actually does what it's supposed
	 * to, using the <code>WicketTester</code>:
	 * 
	 * <pre>
	 *     ...
	 *     tester.executeAjaxEvent(component, &quot;ondblclick&quot;);
	 *     // Test that the code inside onEvent is correct.
	 *     ...
	 * </pre>
	 * 
	 * This also works with <code>AjaxFormSubmitBehavior</code>, where it will "submit" the
	 * <code>Form</code> before executing the command.
	 * <p>
	 * PLEASE NOTE! This method doesn't actually insert the <code>Component</code> in the client DOM
	 * tree, using Javascript.
	 * 
	 * 
	 * @param component
	 *            the <code>Component</code> that has the <code>AjaxEventBehavior</code> we want to
	 *            test. If the <code>Component</code> is <code>null</code>, the test will fail.
	 * @param event
	 *            the event to simulate being fired. If <code>event</code> is <code>null</code>, the
	 *            test will fail.
	 */
	public void executeAjaxEvent(Component component, String event)
	{
		String failMessage = "Can't execute event on a component which is null.";
		notNull(failMessage, component);

		failMessage = "event must not be null";
		notNull(failMessage, event);

		// Run through all the behavior and select the LAST ADDED behavior which
		// matches the event parameter.
		AjaxEventBehavior ajaxEventBehavior = null;
		List<IBehavior> behaviors = component.getBehaviors();
		for (IBehavior behavior : behaviors)
		{
			// AjaxEventBehavior is the one to look for
			if (behavior instanceof AjaxEventBehavior)
			{
				AjaxEventBehavior tmp = (AjaxEventBehavior)behavior;

				if (event.equals(tmp.getEvent()))
				{
					ajaxEventBehavior = tmp;
				}
			}
		}

		// If there haven't been found any event behaviors on the component
		// which matches the parameters we fail.
		failMessage = "No AjaxEventBehavior found on component: " + component.getId() +
			" which matches the event: " + event;
		notNull(failMessage, ajaxEventBehavior);

		// initialize the request only if needed to allow the user to pass
		// request parameters, see
		// WICKET-254
		WebRequestCycle requestCycle;
		if (RequestCycle.get() == null)
		{
			requestCycle = setupRequestAndResponse(true);
		}
		else
		{
			requestCycle = (WebRequestCycle)RequestCycle.get();
		}
		// when the requestcycle is not created via setupRequestAndResponse(true), it can happen
		// that the request is not an ajax request -> we have to set the header manually
		if (!requestCycle.getWebRequest().isAjax())
		{
			HttpServletRequest req = requestCycle.getWebRequest().getHttpServletRequest();
			if (req instanceof MockHttpServletRequest)
			{
				((MockHttpServletRequest)req).addHeader("Wicket-Ajax", "Yes");
			}
		}

		// If the event is an FormSubmitBehavior then also "submit" the form
		if (ajaxEventBehavior instanceof AjaxFormSubmitBehavior)
		{
			AjaxFormSubmitBehavior ajaxFormSubmitBehavior = (AjaxFormSubmitBehavior)ajaxEventBehavior;
			submitAjaxFormSubmitBehavior(ajaxFormSubmitBehavior);
		}

		ajaxEventBehavior.onRequest();

		// process the request target
		processRequestCycle(requestCycle);
	}

