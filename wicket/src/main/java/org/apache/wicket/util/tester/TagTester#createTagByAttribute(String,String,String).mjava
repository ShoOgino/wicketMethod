	/**
	 * Static factory method for creating a <code>TagTester</code> based on a tag found by an
	 * attribute with a specific value. Please note that it will return the first tag which matches
	 * the criteria. It's therefore good for attributes suck as "id" or "wicket:id", but only if
	 * "wicket:id" is unique in the specified markup.
	 * 
	 * @param markup
	 *            the markup to look for the tag to create the <code>TagTester</code> from
	 * @param attribute
	 *            the attribute which should be on the tag in the markup
	 * @param value
	 *            the value which the attribute must have
	 * @return the <code>TagTester</code> which matches the tag in the markup, that has the given
	 *         value on the given attribute
	 */
	public static TagTester createTagByAttribute(String markup, String attribute, String value)
	{
		TagTester tester = null;

		if (Strings.isEmpty(markup) == false && Strings.isEmpty(attribute) == false &&
			Strings.isEmpty(value) == false)
		{
			try
			{
				XmlPullParser parser = new XmlPullParser();
				parser.parse(markup);

				MarkupElement elm = null;
				XmlTag openTag = null;
				XmlTag closeTag = null;
				int level = 0;
				while ((elm = parser.nextTag()) != null && closeTag == null)
				{
					if (elm instanceof XmlTag)
					{
						XmlTag xmlTag = (XmlTag)elm;

						if (openTag == null)
						{
							IValueMap attributeMap = xmlTag.getAttributes();

							for (Iterator<Map.Entry<String, Object>> iter = attributeMap.entrySet()
								.iterator(); iter.hasNext();)
							{
								Map.Entry<String, Object> entry = iter.next();
								String attr = entry.getKey();
								if (attr.equals(attribute) && value.equals(entry.getValue()))
								{
									if (xmlTag.isOpen())
									{
										openTag = xmlTag;
									}
									else if (xmlTag.isOpenClose())
									{
										openTag = xmlTag;
										closeTag = xmlTag;
									}
								}
							}
						}
						else
						{
							if (xmlTag.isOpen() && xmlTag.getName().equals(openTag.getName()))
							{
								level++;
							}

							if (xmlTag.isClose())
							{
								if (xmlTag.getName().equals(openTag.getName()))
								{
									if (level == 0)
									{
										closeTag = xmlTag;
										closeTag.setOpenTag(openTag);
									}
									else
									{
										level--;
									}
								}
							}
						}
					}
				}

				if (openTag != null && closeTag != null)
				{
					tester = new TagTester(parser, openTag, closeTag);
				}
			}
			catch (Exception e)
			{
				// NOTE: IllegalStateException(Throwable) only exists since Java 1.5
				throw new WicketRuntimeException(e);
			}
		}

		return tester;
	}

