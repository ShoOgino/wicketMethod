	/**
	 * Interpolates the given variables <code>Map</code> and returns a
	 * <code>ResourceReference</code>.
	 * 
	 * @param variables
	 *            the variables to interpolate into the template
	 * @return a <code>ResourceReference</code> to the template encoded as a resource with the given
	 *         variables interpolated
	 */
	public ResourceReference resourceReference(final Map<String, Object> variables)
	{
		final String uniqueName = sharedResourceName(variables);
		final String templateValue = template.asString(variables);
		final SharedResources sharedResources = Application.get().getSharedResources();
		final Resource resource = sharedResources.get(uniqueName);
		if (resource == null)
		{
			final Resource newResource = new Resource()
			{
				private static final long serialVersionUID = 1L;

				/**
				 * @see org.apache.wicket.Resource#getResourceStream()
				 */
				@Override
				public IResourceStream getResourceStream()
				{
					return new AbstractStringResourceStream()
					{
						private static final long serialVersionUID = 1L;

						@Override
						protected String getString()
						{
							return templateValue;
						}

					};
				}
			};
			sharedResources.add(uniqueName, newResource);
		}
		return new ResourceReference(scopeRef.get(), uniqueName);
	}

