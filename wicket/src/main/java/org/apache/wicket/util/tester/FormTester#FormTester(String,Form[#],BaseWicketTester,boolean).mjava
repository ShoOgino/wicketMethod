	/**
	 * @see WicketTester#newFormTester(String)
	 * 
	 * @param path
	 *            path to <code>FormComponent</code>
	 * @param workingForm
	 *            <code>FormComponent</code> to be tested
	 * @param wicketTester
	 *            <code>WicketTester</code> that creates <code>FormTester</code>
	 * @param fillBlankString
	 *            specifies whether to fill child <code>TextComponent</code>s with blank
	 *            <code>String</code>s
	 */
	protected FormTester(final String path, final Form<?> workingForm,
		final BaseWicketTester wicketTester, final boolean fillBlankString)
	{
		this.path = path;
		this.workingForm = workingForm;
		tester = wicketTester;

		// fill blank String for Text Component.
		workingForm.visitFormComponents(new FormComponent.AbstractVisitor<Void>()
		{
			@SuppressWarnings("unchecked")
			@Override
			public void onFormComponent(final FormComponent<?> formComponent, IVisit<Void> visit)
			{
				// do nothing for invisible or disabled component -- the browser would not send any
// parameter
				// for a disabled component
				if (!(formComponent.isVisibleInHierarchy() && formComponent.isEnabledInHierarchy()))
				{
					return;
				}

				// if component is text field and do not have exist value, fill
				// blank String if required
				if (formComponent instanceof AbstractTextComponent)
				{
					if (Strings.isEmpty(getFormComponentValue(formComponent)))
					{
						if (fillBlankString)
						{
							setFormComponentValue(formComponent, "");
						}
					}
					else
					{
						setFormComponentValue(formComponent, getFormComponentValue(formComponent));
					}
				}
				else if ((formComponent instanceof DropDownChoice) ||
					(formComponent instanceof RadioChoice) || (formComponent instanceof CheckBox))
				{
					setFormComponentValue(formComponent, getFormComponentValue(formComponent));
				}
				else if (formComponent instanceof ListMultipleChoice)
				{
					final String[] modelValues = getFormComponentValue(formComponent).split(
						FormComponent.VALUE_SEPARATOR);
					for (String modelValue : modelValues)
					{
						addFormComponentValue(formComponent, modelValue);
					}
				}
				else if (formComponent instanceof CheckGroup)
				{
					final Collection<?> checkGroupValues = (Collection<?>)formComponent.getDefaultModelObject();
					formComponent.visitChildren(Check.class, new IVisitor<Component, Void>()
					{
						public void component(final Component component, final IVisit<Void> visit)
						{
							if (checkGroupValues.contains(component.getDefaultModelObject()))
							{
								addFormComponentValue(formComponent,
									getFormComponentValue((Check<?>)component));
							}
						}
					});
				}
				else if (formComponent instanceof RadioGroup)
				{
					// TODO 1.5: see if all these transformations can be factored out into
					// checkgroup/radiogroup by them implementing some sort of interface {
					// getValue(); } otherwise all these implementation details leak into the tester
					final Object value = formComponent.getDefaultModelObject();
					if (value != null)
					{
						formComponent.visitChildren(Radio.class, new IVisitor<Component, Void>()
						{
							public void component(final Component component,
								final IVisit<Void> visit)
							{
								if (value.equals(component.getDefaultModelObject()))
								{
									addFormComponentValue(formComponent,
										getFormComponentValue((Radio<?>)component));
									visit.stop();
								}
								else
								{
									visit.dontGoDeeper();
								}
							}
						});
					}
				}
			}

			private String getFormComponentValue(final FormComponent<?> formComponent)
			{
				boolean oldEscape = formComponent.getEscapeModelStrings();
				formComponent.setEscapeModelStrings(false);
				String val = formComponent.getValue();
				formComponent.setEscapeModelStrings(oldEscape);
				return val;
			}

			private String getFormComponentValue(final Check<?> formComponent)
			{
				boolean oldEscape = formComponent.getEscapeModelStrings();
				formComponent.setEscapeModelStrings(false);
				String val = formComponent.getValue();
				formComponent.setEscapeModelStrings(oldEscape);
				return val;
			}

			private String getFormComponentValue(final Radio<?> formComponent)
			{
				boolean oldEscape = formComponent.getEscapeModelStrings();
				formComponent.setEscapeModelStrings(false);
				String val = formComponent.getValue();
				formComponent.setEscapeModelStrings(oldEscape);
				return val;
			}
		});
		workingForm.detach();
	}

