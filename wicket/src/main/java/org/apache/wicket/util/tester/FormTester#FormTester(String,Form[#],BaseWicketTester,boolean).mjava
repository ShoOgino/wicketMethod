	/**
	 * @see WicketTester#newFormTester(String)
	 * 
	 * @param path
	 *            path to <code>FormComponent</code>
	 * @param workingForm
	 *            <code>FormComponent</code> to be tested
	 * @param wicketTester
	 *            <code>WicketTester</code> that creates <code>FormTester</code>
	 * @param fillBlankString
	 *            specifies whether to fill child <code>TextComponent</code>s with blank
	 *            <code>String</code>s
	 */
	protected FormTester(final String path, final Form<?> workingForm,
		final BaseWicketTester wicketTester, final boolean fillBlankString)
	{
		this.path = path;
		this.workingForm = workingForm;
		baseWicketTester = wicketTester;

		// fill blank String for Text Component.
		workingForm.visitFormComponents(new FormComponent.AbstractVisitor()
		{
			@SuppressWarnings("unchecked")
			@Override
			public void onFormComponent(final FormComponent<?> formComponent)
			{
				// do nothing for invisible component
				if (!formComponent.isVisibleInHierarchy())
				{
					return;
				}

				// if component is text field and do not have exist value, fill
				// blank String if required
				if (formComponent instanceof AbstractTextComponent)
				{
					if (Strings.isEmpty(formComponent.getValue()))
					{
						if (fillBlankString)
						{
							setFormComponentValue(formComponent, "");
						}
					}
					else
					{
						setFormComponentValue(formComponent, formComponent.getValue());
					}
				}
				else if ((formComponent instanceof DropDownChoice) ||
					(formComponent instanceof RadioChoice) || (formComponent instanceof CheckBox))
				{
					setFormComponentValue(formComponent, formComponent.getValue());
				}
				else if (formComponent instanceof ListMultipleChoice)
				{
					final String[] modelValues = formComponent.getValue().split(
						FormComponent.VALUE_SEPARATOR);
					for (String modelValue : modelValues)
					{
						addFormComponentValue(formComponent, modelValue);
					}
				}
				else if (formComponent instanceof CheckGroup)
				{
					final Collection<?> checkGroupValues = (Collection<?>)formComponent.getDefaultModelObject();
					formComponent.visitChildren(Check.class, new IVisitor<Component>()
					{
						public Object component(Component component)
						{
							if (checkGroupValues.contains(component.getDefaultModelObject()))
							{
								addFormComponentValue(formComponent,
									((Check<?>)component).getValue());
							}
							return CONTINUE_TRAVERSAL;
						}
					});
				}
				else if (formComponent instanceof RadioGroup)
				{
					// TODO 1.5: see if all these transformations can be factored out into
					// checkgroup/radiogroup by them implementing some sort of interface {
					// getValue(); } otherwise all these implementation details leak into the tester
					final Object value = formComponent.getDefaultModelObject();
					if (value != null)
					{
						formComponent.visitChildren(Radio.class, new IVisitor<Component>()
						{
							public Object component(Component component)
							{
								if (value.equals(component.getDefaultModelObject()))
								{
									addFormComponentValue(formComponent,
										((Radio<?>)component).getValue());
									return STOP_TRAVERSAL;
								}
								return CONTINUE_TRAVERSAL_BUT_DONT_GO_DEEPER;
							}
						});
					}
				}
			}

		});
		workingForm.detach();
	}

