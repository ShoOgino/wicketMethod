	/**
	 * Returns a URL that references a given interface on a component. When the URL is requested
	 * from the server at a later time, the interface will be called. A URL returned by this method
	 * will not be stable across sessions and cannot be bookmarked by a user.
	 * 
	 * @param component
	 *            The component to reference
	 * @param listener
	 *            The listener interface on the component
	 * @param params
	 *            Additional parameters to pass to the page
	 * @return A URL that encodes a page, component and interface to call
	 */
	public final CharSequence urlFor(final Component<?> component,
		final RequestListenerInterface listener, ValueMap params)
	{
		// Get Page holding component and mark it as stateful.
		final Page<?> page = component.getPage();
		final IRequestTarget target;
		if (listener != IRedirectListener.INTERFACE && component.isStateless() &&
			page.isBookmarkable() && page.getStatelessHint())
		{
			PageParameters pageParameters = page.getPageParameters();
			if (pageParameters == null)
			{
				pageParameters = new PageParameters();
			}

			if (params != null)
			{
				Iterator<Map.Entry<String, Object>> it = params.entrySet().iterator();
				while (it.hasNext())
				{
					final Map.Entry<String, Object> entry = it.next();
					final String key = entry.getKey();
					final String value = entry.getValue().toString();
					// Do not encode values here. It is the encoder's job
					// to do the endoding. This leads to double encoding
					// - Doug Donohoe
					// @see https://issues.apache.org/jira/browse/WICKET-1627
					pageParameters.add(key, value);
				}
			}

			target = new BookmarkableListenerInterfaceRequestTarget(page.getPageMapName(),
				page.getClass(), pageParameters, component, listener);
			return encodeUrlFor(target);
		}
		else
		{
			page.setPageStateless(Boolean.FALSE);

			// make session non-volatile if not already so
			final Session session = getSession();
			if (session.isTemporary())
			{
				session.bind();
			}

			// Get the listener interface name
			target = new ListenerInterfaceRequestTarget(page, component, listener);

			CharSequence url = encodeUrlFor(target);

			if (params != null)
			{
				AppendingStringBuffer buff = new AppendingStringBuffer(url);
                WebRequestEncoder encoder = new WebRequestEncoder(buff);
                for (Entry<String, Object> stringObjectEntry : params.entrySet())
                {
                    final String key = stringObjectEntry.getKey();
                    final String value = stringObjectEntry.getValue().toString();
                    encoder.addValue(key, value);
                }

				url = buff;
			}
			return url;
		}
	}

