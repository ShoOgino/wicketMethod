	/**
	 * Returns a URL that references a given interface on a given behavior of a component. When the
	 * URL is requested from the server at a later time, the interface on the behavior will be
	 * called. A URL returned by this method will not be stable across sessions and cannot be
	 * bookmarked by a user.
	 * 
	 * @param component
	 *            The component to reference
	 * @param behaviour
	 *            The behavior to reference
	 * @param listener
	 *            The listener interface on the component
	 * @return A URL that encodes a page, component, behavior and interface to call
	 */
	public final CharSequence urlFor(final Component component, final IBehavior behaviour,
		final RequestListenerInterface listener)
	{
		int index = component.getBehaviorsRawList().indexOf(behaviour);
		if (index == -1)
		{
			throw new IllegalArgumentException("Behavior " + this +
				" was not registered with this component: " + component.toString());
		}
		RequestParameters params = new RequestParameters();
		params.setBehaviorId(String.valueOf(index));
		if (request instanceof ServletWebRequest)
		{
			ServletWebRequest swr = (ServletWebRequest)request;
			// If we're coming in with an existing depth, use it. Otherwise,
			// compute from the URL. This provides correct behavior for repeated
			// AJAX requests: If we need to generate a URL within an AJAX
			// request for another one, it needs to be at the same depth as the
			// original AJAX request.
			int urlDepth = swr.getRequestParameters().getUrlDepth();
			params.setUrlDepth(urlDepth > -1 ? urlDepth : swr.getDepthRelativeToWicketHandler());
		}

		final IRequestTarget target = new BehaviorRequestTarget(component.getPage(), component,
			listener, params);
		return encodeUrlFor(target);
	}

