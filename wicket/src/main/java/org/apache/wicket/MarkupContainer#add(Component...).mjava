	/**
	 * Adds a child component to this container.
	 * 
	 * @param childs
	 *            The child(s)
	 * @throws IllegalArgumentException
	 *             Thrown if a child with the same id is replaced by the add operation.
	 * @return This
	 */
	public MarkupContainer add(final Component... childs)
	{
		for (Component child : childs)
		{
			if (child == null)
			{
				throw new IllegalArgumentException("argument child may not be null");
			}

			checkHierarchyChange(child);

			if (log.isDebugEnabled())
			{
				log.debug("Add " + child.getId() + " to " + this);
			}

			// Add to map
			addedComponent(child);
			if (put(child) != null)
			{
				throw new IllegalArgumentException(exceptionMessage("A child with id '" +
					child.getId() + "' already exists"));
			}

			// Check if the markup is available after the child has been added to the parent
			try
			{
				if ((getParent() != null) && (child.getMarkup() != null))
				{
					child.internalOnMarkupAttached();

					// Tell all children of "component" as well
					if (child instanceof MarkupContainer)
					{
						MarkupContainer container = (MarkupContainer)child;
						container.visitChildren(new IVisitor<Component>()
						{
							public Object component(final Component component)
							{
								return component.internalOnMarkupAttached()
									? CONTINUE_TRAVERSAL_BUT_DONT_GO_DEEPER : CONTINUE_TRAVERSAL;
							}
						});
					}
				}
			}
			catch (WicketRuntimeException exception)
			{
				// ignore
			}
		}
		return this;
	}

