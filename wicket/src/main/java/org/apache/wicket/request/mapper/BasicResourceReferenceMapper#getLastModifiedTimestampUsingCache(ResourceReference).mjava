	/**
	 * That method gets the last modification timestamp from the specified resource reference.
	 * <p/>
	 * The timestamp is cached in the meta data of the current request cycle to eliminate repeated
	 * lookups of the same resource reference which will harm performance.
	 * 
	 * @param resourceReference
	 *            resource reference
	 * 
	 * @return last modification timestamp or <code>null</code> if no timestamp provided
	 */
	protected Time getLastModifiedTimestampUsingCache(ResourceReference resourceReference)
	{
		// try to lookup current request cycle
		RequestCycle requestCycle = ThreadContext.getRequestCycle();

		// no request cycle: this should not happen unless we e.g. run a plain test case without
// WicketTester
		if (requestCycle == null)
			return resourceReference.getLastModified();

		// retrieve cache from current request cycle
		Map<ResourceReference, Time> cache = requestCycle.getMetaData(TIMESTAMP_KEY);

		// create it on first call
		if (cache == null)
		{
			cache = new HashMap<ResourceReference, Time>();
			requestCycle.setMetaData(TIMESTAMP_KEY, cache);
		}

		final Time lastModified;

		// lookup timestamp from cache (may contain NULL values which are valid)
		if (cache.containsKey(resourceReference))
		{
			lastModified = cache.get(resourceReference);
		}
		else
		{
			// otherwise retrieve timestamp from resource
			lastModified = resourceReference.getLastModified();

			// and put it in cache
			cache.put(resourceReference, lastModified);
		}
		return lastModified;
	}

