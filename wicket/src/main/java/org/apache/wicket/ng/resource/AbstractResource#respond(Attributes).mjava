	public final void respond(Attributes attributes)
	{
		ResourceData data = newResourceData(attributes);

		WebRequest request = (WebRequest)attributes.getRequest();
		WebResponse response = (WebResponse)attributes.getResponse();

		if (!data.dataNeedsToBeWritten(attributes))
		{
			response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
			return;
		}
		else if (data.getErrorCode() != null)
		{
			response.sendError(data.getErrorCode(), null);
		}
		else
		{
			if (data.getWriteCallback() == null)
			{
				throw new IllegalStateException(
					"ResourceData#setWriteCallback must be called for AbstractResource.");
			}

			String fileName = data.getFileName();
			ContentDisposition disposition = data.getContentDisposition();
			String mimeType = data.getContentType();
			String encoding = null;
			Date lastModified = data.getLastModified();

			if (mimeType != null && mimeType.indexOf("text") != -1)
			{
				encoding = data.getTextEncoding();
			}

			long contentLength = data.getContentLength();

			// 1. Content Disposition

			if (ContentDisposition.ATTACHMENT == disposition)
			{
				response.setAttachmentHeader(fileName);
			}
			else if (ContentDisposition.INLINE == disposition)
			{
				response.setInlineHeader(fileName);
			}

			// 2. Mime Type (+ encoding)

			if (mimeType != null)
			{
				if (encoding == null)
				{
					response.setContentType(mimeType);
				}
				else
				{
					response.setContentType(mimeType + "; charset=" + encoding);
				}
			}

			// 3. Last Modified

			if (lastModified != null)
			{
				response.setLastModifiedTime(lastModified.getTime());
			}

			// 4. Caching

			configureCache(request, response, data, attributes);

			// 5. Content Length

			if (contentLength != -1)
			{
				response.setContentLength(contentLength);
			}

			// 6. Write Data
			data.getWriteCallback().writeData(attributes);
		}
	}

