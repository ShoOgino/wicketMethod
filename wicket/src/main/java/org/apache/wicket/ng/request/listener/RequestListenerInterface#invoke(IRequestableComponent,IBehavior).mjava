	/**
	 * Invokes a given interface on a component's behavior.
	 * 
	 * @param component
	 *            The component
	 * @param behavior
	 */
	public final void invoke(final IRequestableComponent component, final IBehavior behavior)
	{
		if (!component.canCallListenerInterface())
		{
			// just return so that we have a silent fail and just re-render the
			// page
			log.info("component not enabled or visible; ignoring call. Component: " + component);
			return;
		}

		try
		{
			// Invoke the interface method on the component
			method.invoke(behavior, new Object[] { });
		}
		catch (InvocationTargetException e)
		{
			// Honor redirect exception contract defined in IPageFactory
			// TODO
			if (/*
				 * e.getTargetException() instanceof AbstractRestartResponseException ||
				 * e.getTargetException() instanceof AuthorizationException ||
				 */
			e.getTargetException() instanceof WicketRuntimeException)
			{
				throw (RuntimeException)e.getTargetException();
			}
			throw new WicketRuntimeException("Method " + method.getName() + " of " +
				method.getDeclaringClass() + " targeted at behavior " + behavior +
				" on component " + component + " threw an exception", e);
		}
		catch (Exception e)
		{
			throw new WicketRuntimeException("Method " + method.getName() + " of " +
				method.getDeclaringClass() + " targeted at behavior " + behavior +
				" on component " + component + " threw an exception", e);
		}
	}

