	/**
	 * Gets whether the page is stateless. Components on stateless page must not render any
	 * statefull urls, and components on statefull page must not render any stateless urls.
	 * Statefull urls are urls, which refer to a certain (current) page instance.
	 * 
	 * @return Whether this page is stateless
	 */
	public final boolean isPageStateless()
	{
		if (isBookmarkable() == false)
		{
			stateless = Boolean.FALSE;
			if (getStatelessHint())
			{
				log.warn("Page '" + this + "' is not stateless because it is not bookmarkable, " +
					"but the stateless hint is set to true!");
			}
		}

		if (getStatelessHint() == false)
		{
			return false;
		}

		if (stateless == null)
		{
			if (isStateless() == false)
			{
				stateless = Boolean.FALSE;
			}
		}

		if (stateless == null)
		{
			final Object[] returnArray = new Object[1];
			Boolean returnValue = visitChildren(Component.class, new IVisitor<Component, Boolean>()
			{
				public void component(final Component component, final IVisit<Boolean> visit)
				{
					if (!component.isStateless())
					{
						returnArray[0] = component;
						visit.stop(Boolean.FALSE);
					}
				}
			});
			if (returnValue == null)
			{
				stateless = Boolean.TRUE;
			}
			else if (returnValue instanceof Boolean)
			{
				stateless = returnValue;
			}

			// TODO (matej_k): The stateless hint semantics has been changed, this warning doesn't
			// work anymore. but we don't really have
			// alternative to this
			/*
			 * if (!stateless.booleanValue() && getStatelessHint()) { log.warn("Page '" + this + "'
			 * is not stateless because of '" + returnArray[0] + "' but the stateless hint is set to
			 * true!"); }
			 */
		}

		return stateless.booleanValue();
	}

