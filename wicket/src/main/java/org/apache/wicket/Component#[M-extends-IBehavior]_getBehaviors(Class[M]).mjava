	/**
	 * Gets the subset of the currently coupled {@link IBehavior}s that are of the provided type as
	 * a unmodifiable list. Returns an empty list rather than null if there are no behaviors coupled
	 * to this component.
	 * 
	 * @param type
	 *            The type or null for all
	 * @return The subset of the currently coupled behaviors that are of the provided type as a
	 *         unmodifiable list or null
	 * @param <M>
	 *            A class derived from IBehavior
	 */
	@SuppressWarnings("unchecked")
	protected <M extends IBehavior> List<M> getBehaviors(Class<M> type)
	{
		List<IBehavior> behaviors = getBehaviorsRawList();
		if (behaviors == null)
		{
			return Collections.emptyList();
		}

		List<M> subset = new ArrayList<M>(behaviors.size()); // avoid growing
		for (IBehavior behavior : behaviors)
		{
			if (behavior != null)
			{
				if (type == null)
				{
					subset.add((M)behavior);
				}
				else if (type.isAssignableFrom(behavior.getClass()))
				{
					subset.add(type.cast(behavior));
				}
			}
		}
		return Collections.unmodifiableList(subset);
	}

