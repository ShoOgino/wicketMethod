	/**
	 * Traverses all parent components of the given class in this container, calling the visitor's
	 * visit method at each one.
	 * 
	 * @param <C>
	 * 
	 * @param c
	 *            Class
	 * @param visitor
	 *            The visitor to call at each parent of the given type
	 * @return First non-null value returned by visitor callback
	 */
	public final <C extends MarkupContainer<?>> Object visitParents(final Class<C> c,
		final IVisitor<Component<?>> visitor)
	{
		// Start here
		Component<?> current = this;

		// Walk up containment hierarchy
		while (current != null)
		{
			// Is current an instance of this class?
			if (c.isInstance(current))
			{
				final Object object = visitor.component(current);
				if (object != IVisitor.CONTINUE_TRAVERSAL)
				{
					return object;
				}
			}

			// Check parent
			current = current.getParent();
		}
		return null;
	}

