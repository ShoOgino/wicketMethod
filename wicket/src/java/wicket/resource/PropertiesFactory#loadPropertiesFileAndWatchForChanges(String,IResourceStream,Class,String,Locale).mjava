	/**
	 * Load properties file from an IResourceStream and add an
	 * {@link IChangeListener}to the {@link ModificationWatcher} so that if the
	 * resource changes, we can reload it automatically.
	 * 
	 * @param key
	 *            The key for the resource
	 * @param resourceStream
	 *            The properties file stream to load and begin to watch
	 * @param componentClass
	 *            The class that resources are bring loaded for
	 * @param style
	 *            The style to load resources for (see {@link wicket.Session})
	 * @param locale
	 *            The locale to load reosurces for
	 * @return The map of loaded resources
	 */
	private final Properties loadPropertiesFileAndWatchForChanges(final String key,
			final IResourceStream resourceStream, final Class componentClass, final String style,
			final Locale locale)
	{
		// Watch file in the future
		final ModificationWatcher watcher = Application.get().getResourceWatcher();
		if (watcher != null)
		{
			watcher.add(resourceStream, new IChangeListener()
			{
				public void onChange()
				{
					log.info("Reloading properties files from " + resourceStream);
					loadPropertiesFile(key, resourceStream, componentClass, style, locale);

					// Inform all listeners
					for(Iterator iter=afterReloadListeners.iterator(); iter.hasNext();)
					{
						IPropertiesReloadListener listener = (IPropertiesReloadListener)iter.next();
						try
						{
							listener.propertiesLoaded(key);
						}
						catch (Throwable ex)
						{
							log.error("PropertiesReloadListener throw an exception: " 
									+ ex.getMessage());
						}
					}
				}
			});
		}

		log.info("Loading properties files from " + resourceStream);
		return loadPropertiesFile(key, resourceStream, componentClass, style, locale);
	}

