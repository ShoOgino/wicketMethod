	/**
	 * Get the string resource for the given combination of component, key,
	 * locale and style. The information is obtained from a resource bundle
	 * associated with the provided component instance (or one of its parent
	 * containers or one of its parent classes). The supplied component may be
	 * null, which indicates that this loader should be skipped and a value of
	 * null will be returned. If the supplied component is not an instance of
	 * <code>Page</code> and has not been previously added to a
	 * <code>Page</code> then an exception will be thrown.
	 * 
	 * @param component
	 *            The component to use to find resources to be loaded
	 * @param key
	 *            The key to obtain the string for
	 * @param locale
	 *            The locale identifying the resource set to select the strings
	 *            from
	 * @param style
	 *            The (optional) style identifying the resource set to select
	 *            the strings from (see {@link wicket.Session})
	 * @return The string resource value or null if resource not found
	 */
	public String loadStringResource(final Component component, final String key,
			final Locale locale, final String style)
	{
		if (component == null)
		{
			return null;
		}

		if (component.getPage() == null)
		{
			throw new IllegalArgumentException("Component without associated Page: "
					+ component.toString(true));
		}

		// Build search stack
		Stack searchStack = new Stack();
		searchStack.push(component);

		String prefixKey = key;
		if (!(component instanceof Page))
		{
			prefixKey = component.getId() + "." + key;
			MarkupContainer c = component.getParent();
			while (true)
			{
				searchStack.push(c);
				if (c instanceof Page)
				{
					break;
				}

				prefixKey = c.getId() + "." + prefixKey;
				c = c.getParent();
			}
		}

		// Iterate through the search stack
		String value = null;
		while (!searchStack.isEmpty())
		{
			Component comp = (Component)searchStack.pop();
			Class cc = comp.getClass();

			// Load the resource associated with the class, the key, the
			// locale and the style.
			// prefixKey = component relativ path + component id
			value = loadStringResourceByClass(cc, prefixKey, locale, style);
			if ((value == null) && (prefixKey.equals(key) == false))
			{
				value = loadStringResourceByClass(cc, key, locale, style);
			}

			if (value != null)
			{
				break;
			}

			prefixKey = Strings.afterFirst(prefixKey, '.');
		}

		// Return the resource value (may be null if resource was not found)
		return value;
	}

