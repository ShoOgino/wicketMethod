	/**
	 * Create a new markup filter chain and initialize with all default filters
	 * required.
	 * 
	 * @return a preconfigured markup filter chain
	 */
	private final IMarkupFilter newFilterChain()
	{
		// Chain together all the different markup filters and configure them
		IMarkupFilter filter = new WicketTagIdentifier(markup, xmlParser);

		filter = new TagTypeHandler(filter);
		filter = new HtmlHandler(filter);
		filter = new WicketRemoveTagHandler(filter);
		filter = new WicketLinkTagHandler(filter);
		filter = new WicketNamespaceHandler(filter, markup);

		// Provided the wicket component requesting the markup is known ...
		final MarkupResourceStream resource = markup.getResource();
		if (resource != null) 
		{
			final ContainerInfo containerInfo = resource.getContainerInfo();
			if (containerInfo != null)
			{
				if (WicketMessageTagHandler.enable)
				{
					filter = new WicketMessageTagHandler(filter, containerInfo);
				}
	
				filter = new BodyOnLoadHandler(filter);
	
				// Pages require additional handlers
				if (Page.class.isAssignableFrom(containerInfo.getContainerClass()))
				{
					filter = new HtmlHeaderSectionHandler(this.markup, filter);
				}
				
				filter = new HeadForceTagIdHandler(filter, containerInfo.getContainerClass());
			}
		}

		return filter;
	}

