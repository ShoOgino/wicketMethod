    /**
     * Scans the given markup string and extracts balancing tags.
     * @return An immutable list of immutable MarkupElement elements
     * @throws ParseException Thrown if markup is malformed or tags don't balance
     */
    private List parseMarkup() throws ParseException
    {
        final List autoAddList = new ArrayList();
        
        this.markupFilterChain = newFilterChain(autoAddList);
        initFilterChain();
        
        // List to return
        final List list = new ArrayList();

        // true, if all remaining tags shall be ignored
        boolean stripRemainingElements = false;

        // Loop through tags
        for (ComponentTag tag; null != (tag = (ComponentTag)markupFilterChain.nextTag());)
        {
            boolean add = (tag.getId() != null);
            if (!add && tag.getXmlTag().isClose())
            {
                add = ((tag.getOpenTag() != null) && (tag.getOpenTag().getId() != null));
            }
            
            // Determine wicket namespace: <html xmlns:wicket="http://wicket.sourceforge.net">
			if (tag.isOpen() && "html".equals(tag.getName().toLowerCase()))
			{
			    determineWicketNamespace(tag);
			}

            // Add tag to list?
            if (add || (autoAddList.size() > 0))
            {
                final CharSequence text =
                    	xmlParser.getInputFromPositionMarker(tag.getPos());

                // Add text from last position to tag position
                if (text.length() > 0)
                {
                    String rawMarkup = text.toString();

                    if (stripComments)
                    {
                        rawMarkup = rawMarkup.replaceAll("<!--(.|\n|\r)*?-->", "");
                    }

                    if (compressWhitespace)
                    {
                        rawMarkup = rawMarkup.replaceAll("[ \\t]+", " ");
                        rawMarkup = rawMarkup.replaceAll("( ?[\\r\\n] ?)+", "\n");
                    }

                    list.add(new RawMarkup(rawMarkup));
                }


                if ((add == false) && (autoAddList.size() > 0))
                {
                    xmlParser.setPositionMarker(tag.getPos());
                }

                // This is a special hack. If autoAddList contains a NULL 
                // object, all already existing tags are REMOVED from the
                // list AND any trailing raw markup will be ignored. This
                // is used for <wicket:extend> where everything before
                // the tag and after the tag shall be removed.
                if ((autoAddList.size() > 0) && (autoAddList.get(0) == null))
                {
                    list.clear();
                    stripRemainingElements = true;
                }
                else
                {
                    list.addAll(autoAddList);
                }
                
                autoAddList.clear();
            }
            
            if (add)
            {
                // Add to list unless preview component tag remover flagged as removed
                if (!WicketRemoveTagHandler.IGNORE.equals(tag.getId()))
                {
	                list.add(tag);
                }
                
                xmlParser.setPositionMarker();
            }
        }

        // Add tail?
        if (stripRemainingElements == false)
        {
	        final CharSequence text = xmlParser.getInputFromPositionMarker(-1);
	        if (text.length() > 0)
	        {
	            list.add(new RawMarkup(text));
	        }
        }
        
        // Make all tags immutable. Note: We can not make tag immutable 
        // just prior to adding to the list, because <wicket:param> 
        // needs to modify its preceding tag (add the attributes). And 
        // because WicketParamTagHandler and ComponentTag are not in the 
        // same package, WicketParamTagHandler is not able to modify the
        // default protected variables of ComponentTag, either.
        for (int i=0; i < list.size(); i++)
        {
            MarkupElement elem = (MarkupElement) list.get(i);
            if (elem instanceof ComponentTag)
            {
                ((ComponentTag)elem).makeImmutable();
            }
        }
        
        // Return immutable list of all MarkupElements
        return Collections.unmodifiableList(list);
    }

