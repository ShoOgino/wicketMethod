	/**
	 * Get the markup fragment associated with the id. The id might as well be a
	 * path to get grand child markup.
	 * 
	 * @param id
	 *            The id of the child tag
	 * @return Markup fragment
	 */
	public final MarkupFragment getChildFragment(final String id)
	{
		if ((id == null) || (id.length() == 0))
		{
			return null;
		}

		// If id has not further path elements, than ...
		if (id.indexOf(Component.PATH_SEPARATOR) == -1)
		{
			// .. search all (immediate) child fragments
			for (MarkupElement elem : this)
			{
				if (elem instanceof MarkupFragment)
				{
					MarkupFragment fragment = (MarkupFragment)elem;
					ComponentTag tag = (ComponentTag)fragment.get(0);
					String tagId = tag.getId();
					if ((tagId != null) && tagId.equals(id))
					{
						return fragment;
					}
					/*
					 * if this component tag represents an auto component we
					 * need to recurse into it because auto components are
					 * transparent from the point of view of the markup path of
					 * a component
					 * 
					 * eg <wicket:extend> generates an auto component that is
					 * not in the markup path expressions
					 * 
					 */
					if (tagId.startsWith(Component.AUTO_COMPONENT_PREFIX))
					{
						MarkupFragment frag = fragment.getChildFragment(id);
						if (frag != null)
						{
							return frag;
						}
					}
				}
			}
		}
		else
		{
			// Split the 'id' into the first element (which is the immediate
			// child) and the remaining path. Get the immediate child and
			// recursively call getChildFragment() with the remaining path ids.
			String root = Strings.firstPathComponent(id, Component.PATH_SEPARATOR);
			MarkupFragment child = getChildFragment(root);
			if (child == null)
			{
				return null;
			}

			String remainingPath = Strings.afterFirst(id, Component.PATH_SEPARATOR);
			return child.getChildFragment(remainingPath);
		}

		return null;
	}

