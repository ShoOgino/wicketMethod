    /**
     * Automatically creates a ExternalPageLink component using the tag syntax:
     * "[autolink:parameters]", where parameters can be a list of comma separated key
     * value pairs, such as "x=9,y=foo".
     * 
     * @see wicket.markup.IComponentResolver#resolve(RequestCycle, MarkupStream, ComponentTag, Container)
     * @param cycle The current RequestCycle 
     * @param markupStream The current markupStream
     * @param tag The current component tag while parsing the markup
     * @param container The container parsing its markup
     * @return true, if componentName was handle by the resolver. False, otherwise  
     */
	public boolean resolve(final RequestCycle cycle, final MarkupStream markupStream,
			final ComponentTag tag, final Container container)
	{
	    // Get the component name to handle
	    final String componentName = tag.getComponentName();
	    
	    // The componentName may be [autolink] or [autolink:key=value, key2=value, ...]
        if (componentName.startsWith("[autolink")
                && ((componentName.charAt(9) == ']') || (componentName.charAt(9) == ':')))
        {
            // Autolinks are only supported with anchor tags
            if (!tag.getName().equalsIgnoreCase("a"))
            {
                markupStream.throwMarkupException(
                        "Automatic link can only be attached to an anchor tag");
            }
            
            // Try to find the Page matching the href
            resolveAutomaticLink(cycle.getPage(), markupStream, componentName, tag);

	        // Make the compnentName (page-)unique
            final String id = "[autolink]-" + autoIndex;
	        autoIndex ++;
	        
	        // Modify the tag's id-attribute
	        tag.attributes = new ValueMap(tag.attributes);
	        tag.attributes.put("id", id);
	        tag.attributes.makeImmutable();

	        // Create an external (bookmarkable) Link
	        final Link link = new ExternalPageLink(id, automaticLinkPageClass,
	                automaticLinkPageParameters);
			
	        // Add the link to the container
			container.add(link);
			if (log.isDebugEnabled()) 
			{
				log.debug("Added autolink " + link);
			}

			// Render the Link
			link.render(cycle);

			// Tell the container, we handled the componentName
			return true;
		}
	
        // We were not able to handle the componentName
        return false;
	}

