    /**
     * Reads and parses markup from a Resource such as a file.
     * @param resource The file
     * @return The markup
     * @throws ParseException
     * @throws IOException
     * @throws ResourceNotFoundException
     */
    public Markup read(final Resource resource, final Page autolinkBasePage) throws ParseException, IOException,
            ResourceNotFoundException
    {        
        // Set autolink base page
        this.autolinkBasePage = autolinkBasePage;

        // reset: Must come from markup
        this.encoding = null;
        
        try
        {
            final BufferedInputStream bin = new BufferedInputStream(resource.getInputStream(), 4000);
            if (!bin.markSupported())
            {
                throw new IOException("BufferedInputStream does not support mark/reset");
            }
            
            // read ahead buffer
            final int readAheadSize = 80;
            bin.mark(readAheadSize);
            
            // read-ahead the input stream, if it starts with <?xml encoding=".." ?>.
            // If yes, set this.encoding and return the character which follow it.
            // If not, return the whole line. determineEncoding will read-ahead
            // at max. the very first line of the markup
            this.encoding = determineEncoding(bin, readAheadSize);

            // Depending the encoding determine from the markup-file, read
            // the rest either with specific encoding or JVM default
            final String markup;
            if (this.encoding == null)
            {
                bin.reset();
                markup = Streams.readString(bin);
            }
            else
            {
                // Use the encoding as specified in <?xml encoding=".." ?>
                // Don't re-read <?xml ..> again
                markup = Streams.readString(bin, encoding);
            }

            return new Markup(resource, parseMarkup(markup));
        }
        finally
        {
            resource.close();
        }
    }

