	/**
	 * Load markup from an IResourceStream and add an {@link IChangeListener}to
	 * the {@link ModificationWatcher} so that if the resource changes, we can
	 * remove it from the cache automatically and subsequently reload when
	 * needed.
	 * 
	 * @param container
	 *            The original requesting markup container
	 * @param key
	 *            The key for the resource
	 * @param markupResourceStream
	 *            The markup stream to load and begin to watch
	 * @return The markup in the stream
	 */
	private final Markup loadMarkupAndWatchForChanges(final MarkupContainer container,
			final CharSequence key, final MarkupResourceStream markupResourceStream)
	{
		// Watch file in the future
		final ModificationWatcher watcher = application.getResourceSettings().getResourceWatcher();
		if (watcher != null)
		{
			watcher.add(markupResourceStream, new IChangeListener()
			{
				public void onChange()
				{
					log.info("Remove markup from cache: " + markupResourceStream);

					// Remove the markup from the cache. It will be reloaded
					// next time it the markup is requested.
					removeMarkup(key, markupResourceStream);
					watcher.remove(markupResourceStream);
				}
			});
		}

		log.info("Loading markup from " + markupResourceStream);
		return loadMarkup(container, key, markupResourceStream);
	}

