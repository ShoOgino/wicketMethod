    /**
     * Resolves the given tag's automaticLinkPageClass and automaticLinkPageParameters
     * variables by parsing the tag component name and then searching for a page class at
     * the relative URL specified by the href attribute of the tag. The href URL is
     * relative to the package containing the page where this component is contained.
     * @param page The page where the link is
     * @param markupStream Markup stream to use when throwing any exceptions
     * @param componentName the name of the component
     * @param tag the component tag
     * @return A BookmarkablePageLink to handle the href
     */
    private Link resolveAutomaticLink(final Page page, final MarkupStream markupStream,
    		final String componentName, final ComponentTag tag)
    {
        final String originalHref = tag.getAttributes().getString("href");

        final int pos = originalHref.indexOf(".html");
        if (pos <= 0)
        {
            markupStream.throwMarkupException(
            	"Expected to find '*.html' in href: " + originalHref);
        }
        
        String classPath = originalHref.substring(0, pos);
        PageParameters pageParameters = null;
        
        // ".html?" => 6 chars
        if ((classPath.length() + 6) < originalHref.length())
        {
            String queryString = originalHref.substring(classPath.length() + 6);
            pageParameters = new PageParameters(new ValueMap(queryString, "&"));
        }
        
        classPath = classPath.replaceAll("/", ".");
        classPath = page.getClass().getPackage().getName() + "." + classPath;
        
        Class clazz = page.getApplicationSettings().getDefaultClassResolver().resolveClass(classPath);

        // Make the componentName (page-)unique
        final String id = componentName + page.getAutoIndex();
        
        return new BookmarkablePageLink(id, clazz, pageParameters);
    }

