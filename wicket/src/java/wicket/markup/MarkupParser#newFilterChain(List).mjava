	/**
	 * Create a new markup filter chain and initialize with all default
	 * filters required.
	 * 
	 * @param tagList
	 * @return a preconfigured markup filter chain
	 */
	private final IMarkupFilter newFilterChain(final List tagList)
	{
        // Chain together all the different markup filters and configure them
        this.detectWicketComponents = new WicketTagIdentifier(xmlParser);
        this.detectWicketComponents.setWicketNamespace(this.wicketNamespace);
        
        final WicketParamTagHandler wicketParamTagHandler = new WicketParamTagHandler(
                new HtmlHandler(detectWicketComponents));
        wicketParamTagHandler.setStripWicketTag(this.stripWicketTag);
        
        final WicketRemoveTagHandler previewComponentTagRemover = new WicketRemoveTagHandler(wicketParamTagHandler);
        
        final WicketLinkTagHandler autolinkHandler = new WicketLinkTagHandler(previewComponentTagRemover);
        autolinkHandler.setAutomaticLinking(this.automaticLinking);
        
        // Provided the wicket component requesting the markup is known ...
        if (this.container != null)
        {
	        final BodyOnLoadHandler bodyHandler = new BodyOnLoadHandler(autolinkHandler);
	
	        // Pages require additional handlers
	        if ((this.container != null) && (container instanceof Page))
	        {
	            final HtmlHeaderSectionHandler headerHandler = new HtmlHeaderSectionHandler(bodyHandler);
	            headerHandler.setTagList(tagList);
	            
	            return headerHandler;
	        }
	        
	        // Markup filter chain starts with auto link handler
	        return bodyHandler;
        }
        
        return autolinkHandler;
	}

