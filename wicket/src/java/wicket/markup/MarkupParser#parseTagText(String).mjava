    /**
     * Parses the text between tags. For example, "a href=foo.html".
     * @param tagText The text between tags
     * @return A new Tag object or null if the tag is invalid
     */
    private ComponentTag parseTagText(final String tagText) throws ParseException
    {
        // Get the length of the tagtext
        final int tagTextLength = tagText.length();
        
        // If we match tagname pattern
        final WordParser tagnameParser = new WordParser(tagText);

        if (tagnameParser.matcher().lookingAt())
        {
            // Extract the tag from the pattern matcher
            final String tagName = tagnameParser.getWord().toLowerCase();
            
            int pos;
            final ComponentTag tag;
            
            if (!wicketTagName.equalsIgnoreCase(tagName))
            {
                tag = new ComponentTag();
                
                tag.name = tagnameParser.getWord().toLowerCase();
                pos = tagnameParser.matcher().end(0);
            }
            else
            {
                tag = new ComponentWicketTag();
                
                // make sure there is a colon next and a word
                pos = tagnameParser.matcher().end(0);
                
                // 2 chars: ":" and at least one character
                if ((tagTextLength <= (pos + 2)) || (tagText.charAt(pos) != ':'))
                {
                    throw new ParseException("No valid wicket tag name found: '" 
                            + tagText 
                            + "'. Must be like <wicket:param ...", 0 /* tag.getPos() */);
                    // TODO where to get tag.getPos() from
                }
                
                int endPos = tagText.indexOf(' ', pos);
                if (endPos == -1)
                {
                    tag.name = tagText.substring(pos + 1).toLowerCase();
                    pos = tagTextLength;
                }
                else
                {
                    tag.name = tagText.substring(pos + 1, endPos).toLowerCase();
                    pos = endPos;
                }

                tag.componentName = tag.name;
            }

            // Are we at the end? Then there are no attributes, so we just
            // return the tag
            if (pos == tagTextLength)
            {
                return tag;
            }

            // Extract attributes
            final VariableAssignmentParser attributeParser = new VariableAssignmentParser(tagText);

            while (attributeParser.matcher().find(pos))
            {
                // Get key and value using attribute pattern
                String value = attributeParser.getValue();
                
                // In case like <html xmlns:wicket> will the value be null
                if (value == null)
                {
                    value = "";
                }

                // Set new position to end of attribute
                pos = attributeParser.matcher().end(0);

                // Chop off double quotes
                if (value.startsWith("\""))
                {
                    value = value.substring(1, value.length() - 1);
                }

                // Trim trailing whitespace
                value = value.trim();

                // Get key
                final String key = attributeParser.getKey();

                // If the form <tag id = "wicket-value"> is used
                boolean wicketId = key.equalsIgnoreCase("id") && value.startsWith(componentNameAttribute + "-");

                if (wicketId)
                {
                    // extract component name from value
                    value = value.substring(componentNameAttribute.length() + 1).trim();
                }
                
                // If user-defined component name attribute is used OR the
                // standard name ("wicket") is used
                if (wicketId
                        || key.equalsIgnoreCase(componentNameAttribute)
                        || key.equalsIgnoreCase(ComponentTag.WICKET_COMPONENT_NAME_ATTRIBUTE))
                {
                    // Set componentName value on tag
                    tag.componentName = value;
                    
                    // value must match allowed characters
                    Matcher matcher = MetaPattern.VARIABLE_NAME.matcher(value);
                    if (!matcher.matches())
                    {
                        log.warn("WILL BE ACTIVATED SOON: Invalid character in component name '" 
                                + componentNameAttribute + "-" + value + "'"
                                + " Regex: [a-z_]+ (case insensitive)");
/*                        
                        throw new ParseException("Invalid character in component name '" 
                                + componentNameAttribute + "-" + value + "'"
                                + " Regex: [a-z_]+ (case insensitive)", 
                                tag.getPos());
*/                                
                    }
                }

                // Put the attribute in the attributes hash
                tag.attributes.put(key, StringValue.valueOf(value));

                // The input has to match exactly (no left over junk after
                // attributes)
                if (pos == tagTextLength)
                {
                    return tag;
                }
            }
        }

        return null;
    }

