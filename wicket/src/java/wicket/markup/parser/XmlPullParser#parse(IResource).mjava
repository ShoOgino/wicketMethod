	/**
	 * Reads and parses markup from a resource such as file.
	 *
	 * @param resource
	 *            The resource to read and parse
	 * @throws IOException
	 * @throws ResourceNotFoundException
	 */
	public void parse(final IResource resource) throws IOException, ResourceNotFoundException
	{
		// reset: Must come from markup
		this.encoding = null;

		try
		{
			final BufferedInputStream bin = new BufferedInputStream(resource.getInputStream(), 4000);
			if (!bin.markSupported())
			{
				throw new IOException("BufferedInputStream does not support mark/reset");
			}

			// read ahead buffer required for the first line of the markup
			// (encoding)
			final int readAheadSize = 80;
			bin.mark(readAheadSize);

			// read-ahead the input stream, if it starts with <?xml
			// encoding=".."?>.
			// If yes, set this.encoding and return the character which follows
			// it.
			// If no, return the whole line. determineEncoding will read-ahead
			// at max. the very first line of the markup
			this.encoding = determineEncoding(bin, readAheadSize);
			bin.reset();

			// Depending on the encoding determined from the markup-file, read
			// the rest either with specific encoding or JVM default
			final String markup;
			if (this.encoding == null)
			{
				// Use JVM default
				markup = Streams.readString(bin);
			}
			else
			{
				// Use the encoding as specified in <?xml encoding=".." ?>
				// Don't re-read <?xml ..> again
			    // Ignore ALL characters preceding <?xml>
				markup = Streams.readString(bin, encoding);
			}

			setInput(markup);
		}
		finally
		{
			resource.close();
		}
	}

