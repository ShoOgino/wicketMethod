	/**
	 * Read-ahead the input stream (markup file). If it starts with &lt;?xml
	 * encoding=".." ?&gt;, than set this.encoding and return null. If not,
	 * return all characters read so far. determineEncoding will read-ahead at
	 * max. the very first line of the markup.
	 *
	 * @param in
	 *            The markup file
	 * @param readAheadSize
	 *            The read ahead buffer available to read the xml encoding
	 *            information
	 * @return Null, if &lt;?xml ..?&gt; has been found; else all characters
	 *         read ahead
	 * @throws IOException
	 */
	private final String determineEncoding(final InputStream in, final int readAheadSize)
			throws IOException
	{
		// Max one line
		StringBuffer pushBack = new StringBuffer(readAheadSize);

		int value;
		while ((value = in.read()) != -1)
		{
			pushBack.append((char)value);

			// Stop at end of the first tag or end of line. If it is HTML
			// without newlines, stop after X bytes (= characters)
			if ((value == '>') || (value == '\n') || (value == '\r')
					|| (pushBack.length() >= (readAheadSize - 1)))
			{
				break;
			}
		}

		// Does the string match the <?xml .. ?> pattern
		final Matcher matcher = encodingPattern.matcher(pushBack);
		if (!matcher.matches())
		{
			// No
			return null;
		}

		// Extract the encoding
		String encoding = matcher.group(3);
		if ((encoding == null) || (encoding.length() == 0))
		{
			encoding = matcher.group(4);
		}

		return encoding;
	}

