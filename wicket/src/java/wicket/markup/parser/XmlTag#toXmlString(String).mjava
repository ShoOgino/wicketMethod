	/**
	 * Assuming some attributes have been changed, toXmlString() rebuilds the
	 * String on based on the tags informations.
	 * 
	 * @param attributeToBeIgnored
	 * @return A xml string matching the tag
	 */
	public CharSequence toXmlString(final String attributeToBeIgnored)
	{
		final AppendingStringBuffer buffer = new AppendingStringBuffer();

		buffer.append('<');

		if (type == CLOSE)
		{
			buffer.append('/');
		}

		if (namespace != null)
		{
			buffer.append(namespace);
			buffer.append(':');
		}

		buffer.append(name);

		final AttributeMap attributes = getAttributes();
		if (attributes.size() > 0)
		{
			final Iterator iterator = attributes.keySet().iterator();
			for (; iterator.hasNext();)
			{
				final String key = (String)iterator.next();
				if ((key != null)
						&& ((attributeToBeIgnored == null) || !key
								.equalsIgnoreCase(attributeToBeIgnored)))
				{
					buffer.append(" ");
					buffer.append(key);
					CharSequence value = getString(key);

					// Attributes without values are possible, e.g. 'disabled'
					if (value != null)
					{
						buffer.append("=\"");
						value = Strings.replaceAll(value, "\"", "\\\"");
						buffer.append(value);
						buffer.append("\"");
					}
				}
			}
		}

		if (type == OPEN_CLOSE)
		{
			buffer.append('/');
		}

		buffer.append('>');

		return buffer;
	}

