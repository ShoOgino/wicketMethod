	/**
	 * 
	 * @see wicket.markup.parser.IMarkupFilter#nextTag()
	 * @return The next tag to be processed. Null, if not more tags are
	 *         available
	 */
	public final MarkupElement nextTag() throws ParseException
	{
		// Get the next tag from the next MarkupFilter in the chain
		// If null, no more tags are available
		final ComponentTag tag = nextComponentTag();
		if (tag == null)
		{
			return tag;
		}

		final String wicketMessageAttribute = tag.getAttributes().getString(
				WICKET_MESSAGE_ATTRIBUTE_NAME);
		if ((wicketMessageAttribute != null) && (wicketMessageAttribute.trim().length() > 0))
		{
			// check if this tag is raw markup
			if (tag.getId() == null)
			{
				// if this is a raw tag we need to set the id to something so
				// that wicket will not merge this as raw markup and instead
				// pass it on to a resolver
				tag.setId(getClass().getSimpleName());
				// we also mark the tag so that the resolver knows how to
				// identify it
				tag.setRawWicketMessageTag(true);
				// there is no point attaching the attributelocalizer to this
				// tag because it will be represented by an auto component and
				// they do not inherit the behaviors from their component tag
				// unlike regular components, instead the attributelocalizer
				// will be added by the code that creates the auto component

			}
			else
			{
				// if this is a component tag we attach a behavior to it that
				// will in turn be attached to the component that is attached to
				// this tag
				tag.addBehavior(ATTRIBUTE_LOCALIZER);
			}
		}

		return tag;
	}

