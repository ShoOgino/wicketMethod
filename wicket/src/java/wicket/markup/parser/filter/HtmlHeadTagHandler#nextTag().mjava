	/**
	 * Get the next MarkupElement from the parent MarkupFilter and handles it if
	 * the specific filter criteria are met. Depending on the filter, it may
	 * return the MarkupElement unchanged, modified or it remove by asking the
	 * parent handler for the next tag.
	 * 
	 * @see wicket.markup.parser.IMarkupFilter#nextTag()
	 * @return Return the next eligible MarkupElement
	 */
	public MarkupElement nextTag() throws ParseException
	{
		if (position == INSERT_HEAD_OPEN)
		{
			XmlTag headOpenTag = new XmlTag();
			headOpenTag.setName("head");
			headOpenTag.setType(XmlTag.OPEN);
			openTag = new DynamicWicketTag(headOpenTag);
			openTag.setId("head");

			position = INSERT_HEAD_CLOSE;

			return openTag;
		}
		else if (position == INSERT_HEAD_CLOSE)
		{
			XmlTag headCloseTag = new XmlTag();
			headCloseTag.setName("head");
			headCloseTag.setType(XmlTag.CLOSE);
			closeTag = new DynamicWicketTag(headCloseTag);
			closeTag.setOpenTag(openTag);
			closeTag.setId("head");

			position = DONE;

			return closeTag;
		}

		// Get next tag. Null, if no more tag available
		final ComponentTag tag = (ComponentTag)getParent().nextTag();
		if (tag == null || position == DONE)
		{
			return tag;
		}

		final String tagName = tag.getName();

		if (position == NOTHING_FOUND_YET && "html".equals(tagName))
        {
			position = HTML_FOUND;
		}
		else if (position == HTML_FOUND)
		{
			// the html tag must be immediately followed by a head tag
			if (!"head".equals(tagName))
			{
				// must insert a header
				position = INSERT_HEAD_OPEN;				
			}
			else
			{
				// we're done with HEAD
				position = DONE;
			}
		}

		return tag;
	}

