	/**
	 * Get the next MarkupElement from the parent MarkupFilter and handles it if
	 * the specific filter criteria are met. Depending on the filter, it may
	 * return the MarkupElement unchanged, modified or it remove by asking the
	 * parent handler for the next tag.
	 * 
	 * @see wicket.markup.parser.IMarkupFilter#nextTag()
	 * @return Return the next eligible MarkupElement
	 */
	public final MarkupElement nextTag() throws ParseException
	{
		// Get next tag. Null, if no more tag available
		final ComponentTag tag = nextComponentTag();
		if (tag == null)
		{
			return tag;
		}

		// Only xml tags not already identified as Wicket components will be
		// considered for autolinking. This is because it is assumed that Wicket
		// components like images or all other kind of Wicket Links will handle
		// it themselves.
		// Subclass analyzeAutolinkCondition() to implement you own
		// implementation
		// and register the new tag handler with the markup parser through
		// Application.newMarkupParser().
		if ((autolinking == true) && (analyzeAutolinkCondition(tag) == true))
		{
			// Mark it as autolink enabled
			tag.enableAutolink(true);

			// Just a dummy name. The ComponentTag will not be forwarded.
			tag.setId(AUTOLINK_ID);
			return tag;
		}

		// For all <wicket:link ..> tags which probably change the
		// current autolink status.
		if (tag.isLinkTag())
		{
			// Beginning of the region
			if (tag.isOpen() || tag.isOpenClose())
			{
				if (tag.isOpen())
				{
					if (autolinkStatus == null)
					{
						autolinkStatus = new ArrayListStack<Boolean>();
					}

					// remember the current setting to be reset after the
					// region
					autolinkStatus.push(new Boolean(autolinking));
				}

				// html allows to represent true in different ways
				final String autolink = tag.getAttributes().getString("autolink");
				try
				{
					autolinking = Strings.isEmpty(autolink) || Strings.isTrue(autolink);
				}
				catch (final StringValueConversionException e)
				{
					throw new WicketRuntimeException("Invalid autolink attribute value \""
							+ autolink + "\"");
				}
			}
			else if (tag.isClose())
			{
				// restore the autolink setting from before the region
				autolinking = autolinkStatus.pop().booleanValue();
			}
		}

		return tag;
	}

