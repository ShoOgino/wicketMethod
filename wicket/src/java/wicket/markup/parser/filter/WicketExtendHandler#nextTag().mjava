	/**
	 * Get the next tag from the next MarkupFilter in the chain and search for
	 * Wicket specific tags.
	 * <p>
	 * 
	 * @see wicket.markup.parser.IMarkupFilter#nextTag()
	 * @return The next tag from markup to be processed. If null, no more tags
	 *         are available
	 */
	public MarkupElement nextTag() throws ParseException
	{
		// Get the next tag from the markup.
		// If null, no more tags are available
		ComponentTag tag = (ComponentTag)getParent().nextTag();
		if (tag == null)
		{
			return tag;
		}

		if (ignoreRemainingTag == true)
		{
			// ignore everything following </wicket:extend>
			return null;
		}

		if (tag instanceof WicketTag)
		{
			final WicketTag wtag = (WicketTag)tag;
			if (wtag.isExtendTag())
			{
				if (wtag.isClose())
				{
					ignoreRemainingTag = true;
				}
				else
				{
					// Note: This is a very special "command". It removes all
					// existing tags already in the tag list, thus removing 
				    // everything before <wicket:extend> AND it will remove 
				    // everything following </wicket:extend>
					tagList.add(null);
				}
			}
		}

		return tag;
	}

