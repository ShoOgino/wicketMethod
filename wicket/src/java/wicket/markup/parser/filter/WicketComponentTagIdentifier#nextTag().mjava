    /**
     * Get the next tag from the next MarkupFilter in the chain and search for
     * Wicket specific tags. <p>
     * Note: The xml parser - the next MarkupFilter in the chain - returns 
     * XmlTags which are a subclass of MarkupElement. The implementation
     * of this filter will return either ComponentTags or ComponentWicketTags.
     * Both are subclasses of MarkupElement as well and both maintain a reference
     * to the XmlTag. But no XmlTag is returned.
     * 
     * @see wicket.util.xml.IMarkupFilter#nextTag()
     * @return The next tag from markup to be processed. If null, no more tags 
     * 		   are available
     */
    public MarkupElement nextTag() throws ParseException
    {
        // Get the next tag from the markup. 
        // If null, no more tags are available
        XmlTag xmlTag = (XmlTag) parent.nextTag();
        if (xmlTag == null)
        {
            return xmlTag;
        }

        // Identify tags with Wicket namespace
        ComponentTag tag;
        if (wicketNamespace.equalsIgnoreCase(xmlTag.getNamespace()))
        {
            // It is <wicket:...>
            tag = new ComponentWicketTag(xmlTag);

            // Make it a wicket component. Otherwise it would be RawMarkup
            tag.setComponentName(tag.getName());
        }
        else
        {
            // Everything else, except tags with Wicket namespace
            tag = new ComponentTag(xmlTag);
        }

        // If the form <tag id = "wicket-value"> is used
		final String id = xmlTag.getAttributes().getString("id");

        if ((id != null) && id.startsWith(componentNameAttribute + "-"))
        {
            // extract component name from value
            tag.setComponentName(id.substring(componentNameAttribute.length() + 1).trim());

            // Depending on apps setting, "wicket-" will be removed or not
            if (this.removeWicketComponentTag)
            {
                tag.put("id", tag.getComponentName());
            }
        }
        else if (tag.getAttributes().containsKey(componentNameAttribute))
        {
            // Set componentName value on tag
            tag.setComponentName( 
                	tag.getAttributes().getString(componentNameAttribute));
        }
        else if (tag.getAttributes().containsKey(
                ComponentTag.DEFAULT_COMPONENT_NAME_ATTRIBUTE))
        {
            // Set componentName value on tag
            tag.setComponentName( 
                	tag.getAttributes().getString(
                	        ComponentTag.DEFAULT_COMPONENT_NAME_ATTRIBUTE));
        }
        
        return tag;
    }

