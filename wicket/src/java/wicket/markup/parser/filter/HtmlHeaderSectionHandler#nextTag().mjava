	/**
	 * Get the next tag from the next MarkupFilter in the chain and search for
	 * Wicket specific tags.
	 * <p>
	 * Note: The xml parser - the next MarkupFilter in the chain - returns
	 * XmlTags which are a subclass of MarkupElement. The implementation of this
	 * filter will return either ComponentTags or ComponentWicketTags. Both are
	 * subclasses of MarkupElement as well and both maintain a reference to the
	 * XmlTag. But no XmlTag is returned.
	 * 
	 * @see wicket.markup.parser.IMarkupFilter#nextTag()
	 * @return The next tag from markup to be processed. If null, no more tags
	 *         are available
	 */
	public MarkupElement nextTag() throws ParseException
	{
		// Get the next tag from the markup.
		// If null, no more tags are available
		ComponentTag tag = (ComponentTag)getParent().nextTag();
		if (tag == null)
		{
			return tag;
		}
		
		if (tag instanceof WicketTag)
		{
		    return tag;
		}

		if (done == true)
		{
		    return tag;
		}
		
		if ("head".equalsIgnoreCase(tag.getName()))
        {
		    if (tag.isClose())
		    {
		        done = true;
		    }
		    tag.setId("_header");
        }
		else if ("body".equalsIgnoreCase(tag.getName()))
        {
		    done = true;

			final XmlTag headOpenTag = new XmlTag();
			headOpenTag.setName("head");
			headOpenTag.setType(XmlTag.OPEN);
			final ComponentTag openTag = new ComponentTag(headOpenTag);
			openTag.setId("_header");
				
			final XmlTag headCloseTag = new XmlTag();
			headCloseTag.setName("head");
			headCloseTag.setType(XmlTag.CLOSE);
			final ComponentTag closeTag = new ComponentTag(headCloseTag);
			closeTag.setOpenTag(openTag);
			closeTag.setId("_header");

			// TODO remove comment, to activate
			//tagList.add(openTag);
			//tagList.add(closeTag);
        }
		
		return tag;
	}

