	/**
	 * Get the next tag from the next MarkupFilter in the chain and search for
	 * Wicket specific tags.
	 * <p>
	 * 
	 * @see wicket.markup.parser.IMarkupFilter#nextTag()
	 * @return The next tag from markup to be processed. If null, no more tags
	 *         are available
	 */
	public MarkupElement nextTag() throws ParseException
	{
		// Get the next tag from the markup.
		// If null, no more tags are available
		ComponentTag tag = (ComponentTag)getParent().nextTag();
		if (tag == null)
		{
			return tag;
		}

		// Whatever there is left in the markup, ignore it
		if (ignoreTheRest == true)
		{
			return tag;
		}

		// if it is <head> or </head>
		if (("head".equalsIgnoreCase(tag.getName()) == true) && (tag.getNamespace() == null))
		{
			// it is <head>
			if (tag.isClose())
			{
				foundHead = true;
			}

			// Usually <head> is not a wicket special tag. But because we want
			// transparent header support we insert it automatically if missing
			// and while rendering its content all child components are asked if 
			// they want to contribute something to the header. Thus we have to
			// handle <head> accordingly.
			tag.setId(HEADER_ID);

			return tag;
		}

		// if it is <body>
		if (("body".equalsIgnoreCase(tag.getName()) == true) && (tag.getNamespace() == null))
		{
			// we found no <head> . But because we found <body> we assume it 
		    // could be a page. And because we need to auto-add <head> to 
		    // pages only (if missing) ... Note: no one prevent a designer
		    // to put a <body> in a panel component, for previewabilty.
		    // Thus more markups than actually required might now have
			// that tag. It should be a problem, but ... you never know.
			if (foundHead == false)
			{
				insertHeadTag();
			}

			// <head> must always be before <body>
			ignoreTheRest = true;
			return tag;
		}

		return tag;
	}

