	/**
	 * Get the next MarkupElement from the parent MarkupFilter and handle it if
	 * the specific filter criteria are met. Depending on the filter, it may
	 * return the MarkupElement unchanged, modified or it remove by asking the
	 * parent handler for the next tag.
	 * 
	 * @see wicket.markup.parser.IMarkupFilter#nextTag()
	 * @return Return the next eligible MarkupElement
	 */
	public MarkupElement nextTag() throws ParseException
	{
		// If there is something in the stack, ...
		while (stack.size() > 0)
		{
			final ComponentTag top = stack.pop();
			return top;
		}

		// Get the next tag. If null, no more tags are available
		// in the markup
		final ComponentTag tag = (ComponentTag)getParent().nextTag();
		if (tag == null)
		{
			return tag;
		}

		if (tag.isOpenClose())
		{
			String name = tag.getName();
			if (tag.getNamespace() != null)
			{
				name = tag.getNamespace() + ":" + tag.getName();
			}

			// Pop any simple tags off the top of the stack
			if (requiresOpenBodyCloseTag(name))
			{
				tag.setType(XmlTag.Type.OPEN);
				XmlTag closeTag = new XmlTag();
				closeTag.setType(XmlTag.Type.CLOSE);
				closeTag.setName(tag.getName());
				closeTag.setNamespace(tag.getNamespace());
				closeTag.closes(tag);

				stack.push(new ComponentTag(closeTag));
			}
		}

		return tag;
	}

