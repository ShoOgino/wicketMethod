	/**
	 * Loads markup from a resource stream.
	 * 
	 * @param container
	 *            The original requesting markup container
	 * @param lookupResult
	 *            The markup resource stream to load
	 * @return The markup
	 */
	private final IMarkup loadMarkup(final MarkupContainer container, 
			final MarkupResourceStreamLookupResult lookupResult)
	{
		try
		{
			// read and parse the markup
			IMarkup markup = application.getMarkupSettings().getMarkupParserFactory()
					.newMarkupParser().readAndParse(lookupResult.getMarkupResourceStream());

			// Check for markup inheritance. If it contains <wicket:extend>
			// the two markups get merged.
			markup = checkForMarkupInheritance(container, lookupResult, markup);

			// add the markup to the cache
			markupCache.put(lookupResult.getCacheKey(), markup);

			// trigger all listeners registered on the markup just loaded
			afterLoadListeners.notifyListeners(lookupResult.getResourceStream());

			return markup;
		}
		catch (ResourceStreamNotFoundException e)
		{
			log.error("Unable to find markup from " + lookupResult.getResourceStream(), e);
		}
		catch (IOException e)
		{
			log.error("Unable to read markup from " + lookupResult.getResourceStream(), e);
		}

		synchronized (markupCache)
		{
			markupCache.remove(lookupResult.getCacheKey());
			afterLoadListeners.remove(lookupResult.getResourceStream());
		}

		return IMarkup.NO_MARKUP;
	}

