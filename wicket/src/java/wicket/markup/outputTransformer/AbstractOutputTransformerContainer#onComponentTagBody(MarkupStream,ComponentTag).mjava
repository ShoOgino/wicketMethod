	/**
	 * @see wicket.Component#onComponentTagBody(wicket.markup.MarkupStream,
	 *      wicket.markup.ComponentTag)
	 */
	protected final void onComponentTagBody(final MarkupStream markupStream,
			final ComponentTag openTag)
	{
		// Temporarily replace the web response with a String response
		final Response webResponse = this.getResponse();

		try
		{
			// Create a new response object
			final Response response = newResponse();
			if (response == null)
			{
				throw new IllegalStateException("newResponse() must not return null");
			}

			// and make it the current one
			this.getRequestCycle().setResponse(response);

			// Invoke default execution
			super.onComponentTagBody(markupStream, openTag);

			try
			{
				// Tranform the data
				String output = transform(response.toString());
				webResponse.write(output);
			}
			catch (Exception ex)
			{
				throw new WicketRuntimeException(
						"Error while transforming the output: " + this, ex);
			}
		}
		finally
		{
			// Restore the original response
			this.getRequestCycle().setResponse(webResponse);
		}
	}

