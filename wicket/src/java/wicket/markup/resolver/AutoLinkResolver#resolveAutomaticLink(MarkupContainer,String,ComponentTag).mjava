	/**
	 * Resolves the given tag's page class and page parameters by parsing the
	 * tag component name and then searching for a page class at the absolute or
	 * relative URL specified by the href attribute of the tag.
	 * <p>
	 * None html references are treated similar.
	 * 
	 * @param container
	 *            The container where the link is
	 * @param id
	 *            the name of the component
	 * @param tag
	 *            the component tag
	 * @return A BookmarkablePageLink to handle the href
	 */
	private final Component resolveAutomaticLink(final MarkupContainer container, final String id,
			final ComponentTag tag)
	{
		final Page page = container.getPage();
		final String href = tag.getAttributes().getString("href");

		// If href contains URL query parameters ..
		final PageParameters pageParameters;
		String infoPath;

		// get the query string
		int pos = href.indexOf("?");
		if (pos != -1)
		{
			final String queryString = href.substring(pos + 1);
			pageParameters = new PageParameters(new ValueMap(queryString, "&"));
			infoPath = href.substring(0, pos);
		}
		else
		{
			pageParameters = null;
			infoPath = href;
		}

		// Make the id (page-)unique
		final String autoId = id + Integer.toString(page.getAutoIndex());

		// By setting the component name, the tag becomes a Wicket component
		// tag, which must have a associated Component.
		tag.setId(autoId);

		// remove file extension, but remember it
		String extension = null;
		pos = infoPath.lastIndexOf(".");
		if (pos != -1)
		{
			extension = infoPath.substring(pos + 1);
			infoPath = infoPath.substring(0, pos);

			// HTML hrefs are handled first
			if (supportedPageExtensions.containsKey(extension.toLowerCase()))
			{
				// Obviously a href like href="myPkg.MyLabel.html" will do as well.
				// Wicket will not throw an exception. It accepts it.
				infoPath = Strings.replaceAll(infoPath, "/", ".");
	
				final IRequestCycleSettings appSettings = page.getApplicationSettings();
				final IClassResolver defaultClassResolver = appSettings.getClassResolver();
				
				final String className;
				if (!infoPath.startsWith("."))
				{
					// Href is relative. Resolve the url given relative to the
					// current page
					className = Packages.extractPackageName(page.getClass()) + "." + infoPath;
				}
				else
				{
					// href is absolute. If class with the same absolute path
					// exists, use it. Else don't change the href.
					className = infoPath.substring(1);
				}
				
				try
				{
					final Class clazz = defaultClassResolver.resolveClass(className);
					return new AutolinkBookmarkablePageLink(autoId, clazz, pageParameters);
				}
				catch (WicketRuntimeException ex)
				{
					log.info("Did not find corresponding java class: " + className);
					// fall through
				}
			}
			// It is not "*.html". Create a static resource reference
			else
			{
				if (infoPath.startsWith("/") || infoPath.startsWith("\\"))
				{
					// href is absolute. Don't change it at all.
				}
				else
				{
					// Href is relative. Create a resource reference pointing at
					// this file

					// <wicket:head> components are handled differently. We can not
					// use the container, because it is the container the header
					// has been added to (e.g. the Page). What we need however, is
					// the component (e.g. a Panel) which contributed it.
					MarkupContainer relevantContainer = container;
					while (((relevantContainer instanceof IComponentResolver) || relevantContainer.isTransparent())  
							&& !(relevantContainer instanceof IComponentResolverMarker))
					{
						relevantContainer = relevantContainer.getParent(); 
					}
	
					try
					{
						// Create the component implementing the link
						return new CssLink(autoId, relevantContainer.getClass(), href);
					}
					catch (WicketRuntimeException ex)
					{
						// Provided the resource does not exist, assume the user did
						// deliberately not point it to a page or resource. The href
						// might still point to a valid homepage outside of wicket.
						log.info("Did not find autolink resource: " + href 
								+ "; Assume it is a valid external URL");
					}
				}
			}
		}

		// We have not been able to find the resource requested
		// Don't change the href.
		return new AutolinkExternalLink(autoId, href);
	}

