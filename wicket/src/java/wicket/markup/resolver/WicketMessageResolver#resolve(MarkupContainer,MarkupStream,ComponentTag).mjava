	/**
	 * Try to resolve the tag, then create a component, add it to the container
	 * and render it.
	 * 
	 * @see wicket.markup.resolver.IComponentResolver#resolve(MarkupContainer,
	 *      MarkupStream, ComponentTag)
	 * 
	 * @param container
	 *            The container parsing its markup
	 * @param markupStream
	 *            The current markupStream
	 * @param tag
	 *            The current component tag while parsing the markup
	 * @return true, if componentId was handle by the resolver. False, otherwise
	 */
	public boolean resolve(final MarkupContainer container, final MarkupStream markupStream,
			final ComponentTag tag)
	{
		if (tag.getId().equals(WicketMessageTagHandler.WICKET_MESSAGE_CONTAINER_ID))
		{
			// this is a raw tag with wicket:message attribute, we need to
			// create a transparent auto container to stand in.
			final String id = newAutoId(container);
			MarkupContainer messageContainer = new WebMarkupContainer(container, id)
			{
				private static final long serialVersionUID = 1L;

				@Override
				public boolean isTransparentResolver()
				{
					return true;
				}
			};
			
			messageContainer.add(WicketMessageTagHandler.ATTRIBUTE_LOCALIZER);
			messageContainer.autoAdded();
			
			// yes, we handled the tag
			return true;
		}

		if (tag.isMessageTag())
		{
			// this is a <wicket:message> tag
			String messageKey = tag.getAttributes().getString("key");
			if ((messageKey == null) || (messageKey.trim().length() == 0))
			{
				throw new MarkupException(
						"Wrong format of <wicket:message key='xxx'>: attribute 'key' is missing");
			}

			final String value = container.getApplication().getResourceSettings().getLocalizer()
					.getString(messageKey, container, "");

			final String id = newAutoId(container);
			Component component = null;
			if ((value != null) && (value.trim().length() > 0))
			{
				component = new MyLabel(container, id, value);
			}
			else
			{
				log.info("No value found for message key: " + messageKey);
				component = new WebMarkupContainer(container, id);
			}

			component.setRenderBodyOnly(container.getApplication().getMarkupSettings()
					.getStripWicketTags());

			component.autoAdded();

			// Yes, we handled the tag
			return true;
		}

		// We were not able to handle the tag
		return false;
	}

