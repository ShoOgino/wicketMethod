	/**
	 * Gets the header part for this markup container. Returns null if it doesn't contribute
	 * a header part.
	 * @param index TODO
	 * @return the header part for this markup container or null
	 * 	if it doesn't contribute anything.
	 */
	public WebMarkupContainer getHeaderPart(int index)
	{
		
//		// get the component from the cache by its class
//		MarkupContainer comp = getApplication().getHeadComponentCache().get(this, getClass());
//		// if the component is not found create it:
//		if(comp == null)
//		{
//			// create new panel
//			final MarkupStream ms = getApplication().getMarkupCache().getHeadMarkupStream(this, getClass());
//			if(ms != null)
//			{
//				// get the header markup portion of the component markup file and set it as the components markup:
//				comp = new MarkupContainer("header:" + getClass()) 
//				{
//					/* (non-Javadoc)
//					 * @see wicket.MarkupContainer#getMarkupStream()
//					 */
//					protected MarkupStream getMarkupStream()
//					{
//						return ms;
//					}
//				};
//			}
//			else
//			{
//				comp = emptyHeader;
//			}
//			getApplication().getHeadComponentCache().put(this,getClass(), comp);
//		}
//		return comp;
		
		return null;
	}

