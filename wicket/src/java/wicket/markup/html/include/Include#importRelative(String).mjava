	/**
	 * Import a resource from a relative url.
	 * @param url the resource's url
	 * @return the resource as a string
	 */
	private String importRelative(String url)
	{
		// the url is relative; do some request dispatcher magic

		String targetUrl = url;
		HttpServletRequest httpServletRequest =
			((WebRequest)getRequest()).getHttpServletRequest();
		HttpServletResponse httpServletResponse =
			((WebResponse)getResponse()).getHttpServletResponse();

		// normalize the URL if we have an HttpServletRequest
		if (!targetUrl.startsWith("/"))
		{
			String sp = httpServletRequest.getServletPath();
			targetUrl = sp.substring(0, sp.lastIndexOf('/')) + '/' + targetUrl;
		}

		// strip any session id
		targetUrl = stripSession(targetUrl);

		// get and check the request dispatcher
		RequestDispatcher dispatcher = httpServletRequest.getRequestDispatcher(targetUrl);
		if (dispatcher == null)
		{
			throw new WicketRuntimeException("no dispatcher found for url " + url + " (tried "
					+ targetUrl + ")");
		}
		// include the resource, using our custom wrapper
		ImportResponseWrapper irw = new ImportResponseWrapper(httpServletResponse);

		// spec mandates specific error handling form include()
		try
		{
			dispatcher.include(httpServletRequest, irw);
		}
		catch (Exception e)
		{
			throw new WicketRuntimeException(e);
		}

		// disallow inappropriate response codes
		if (irw.getStatus() < 200 || irw.getStatus() > 299)
		{
			throw new WicketRuntimeException(irw.getStatus() + " " + targetUrl);
		}

		// recover the response String from our wrapper
		try
		{
			return irw.getString();
		}
		catch (UnsupportedEncodingException e)
		{
			throw new WicketRuntimeException(e);
		}
	}

