		/**
		 * @see wicket.markup.html.IHeaderContributor#renderHead(wicket.Response)
		 */
		public final void renderHead(final Response response)
		{
			final WebRequestCycle cycle = (WebRequestCycle)getRequestCycle();
			final IRequestTarget target = cycle.getRequestTarget();

			int initialAccessStackSize = 0;
			if (getApplication().getRequestCycleSettings().getRenderStrategy() == IRequestCycleSettings.REDIRECT_TO_RENDER
					&& target instanceof RedirectPageRequestTarget)
			{
				initialAccessStackSize = 1;
			}

			// Here is our trickery to detect whether the current request was
			// made in a new window/ tab, in which case it should go in a
			// different page map so that we don't intermangle the history of
			// those windows
			final ArrayListStack accessStack = getPageMap().getAccessStack();
			if (accessStack.size() > initialAccessStackSize)
			{
				CharSequence url = null;
				if (target instanceof IBookmarkablePageRequestTarget)
				{
					IBookmarkablePageRequestTarget current = (IBookmarkablePageRequestTarget)target;
					BookmarkablePageRequestTarget redirect = new BookmarkablePageRequestTarget(
							getSession().createAutoPageMapName(), current.getPageClass(), current
									.getPageParameters());
					url = cycle.urlFor(redirect);
				}
				else
				{
					url = urlFor(INewBrowserWindowListener.INTERFACE);
				}
				final BodyContainer body = getBodyContainer();
				if (cycle.getWebRequest().getCookies() == null ||  body == null)
				{
					// If the browser does not support cookies, we try to work
					// with the history
					
					// FIXME this only works with links that open a new window
					// and browser configurations that start with a blank home
					// page (which is usually not the default), in which case
					// the page count is 2 (or 1 for IE)
					response.write("<script language=\"javascript\">if((history.length == 0 && document.all) || (history.length == 1 && !document.all)){ if (!document.all) window.location.hash='some-random-hash!'; document.location.href = '");
					response.write(url);
					response.write("'}</script>");
				}
				else
				{
					// We seem to have cookie support. Write out a script that
					// adds a cookie on page load, and removes it on page unload.
					// Whenever the cookie is not unloaded (it's there on load),
					// we know that we have a new window/ tab instance
					if (onUnLoadModel == null)
					{
						onUnLoadModel = new Model()
						{
							private static final long serialVersionUID = 1L;

							/**
							 * @see wicket.model.Model#getObject(wicket.Component)
							 */
							public Object getObject(Component component)
							{
								return "deleteCookie('pagemap-" + getPageMap().getName() + "');";
							}
						};
						body.addOnUnLoadModifier(onUnLoadModel);
					}
					final String pageMapName = getPageMap().getName();
					response.write("<script type=\"text/javascript\" src=\"");
					response.write(urlFor(cookiesResource));
					response.write("\"></script>\n");
					response.write("<script language=\"javascript\">\n");
					response.write("var pagemapcookie = getCookie('pagemap-");
					response.write(pageMapName);
					response.write("');\n");
					response.write("if(!pagemapcookie && pagemapcookie != '1'){setCookie('pagemap-");
					response.write(pageMapName);
					response.write("',1);}\n");
					response.write("else {document.location.href = '");
					response.write(url);
					response.write("';}\n");
					response.write("</script>\n");
				}
			}
		}

