	/**
	 * Construct.
	 * 
	 * @param id
	 *            component id
	 * @param referer
	 *            the class that is refering; is used as the relative root for
	 *            gettting the resource
	 * @param file
	 *            model that supplies the relative location of the packaged
	 *            file. Must return an instance of {@link String}
	 * @param attributeToReplace
	 *            the attribute to replace of the target tag
	 */
	public PackagedResourceReference(final String id, final Class referer, final IModel file,
			final String attributeToReplace)
	{
		super(id);

		if (referer == null)
		{
			throw new IllegalArgumentException("Referer may not be null");
		}
		if (file == null)
		{
			throw new IllegalArgumentException("File may not be null");
		}
		if (attributeToReplace == null)
		{
			throw new IllegalArgumentException("AttributeToReplace may not be null");
		}

		IModel srcReplacement = new Model()
		{
			private static final long serialVersionUID = 1L;

			public Object getObject(Component component)
			{
				Object o = file.getObject(component);
				if (o == null)
				{
					throw new IllegalArgumentException(
							"The model must provide a non-null object (component == " + component
									+ ")");
				}
				if (!(o instanceof String))
				{
					throw new IllegalArgumentException(
							"The model must provide an instance of String");
				}
				String f = (String)component.getConverter().convert(file.getObject(component),
						String.class);
				PackageResourceReference ref = new PackageResourceReference(Application.get(),
						referer, f);
				return getRequestCycle().urlFor(ref);
			}
		};
		add(new AttributeModifier(attributeToReplace, true, srcReplacement));
	}

