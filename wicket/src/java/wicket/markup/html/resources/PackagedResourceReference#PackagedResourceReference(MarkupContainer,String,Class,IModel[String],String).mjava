	/**
	 * Construct.
	 * 
	 * @param parent
	 *            The parent of this component
	 * 
	 * @param id
	 *            component id
	 * @param referer
	 *            the class that is refering; is used as the relative root for
	 *            gettting the resource
	 * @param file
	 *            model that supplies the relative location of the packaged
	 *            file. Must return an instance of {@link String}
	 * @param attributeToReplace
	 *            the attribute to replace of the target tag
	 */
	public PackagedResourceReference(MarkupContainer parent, final String id, final Class referer,
			final IModel<String> file, final String attributeToReplace)
	{
		super(parent, id);

		if (referer == null)
		{
			throw new IllegalArgumentException("Referer may not be null");
		}
		if (file == null)
		{
			throw new IllegalArgumentException("File may not be null");
		}
		if (attributeToReplace == null)
		{
			throw new IllegalArgumentException("AttributeToReplace may not be null");
		}

		IModel<CharSequence> srcReplacement = new Model<CharSequence>()
		{
			private static final long serialVersionUID = 1L;

			@Override
			public CharSequence getObject()
			{
				String o = file.getObject();
				if (o == null)
				{
					throw new IllegalArgumentException(
							"The model must provide a non-null object");
				}
				String f = getConverter(o.getClass()).convertToString(o, getLocale());
				PackageResourceReference ref = new PackageResourceReference(Application.get(),
						referer, f);
				return getRequestCycle().urlFor(ref);
			}
		};
		add(new AttributeModifier(attributeToReplace, true, srcReplacement));
	}

