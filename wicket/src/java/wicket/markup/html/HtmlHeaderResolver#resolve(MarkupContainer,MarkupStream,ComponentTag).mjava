	/**
	 * Try to resolve the tag, then create a component, add it to the container
	 * and render it.
	 * 
	 * @see wicket.IComponentResolver#resolve(MarkupContainer, MarkupStream,
	 *      ComponentTag)
	 * 
	 * @param container
	 *            The container parsing its markup
	 * @param markupStream
	 *            The current markupStream
	 * @param tag
	 *            The current component tag while parsing the markup
	 * @return true, if componentId was handle by the resolver. False, otherwise
	 */
	public boolean resolve(final MarkupContainer container, final MarkupStream markupStream,
			final ComponentTag tag)
	{
		// It must be <wicket:...>
		if (tag instanceof WicketTag)
		{
			final WicketTag wicketTag = (WicketTag)tag;

			// It must be <wicket:head...>
			if (wicketTag.isHeadTag())
			{
				// Create, add and render the component
				HtmlHeaderContainer header = new HtmlHeaderContainer();
				
				try
				{
				    container.autoAdd(header);
				}
				catch (IllegalArgumentException ex)
				{
				    throw new WicketRuntimeException(
				            "If the root exception says something like " +
				            "\"A child with id '_header' already exists\"" +
				            "than you most likely forgot to override autoAdd() " + 
				            "in your bordered page component.", ex);
				}

				// Yes, we handled the tag
				return true;
			}
		}

		// We were not able to handle the tag
		return false;
	}

