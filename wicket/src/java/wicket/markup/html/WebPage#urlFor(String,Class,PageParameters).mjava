	/**
	 * Returns a bookmarkable URL that references a given page class using a given set of
	 * page parameters. Since the URL which is returned contains all information necessary
	 * to instantiate and render the page, it can be stored in a user's browser as a
	 * stable bookmark.
	 * @param pageMapName Name of pagemap to use
	 * @param pageClass Class of page
	 * @param parameters Parameters to page
	 * @return Bookmarkable URL to page
	 */
	public String urlFor(final String pageMapName, final Class pageClass,
			final PageParameters parameters)
	{
		if (pageClass == null)
		{
			throw new NullPointerException("argument pageClass may not be null");
		}

		final WebRequestCycle cycle = getWebRequestCycle(); 
		final StringBuffer buffer = urlPrefix(cycle);
		if (pageMapName == null)
		{
			appendPageMapName(buffer);
		}
		else
		{
			buffer.append("?pagemap=");
			buffer.append(pageMapName);
			buffer.append('&');
		}
		ApplicationPages pages = getApplicationPages();

		// "bookmarkablePage=xxx" is required if PageParameters exist,
		// some sort of redirection takes place, or if we're not dealing
		// with the homepage.
		if ((parameters!=null && !parameters.isEmpty()) ||
		  pages.getHomePageRenderStrategy()!=ApplicationPages.NO_REDIRECT ||
		  !pages.getHomePage().equals(pageClass))
		{
		  buffer.append("bookmarkablePage=");
		  String pageReference = cycle.getApplication().getPages().aliasForClass(pageClass);
		  if (pageReference == null)
		    pageReference = pageClass.getName();
		  buffer.append(pageReference);
		}
		if (parameters != null)
		{
			for (final Iterator iterator = parameters.keySet().iterator(); iterator.hasNext();)
			{
				final String key = (String)iterator.next();
				final String value = parameters.getString(key);
				if (value != null)
				{
					final String escapedValue = Strings.escapeMarkup(value);
					buffer.append('&');
					buffer.append(key);
					buffer.append('=');
					buffer.append(escapedValue);
				}
			}
		}
		if (buffer.charAt(buffer.length()-1)=='?')
			buffer.deleteCharAt(buffer.length()-1);
		return cycle.getResponse().encodeURL(buffer.toString());
	}

