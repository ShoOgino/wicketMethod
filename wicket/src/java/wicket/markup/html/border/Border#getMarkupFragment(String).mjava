	/**
	 * Like Panels, Borders have associated Markup files and hence must
	 * implement IMarkupProvider. But Border are different in that they allow to
	 * have child components with markup either in the associated markup file
	 * (between the wicket:border and wicket:body tags) or the span tag which
	 * declares the border component.
	 * <p>
	 * 
	 * @see wicket.markup.html.WebMarkupContainerWithAssociatedMarkup#getMarkupFragment(java.lang.String)
	 */
	@Override
	public MarkupFragment getMarkupFragment(final String path)
	{
		// First try to find the markup associated with 'path' in the external
		// markup file
		try
		{
			return super.getMarkupFragment(path);
		}
		catch (RuntimeException ex)
		{
			// ignore
		}

		// If not found in the external markup file, than try the markup which
		// contains the <span wicket:id="myBorder> tag.

		// Find the parent container with an associated external markup file
		// which contains the span tag and extend the 'path' accordingly.
		PrependingStringBuffer buf = new PrependingStringBuffer(80);
		buf.prepend(path);
		buf.prepend(IMarkup.TAG_PATH_SEPARATOR);
		buf.prepend(getMarkupPathName());

		MarkupContainer parent = getParent();
		while ((parent != null) && !(parent instanceof IMarkupProvider))
		{
			String pathName = parent.getMarkupPathName();
			if ((pathName != null) && (pathName.length() > 0))
			{
				if (buf.length() > 0)
				{
					buf.prepend(IMarkup.TAG_PATH_SEPARATOR);
				}
				buf.prepend(parent.getMarkupPathName());
			}
			parent = parent.getParent();
		}

		if (parent == null)
		{
			throw new MarkupNotFoundException("Border has no parent with external markup file: "
					+ getId());
		}

		// Get the MarkupFragmen from the parent with associated markup file and
		// the updated 'path'
		String newPath = buf.toString();
		MarkupFragment fragment = ((IMarkupProvider)parent).getMarkupFragment(newPath);
		if (fragment == null)
		{
			throw new MarkupNotFoundException(
					"Unable to find the markup fragment with markup path '" + path
							+ "'. Component: " + getId());
		}

		return fragment;
	}

