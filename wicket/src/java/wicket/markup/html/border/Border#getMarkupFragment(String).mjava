	/**
	 * Like Panels, Borders have associated Markup files and hence must
	 * implement IMarkupProvider. But Border are different in that they allow to
	 * have child components with markup either in the associated markup file
	 * (between the wicket:border and wicket:body tags) or the span tag which
	 * declares the border component.
	 * 
	 * @see wicket.markup.html.WebMarkupContainerWithAssociatedMarkup#getMarkupFragment(java.lang.String)
	 */
	@Override
	public MarkupFragment getMarkupFragment(String path)
	{
		// First try to find the markup associated with 'path' in the external
		// markup file
		try
		{
			return super.getMarkupFragment(path);
		}
		catch (RuntimeException ex)
		{
			// ignore
		}

		// If not found in the external markup file, than try the markup which
		// contains the <span wicket:id="myBorder> tag.
		path = getId() + IMarkup.TAG_PATH_SEPARATOR + path;
		
		// The markup path must be relativ to the markup file, hence we need to
		// find the first parent with associated markup file and update the
		// markup path accordingly.
		MarkupContainer parent = getParent();
		while ((parent != null) && !(parent instanceof IMarkupProvider))
		{
			path = parent.getMarkupFragmentPath(path);
			parent = parent.getParent();
		}

		if (parent == null)
		{
			throw new MarkupNotFoundException("Component has no parent with external markup file: "
					+ getId());
		}

		// We found the markup file and created the markup path. Now go and get
		// the fragment.
		MarkupFragment fragment = ((IMarkupProvider)parent).getMarkupFragment(path);
		if (fragment == null)
		{
			throw new MarkupNotFoundException(
					"Unable to find the markup fragment with markup path '" + path
							+ "'. Component: " + getId());
		}

		return fragment;
	}

