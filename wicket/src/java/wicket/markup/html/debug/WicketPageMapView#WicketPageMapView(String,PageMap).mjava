	/**
	 * Constructor.
	 * 
	 * @param id
	 *            The component id
	 * @param pageMap
	 *            Page map to show
	 */
	public WicketPageMapView(final String id, final PageMap pageMap)
	{
		super(id);

		// Basic attributes
		add(new Label("name", pageMap.getName() == null ? "null" : pageMap.getName()));

		// Get pagemaps
		final List entries = pageMap.getEntries();

		// Sort on access
		Collections.sort(entries, new Comparator()
		{
			public int compare(Object a, Object b)
			{
				IPageMapEntry ea = (IPageMapEntry)a;
				IPageMapEntry eb = (IPageMapEntry)b;
				return eb.getAccessSequenceNumber() - ea.getAccessSequenceNumber();
			}
		});

		// Create the table containing the list the components
		add(new ListView("entries", entries)
		{
			private static final long serialVersionUID = 1L;

			/**
			 * Populate the table with Wicket elements
			 */
			protected void populateItem(final ListItem listItem)
			{
				IPageMapEntry entry = (IPageMapEntry)listItem.getModelObject();
				listItem.add(new Label("id", "" + entry.getNumericId()));
				int size;
				if (entry instanceof Page)
				{
					size = ((Page)entry).getSize();
				}
				else
				{
					size = ObjectProfiler.sizeof(entry);
				}
				listItem.add(new Label("size", (entry instanceof WicketInspector)
						? "(inspector)"
						: "" + Bytes.bytes(size)));
			}
		});
	}

