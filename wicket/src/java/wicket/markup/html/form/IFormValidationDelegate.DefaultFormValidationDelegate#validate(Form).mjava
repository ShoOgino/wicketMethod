    	/**
         * Validates all children of this form, recording all messages that are returned by the
         * validators.
         * @param form the form that the validation is applied to
         * @return the list of validation messages that were recorded during validation
         */
        public FeedbackMessages validate(Form form)
        {
            final FeedbackMessages messages = FeedbackMessages.get();
            form.visitChildren(FormComponent.class, new IVisitor()
            {
                public Object component(final Component component)
                {
                    ValidationErrorMessage message = ((FormComponent) component).validate();
                    if(message != ValidationErrorMessage.NO_MESSAGE)
                    {
                        if(log.isDebugEnabled())
                        {
                            log.debug("validation error: " + message);
                        }
                        messages.add(message);
                        // replace the model
                        ValidationErrorModelDecorator deco =
                            new ValidationErrorModelDecorator(component, message.getInput());
                        component.setModel(deco);
                    }
                    return IVisitor.CONTINUE_TRAVERSAL; // continue until the end
                }
            });
            return messages;
        }

