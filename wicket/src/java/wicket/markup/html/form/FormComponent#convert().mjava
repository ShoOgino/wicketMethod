	/**
	 * Converts and validates the conversion of the raw input string into the
	 * object specified by {@link FormComponent#getType()} and records any
	 * errors. Converted value is available thorugh
	 * {@link FormComponent#getConvertedInput()}
	 */
	@SuppressWarnings("unchecked")
	protected final void convert()
	{
		if (type == null)
		{
			try
			{
				convertedInput = convertValue(getInputAsArray());
			}
			catch (ConversionException e)
			{
				Map<String, Serializable> args = new HashMap<String, Serializable>();
				final Locale locale = e.getLocale();
				if (locale != null)
				{
					args.put("locale", locale);
				}
				args.put("exception", e);
				Format format = e.getFormat();
				if (format instanceof SimpleDateFormat)
				{
					args.put("format", ((SimpleDateFormat)format).toLocalizedPattern());
				}

				String typedResourceKey = "ConversionError." + e.getTargetType();
				String[] resourceKeys = new String[] { typedResourceKey, "ConversionError" };

				error(Arrays.asList(resourceKeys), args);
			}
		}
		else if (!Strings.isEmpty(getInput()))
		{
			final IConverter converter = getConverter(type);
			try
			{
				convertedInput = (T)converter.convertToObject(getInput(), getLocale());
			}
			catch (ConversionException e)
			{
				Map<String, Serializable> args = new HashMap<String, Serializable>();
				args.put("type", Classes.simpleName(type));
				final Locale locale = e.getLocale();
				if (locale != null)
				{
					args.put("locale", locale);
				}
				args.put("exception", e);
				Format format = e.getFormat();
				if (format instanceof SimpleDateFormat)
				{
					args.put("format", ((SimpleDateFormat)format).toLocalizedPattern());
				}


				final String typedResourceKey = "TypeValidator" + "." + Classes.simpleName(type);

				String[] resourceKeys = new String[] { typedResourceKey, "TypeValidator" };

				error(Arrays.asList(resourceKeys), args);
			}
		}
	}

