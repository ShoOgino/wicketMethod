		/**
		 * Validates all children of this form, recording all messages that are
		 * returned by the validators.
		 * 
		 * @param form the form that the validation is applied to
		 * @return the list of validation messages that were recorded during
		 *         validation
		 */
		public FeedbackMessages validate(Form form)
		{
			final FeedbackMessages messages = FeedbackMessages.get();
			form.visitChildren(FormComponent.class, new IVisitor()
			{
				public Object component(final Component component)
				{
					FormComponent formComponent = (FormComponent)component;
					final ValidationErrorMessage message = (formComponent).validate();

					if (message != ValidationErrorMessage.NO_MESSAGE)
					{
						if (log.isDebugEnabled())
						{
							log.debug("validation error: " + message);
						}
						messages.add(message);
						formComponent.setValid(false);
						formComponent.invalid();
					}
					else
					{
						formComponent.setValid(true);
						// set explicitly to reset any old value
					}

					// Continue until the end
					return IVisitor.CONTINUE_TRAVERSAL;
				}
			});
			return messages;
		}

