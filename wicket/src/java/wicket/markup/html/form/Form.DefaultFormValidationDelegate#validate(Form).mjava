        /**
         * Validates all children of this form, recording all messages that are
         * returned by the validators.
         * 
         * @param form
         *            the form that the validation is applied to
         * @return the list of validation messages that were recorded during
         *         validation
         */
        public FeedbackMessages validate(Form form)
        {
            final FeedbackMessages messages = FeedbackMessages.get();
            form.visitChildren(FormComponent.class, new IVisitor()
            {
                public Object component(final Component component)
                {
                    final ValidationErrorMessage message = ((FormComponent)component).validate();
                    if (message != ValidationErrorMessage.NO_MESSAGE)
                    {
                        if (log.isDebugEnabled())
                        {
                            log.debug("validation error: " + message);
                        }
                        messages.add(message);

                        // Replace the model
                        // TODO examine ways to avoid this
                        ValidationErrorModelDecorator deco = new ValidationErrorModelDecorator(
                                component, message.getInput());
                        component.setModel(deco);
                    }

                    // Continue until the end
                    return IVisitor.CONTINUE_TRAVERSAL;
                }
            });
            return messages;
        }

