	/**
	 * @see Component#onComponentTag(ComponentTag)
	 * @param tag
	 *            the abstraction representing html tag of this component
	 */
	protected void onComponentTag(final ComponentTag tag)
	{

		// must be attached to <input type="radio" .../> tag
		checkComponentTag(tag, "input");
		checkComponentTagAttribute(tag, "type", "radio");

		RadioGroup group = (RadioGroup)findParent(RadioGroup.class);
		if (group == null)
		{
			throw new WicketRuntimeException(
					"Radio component ["
							+ getPath()
							+ "] cannot find its parent RadioGroup. All Radio components must be a child of or below in the hierarchy of a RadioGroup component.");
		}

		// assign name and value
		tag.put("name", group.getInputName());
		tag.put("value", getPath());

		// compare the model objects of the group and self, if the same add the
		// checked attribute
		if (Objects.equal(group.getModelObject(), getModelObject()))
		{
			tag.put("checked", "checked");
		}

		if (group.wantOnSelectionChangedNotifications())
		{
			// url that points to this components IOnChangeListener method
			final String url = group.urlFor(IOnChangeListener.INTERFACE);

			try
			{
				Form form = group.getForm();
				tag.put("onClick", form.getJsForInterfaceUrl(url) );
			}
			catch (WicketRuntimeException ex)
			{
				// NOTE: do not encode the url as that would give invalid JavaScript
				tag.put("onClick", "location.href='" + url + "&" + group.getInputName()
						+ "=' + this.value;");
			}
		}
		
		// Default handling for component tag
		super.onComponentTag(tag);
	}

