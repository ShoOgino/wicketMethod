    /**
     * Sets error messages for form. First all childs (form components) are asked to
     * do their part of error handling, and after that, the registered (if any)
     * error handler of this form is called.
     * @param errors the recorded errors
     */
    public final void handleErrors(final UIMessages errors)
    {
        // call the validation handlers of the child components of this form
        // Traverse parents from this component up to the containing form
        // component calling any IValidationErrorHandler.validationError methods found
        // along the way.
        visitChildren(IValidationErrorHandler.class, new IVisitor()
        {
            public Object component(final Component component)
            {
                // call validation error handler
                ((IValidationErrorHandler) component).validationError(errors);
                // Stop at Form
                return (component instanceof Form) ? STOP_TRAVERSAL : CONTINUE_TRAVERSAL;
            }
        });

        // call the validation handler that is registered with this form, if any
        if (validationErrorHandler != null)
        {
            validationErrorHandler.validationError(errors);
        }
    }

