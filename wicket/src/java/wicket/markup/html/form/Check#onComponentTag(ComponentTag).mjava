	/**
	 * @see Component#onComponentTag(ComponentTag)
	 * @param tag
	 *            the abstraction representing html tag of this component
	 */
	protected void onComponentTag(final ComponentTag tag)
	{

		// must be attached to <input type="checkbox" .../> tag
		checkComponentTag(tag, "input");
		checkComponentTagAttribute(tag, "type", "checkbox");

		CheckGroup group = (CheckGroup)findParent(CheckGroup.class);
		String path = getPath();
		if (group == null)
		{
			throw new WicketRuntimeException(
					"Check component ["
							+ path
							+ "] cannot find its parent CheckGroup. All Check components must be a child of or below in the hierarchy of a CheckGroup component.");
		}

		// assign name and value
		tag.put("name", group.getInputName());
		tag.put("value", path);

		// check if the model collection of the group contains the model object.
		// if it does check the check box.
		Collection collection = (Collection)group.getModelObject();

		// check for npe in group's model object
		if (collection==null) {
			throw new WicketRuntimeException("CheckGroup ["+group.getPath()+"] contains a null model object, must be an object of type java.util.Collection");
		}
		
		String rawInput = group.getRawInput();
		if(rawInput != null)
		{
			if(rawInput.equals(path))
			{
				tag.put("checked", "checked");
			}
		}
		else if (collection.contains(getModelObject()))
		{
			tag.put("checked", "checked");
		}

		// Default handling for component tag
		super.onComponentTag(tag);
	}

