	/**
	 * Validates all children of this form and the form itself, recording all messages
	 * that are returned by the validators.
	 * @param form the form that the validation is applied to
	 */
	public void validate(final Form form)
	{
		// Visit all the form components and validate each
		form.visitFormComponents(new FormComponent.IVisitor()
		{
			public void formComponent(final FormComponent formComponent)
			{
				// Validate form component
				formComponent.validate();

				// If component is not valid (has an error)
				if (!formComponent.isValid())
				{
					// tell component to deal with invalidity
					formComponent.invalid();
				}
				else
				{
					// tell component that it is valid now
					formComponent.valid();
				}
			}
		});

		// only perform form validation if any validators are registered, and all form
		// components validated succesfully
		if ((form.validator != IFormValidator.NULL) && (!form.hasError()))
		{
			// record the current model
			ModelChange record = new ModelChange(form);
	
			// record the versioned property
			boolean wasVersioned = form.isVersioned();
	
			// set it to false (that won't have any effect for components that just override the method btw)
			form.setVersioned(false);
			try
			{
				// update
				form.updateFormComponentModels();
	
				// visit any validators of the form itself
				form.validator.validate(form);
			}
			finally
			{
				// rollback the updated model
				if (form.hasError())
				{
					record.undo();
				}
	
				// set versioned property to what it was before
				form.setVersioned(wasVersioned);
			}
		}
	}

