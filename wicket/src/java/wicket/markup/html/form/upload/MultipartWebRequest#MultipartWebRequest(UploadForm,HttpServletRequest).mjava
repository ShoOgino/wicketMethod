	/**
	 * Constructor
	 * 
	 * @param uploadForm
	 *            The form doing the uploading
	 * @param httpServletRequest
	 *            The servlet request
	 * @throws FileUploadException Thrown if something goes wrong with upload
	 */
	MultipartWebRequest(final UploadForm uploadForm, final HttpServletRequest httpServletRequest) throws FileUploadException
	{
		super(httpServletRequest);

		// Check that request is multipart
		final boolean isMultipart = FileUpload.isMultipartContent(httpServletRequest);
		if (!isMultipart)
		{
			throw new IllegalStateException("Request does not contain multipart content");
		}

        // The encoding that will be used to decode the string parameters
        // It should NOT be null at this point, but it may be 
        // if the older Servlet API 2.2 is used
        String encoding = httpServletRequest.getCharacterEncoding();

		// Parse multipart request into items
		final DiskFileUpload diskFileUpload = new DiskFileUpload();

		// set encoding specifically when we found it
		if (encoding != null)
		{
			diskFileUpload.setHeaderEncoding(encoding);
		}

		diskFileUpload.setSizeMax(uploadForm.maxSize.bytes());
		final List items = diskFileUpload.parseRequest(httpServletRequest);

		// Loop through items
		for (Iterator i = items.iterator(); i.hasNext();)
		{
			// Get next item
			final FileItem item = (FileItem)i.next();

			// If item is a form field
			if (item.isFormField())
			{
				// Set parameter value
				final String value;
				if (encoding != null)
				{
					try
					{
						value = item.getString(encoding);
					}
					catch (UnsupportedEncodingException e)
					{
						throw new WicketRuntimeException(e);
					}
				}
				else
				{
					value = item.getString();
				}
				parameters.put(item.getFieldName(), value);
			}
			else
			{
				// Add to file list
				files.put(item.getFieldName(), item);
			}
		}
	}

