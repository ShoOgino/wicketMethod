	/**
	 * @see wicket.Component#onComponentTagBody(MarkupStream, ComponentTag)
	 */
	protected final void onComponentTagBody(final MarkupStream markupStream,
			final ComponentTag openTag)
	{
		// Buffer to hold generated body
		final StringBuffer buffer = new StringBuffer();

		// Iterate through choices
		final List choices = getChoices();

		// Loop through choices


		for (int index = 0; index < choices.size(); index++)
		{
			// Get next choice
			final Object choice = choices.get(index);

			// Get label for choice
			final String label = getChoiceRenderer().getDisplayValue(choice);

			// If there is a display value for the choice, then we know that the
			// choice is automatic in some way. If label is /null/ then we know
			// that the choice is a manually created radio tag at some random
			// location in the page markup!
			if (label != null)
			{
				// Append option suffix
				buffer.append(getPrefix());

				String id = getChoiceRenderer().getIdValue(choice, index);
				final String idAttr = getInputName() + "_" + id;

				// Add radio tag
				buffer.append("<input name=\"" + getInputName() + "\"" + " type=\"radio\""
						+ (isSelected(choice, index) ? " checked=\"checked\"" : "") + " value=\""
						+ id + "\" id=\"" + idAttr + "\"");

				// Should a roundtrip be made (have onSelectionChanged called)
				// when the option is clicked?
				if (wantOnSelectionChangedNotifications())
				{
					final String url = urlFor(IOnChangeListener.class);

					try
					{
						Form form = getForm();
						buffer.append(" onclick=\"" +  form.getJsForInterfaceUrl(url)  + ";\"");
					}
					catch (WicketRuntimeException ex)
					{
						// NOTE: do not encode the url as that would give invalid
						// JavaScript
						buffer.append(" onclick=\"" + url + "&" + getInputName() + "="
								+ id + "';\"");
					}
				}

				buffer.append("/>");

				// Add label for radio button
				String display = getLocalizer().getString(label, this, label);
				String escaped = Strings.escapeMarkup(display, false, true);
				buffer.append("<label for=\"" + idAttr + "\">" + escaped + "</label>");

				// Append option suffix
				buffer.append(getSuffix());
			}
		}

		// Replace body
		replaceComponentTagBody(markupStream, openTag, buffer.toString());
	}

