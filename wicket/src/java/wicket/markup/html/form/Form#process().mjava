	/**
	 * Process the form. Though you can override this method to provide your whole own algoritm,
	 * it is not recommended to do so.
	 * <p>
	 * See the class documentation for further details on the form processing
	 * </p>
	 */
	protected void process()
	{
		if (multiPart) 
		{
			// Change the request to a multipart web request so parameters are
			// parsed out correctly
			final HttpServletRequest request = ((WebRequest)getRequest()).getHttpServletRequest();
			try
			{
				final MultipartWebRequest multipartWebRequest = new MultipartWebRequest(this.maxSize, request);
				getRequestCycle().setRequest(multipartWebRequest);
			}
			catch (FileUploadException e)
			{
				// Create model with exception and maximum size values
				final HashMap model = new HashMap();
				model.put("exception", e);
				model.put("maxSize", maxSize);

				if (e instanceof SizeLimitExceededException)
				{
					// Resource key should be <form-id>.uploadTooLarge to override default message
					final String defaultValue = "Upload must be less than " + maxSize;
					String msg = getString(getId() + ".uploadTooLarge", Model.valueOf(model), defaultValue);
					error(msg);

					if (log.isDebugEnabled())
					{
						log.error(msg, e);
					}
					else
					{
						log.error(msg);
					}
				}
				else
				{
					// Resource key should be <form-id>.uploadFailed to override default message
					final String defaultValue = "Upload failed: " + e.getLocalizedMessage();
					String msg = getString(getId() + ".uploadFailed", Model.valueOf(model), defaultValue);
					error(msg);

					log.error(msg, e);
				}
				
				// don't process the form if there is a FileUploadException
				return;
			}

		}
		
		// first, see if the processing was triggered by a Wicket button
		final Button submittingButton = findSubmittingButton();

		// when processing was triggered by a Wicket button and that button indicates
		// it wants to be called immediately (without validating), call onSubmit right away.
		if (submittingButton != null && (submittingButton.isImmediate()))
		{
			submittingButton.onSubmit();
		}
		else
		{
			// as processing was not triggered by a button with immediate == true,
			// we execute validation now before anything else
			validate();

			// If a validation error occurred
			if (hasError())
			{
				// mark all children as invalid
				markFormComponentsInvalid();

				// let subclass handle error
				onError();
			}
			else
			{
				// before updating, call the interception method for clients
				beforeUpdateFormComponentModels();

				// Update model using form data
				updateFormComponentModels();

				// Persist FormComponents if requested
				persistFormComponentData();

				// let clients handle further processing
				delegateSubmit(submittingButton);
			}
		}
	}

