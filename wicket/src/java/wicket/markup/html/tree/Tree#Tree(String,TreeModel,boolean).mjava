    /**
     * Construct using the given model as the tree model to use. A new tree state will
     * be constructed by calling newTreeState. If parameter makeTreeModelUnique is true,
     * all tree nodes will also be wrapped in an instance of {@link IdWrappedUserObject}
     * in order to attach a unique id to them. If makeTreeModelUnique is false, the model
     * will be used as is, and the user is responsible for the userObjects of the tree
     * nodes being unique within the tree model.
     * @param componentName The name of this container
     * @param model the underlying tree model
     * @param makeTreeModelUnique whether to make the user objects of the tree model
     * unique. If true, the default implementation will wrapp all user objects in
     * instances of {@link IdWrappedUserObject}. If false, users must ensure that the
     * user objects are unique within the tree in order to have the tree working properly
     */
    public Tree(final String componentName, final TreeModel model,
    		final boolean makeTreeModelUnique)
    {
        super(componentName);
        this.treeState = newTreeState(model);
        applySelectedPaths(treeState);
        if(makeTreeModelUnique)
        {
        	makeUnique(model);
        }
    }

