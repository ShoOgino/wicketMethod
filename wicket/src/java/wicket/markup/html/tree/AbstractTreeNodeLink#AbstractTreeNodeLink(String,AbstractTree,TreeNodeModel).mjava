    /**
     * Construct.
     * @param componentName name of component
     * @param tree tree component
     * @param node current node (subject)
     */
    public AbstractTreeNodeLink(final String componentName,
            final AbstractTree tree, final TreeNodeModel node)
    {
        super(componentName);
        this.tree = tree;
        this.node = node;

        // get the user object. WARNING: do not call node.getUserObject, as we want the
        // wrapped user object in case it was made unique
        Object userObject = node.getTreeNode().getUserObject();

        // links can change, but the target user object should be the same, so
        // if a new link is added that actually points to the same userObject, it will
        // replace the old one thus allowing the old link to be GC-ed.
        // Te id is a combination of the 
        String linkId = componentName + String.valueOf(userObject.hashCode());
        id = linkId;

        // add the link to the tree. By adding it to the tree instead of one of the tree's nested components,
        // we have it decoupled and thus reachable for as long as the tree exists
        tree.addLink(this);
    }

