        /**
         * Renders this container.
         * @param cycle The request cycle
         */
        protected void handleRender(final RequestCycle cycle)
        {
            // Ask parents for markup stream to use
            final MarkupStream markupStream = findMarkupStream();

            // Save position in markup stream
            final int markupStart = markupStream.getCurrentIndex();

            NodeModel model = (NodeModel) getModel();
            int level = model.getTreeNode().getLevel();

            // Loop through the markup in this container for each child
            // container
            if (level > 0)
            {
                for (int i = 0; i < level; i++)
                {
                    // Get name of component for filler i
                    final String componentName = Integer.toString(i);
                    Filler filler = (Filler) get(componentName);

                    if (filler == null)
                    {
                        filler = new Filler(i);
                        populateFiller(filler);
                        add(filler);
                    }

                    // Rewind to start of markup for kids
                    markupStream.setCurrentIndex(markupStart);

                    // add sub
                    // Render cell
                    filler.render(cycle);
                }
            }
            else
            {
                markupStream.skipComponent();
            }
        }

