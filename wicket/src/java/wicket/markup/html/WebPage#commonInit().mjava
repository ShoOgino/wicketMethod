	/**
	 * Common code executed by constructors.
	 */
	private void commonInit()
	{
		// Add a Body container if the associated markup contains a <body> tag
		// get markup stream gracefully
		MarkupFragment fragment = getAssociatedMarkup(false);
		if (fragment == null)
		{
			throw new MarkupNotFoundException(
					"Each Page must have associated markup. Unable to find the markup file for Page: "
							+ this.toString());
		}
		MarkupStream markupStream = new MarkupStream(fragment);
		
		// The <body> container. It can be accessed, replaced
		// and attribute modifiers can be attached. <body> tags without
		// wicket:id get automatically a wicket:id assigned.
		while (markupStream.hasMoreComponentTags())
		{
			final ComponentTag tag = markupStream.getTag();
			if (tag.isOpen() && tag.isBodyTag())
			{
				// Add a default container if the tag has the default
				// name. If the tag has a wicket:id, than the user
				// must create the component.
				if (BodyOnLoadHandler.BODY_ID.equals(tag.getId()))
				{
					new HtmlBodyContainer(this, tag.getId());
				}
				// remember the id of the tag
				bodyContainer = new BodyContainer(this, tag.getId());
				break;
			}
		}

		// The <head> container. It can be accessed, replaced
		// and attribute modifiers can be attached.
		markupStream.setCurrentIndex(0);
		while (markupStream.hasMoreComponentTags())
		{
			final ComponentTag tag = markupStream.getTag();
			if (tag.isOpen() && tag.isHeadTag())
			{
				// Add a default container if the tag has the default
				// name. If the tag has a wicket:id, than the user
				// must create the component.
				if (HtmlHeaderSectionHandler.HEADER_ID.equals(tag.getId()))
				{
					new HtmlHeaderContainer(this, tag.getId());
				}
				break;
			}
		}

		// if automatic multi window support is on, add a page checker instance
		if (getApplication().getPageSettings().getAutomaticMultiWindowSupport())
		{
			add(new PageMapChecker());
		}
	}

