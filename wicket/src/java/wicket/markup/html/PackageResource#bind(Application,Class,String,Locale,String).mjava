	/**
	 * Binds a the resource to the given application object. Will create the
	 * resource if not already in the shared resources of the application
	 * object.
	 * 
	 * @param application
	 *            The application to bind to.
	 * @param scope
	 *            The scope of the resource.
	 * @param name
	 *            The name of the resource (like &quot;myfile.js&quot;), or a
	 *            regular expression to match against the contents of the
	 *            package of the provided scope class (eg &quot;.*\\.js&quot;
	 *            will add all the files with extension &quot;js&quot; from that
	 *            package).
	 * @param locale
	 *            The locale of the resource.
	 * @param style
	 *            The style of the resource.
	 */
	public static void bind(Application application, Class scope, String name, Locale locale,
			String style)
	{
		if (scope == null)
		{
			throw new IllegalArgumentException("argument scope may not be null");
		}
		if (name == null)
		{
			throw new IllegalArgumentException("argument name may not be null");
		}

		// first check on a direct hit for efficiency
		if (exists(scope, name, locale, style))
		{
			// we have got a hit, so we may safely assume the name
			// argument is not a regular expression, and can thus
			// just add the resource and return
			get(scope, name, locale, style);
		}
		else
		{
			// interpret the name argument as a regexp; loop through
			// the resources in the package of the provided scope, and
			// add anything that matches
			Pattern pattern = Pattern.compile(name);
			String packageRef = Strings.replaceAll(PackageName.forClass(scope).getName(), ".", "/");
			ClassLoader loader = scope.getClassLoader();
			try
			{
				// loop through the resources of the package
				Enumeration packageResources = loader.getResources(packageRef);
				while (packageResources.hasMoreElements())
				{
					URL resource = (URL)packageResources.nextElement();
					BufferedReader reader = new BufferedReader(new InputStreamReader(resource
							.openStream()));
					String entry = null;
					try
					{
						while ((entry = reader.readLine()) != null)
						{
							// if the current entry matches the provided regexp
							if (pattern.matcher(entry).matches())
							{
								// we add the entry as a package resource
								get(scope, entry, locale, style);
							}
						}
					}
					finally
					{
						IOUtils.closeQuietly(reader);
					}

				}
			}
			catch (IOException e)
			{
				throw new WicketRuntimeException(e);
			}
		}
	}

