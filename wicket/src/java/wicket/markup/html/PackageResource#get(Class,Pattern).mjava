	/**
	 * Gets non-localized resources for a given set of criteria. Multiple
	 * resource can be loaded for the same criteria if they match the pattern.
	 * If no resources were found, this method returns null.
	 * 
	 * @param scope
	 *            This argument will be used to get the class loader for loading
	 *            the package resource, and to determine what package it is in.
	 *            Typically this is the calling class/ the class in which you
	 *            call this method
	 * @param pattern
	 *            Regexp pattern to match resources
	 * @return The resources or null if none were found
	 */
	public static PackageResource[] get(Class scope, Pattern pattern)
	{
		List resources = null;
		String packageRef = Strings.replaceAll(PackageName.forClass(scope).getName(), ".", "/");
		ClassLoader loader = scope.getClassLoader();
		try
		{
			// loop through the resources of the package
			Enumeration packageResources = loader.getResources(packageRef);
			while (packageResources.hasMoreElements())
			{
				URL resource = (URL)packageResources.nextElement();
				URLConnection connection = resource.openConnection();
				if(connection instanceof JarURLConnection)
				{
					JarFile jf = ((JarURLConnection)connection).getJarFile();
					Enumeration enumeration = jf.entries();
					while(enumeration.hasMoreElements())
					{
						JarEntry je = (JarEntry)enumeration.nextElement();
						String name = je.getName();
						if(name.startsWith(packageRef))
						{
							name = name.substring(packageRef.length()+1);
							if (pattern.matcher(name).matches())
							{
								if (resources == null)
								{
									resources = new ArrayList();
								}
								// we add the entry as a package resource
								resources.add(get(scope, name, null, null));
							}
						}
					}
				}
				else 
				{
					InputStream inputStream = connection.getInputStream();
					if (inputStream != null)
					{
						BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
						String entry = null;
						try
						{
							while ((entry = reader.readLine()) != null)
							{
								// if the current entry matches the provided regexp
								if (pattern.matcher(entry).matches())
								{
									if (resources == null)
									{
										resources = new ArrayList();
									}
									// we add the entry as a package resource
									resources.add(get(scope, entry, null, null));
								}
							}
						}
						finally
						{
							IOUtils.closeQuietly(reader);
						}
					}
					else
					{
						log.error("though " + resource + " was listed as a resource by " + packageRef
								+ ", it did not return an imput stream and can thus not be read");
					}
				}
			}
		}
		catch (IOException e)
		{
			throw new WicketRuntimeException(e);
		}

		return (resources != null) ? (PackageResource[])resources
				.toArray(new PackageResource[resources.size()]) : null;
	}

