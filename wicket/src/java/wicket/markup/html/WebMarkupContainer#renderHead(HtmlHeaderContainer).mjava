	/**
	 * Print to the web response what ever the component wants to contribute to
	 * the head section.
	 * 
	 * @see wicket.markup.html.IHeaderContributor#renderHead(wicket.markup.html.internal.HtmlHeaderContainer)
	 * 
	 * @param container
	 *            The HtmlHeaderContainer
	 */
	public void renderHead(final HtmlHeaderContainer container)
	{
		// Ask the child component if it has something to contribute
		WebMarkupContainer headerPart = getHeaderPart();

		// If the child component has something to contribute to
		// the header and in case the very same Component has not
		// contributed to the page, than ...
		// A component's header section must only be added once,
		// no matter how often the same Component has been added
		// to the page or any other container in the hierachy.
		if ((headerPart != null) && (container.get(headerPart.getId()) == null))
		{
			container.autoAdd(headerPart);

			// Check if the component requires some <body onload="..">
			// attribute to be copied to the page's body tag.
			checkBodyOnLoad();
		}
		else if (headerPart != null)
		{
			// already added but all the components in this header part must be
			// touched (that they are rendered)
			Response response = getRequestCycle().getResponse();
			try
			{
				getRequestCycle().setResponse(NullResponse.getInstance());
				container.autoAdd(headerPart);
			}
			finally
			{
				getRequestCycle().setResponse(response);
			}
		}

		// get head and body contributions in one loop
		// NOTE: THIS CODE MUST BE IN SYNC WITH SAME PIECE OF CODE in WEBCOMPONENT
		List behaviours = getBehaviours();
		for (Iterator i = behaviours.iterator(); i.hasNext();)
		{
			IBehaviour behaviour = (IBehaviour)i.next();
			if (behaviour instanceof IHeaderContributor)
			{
				((IHeaderContributor)behaviour).renderHead(container);
			}

			if (behaviour instanceof IBodyOnloadContributor)
			{
				String stmt = ((IBodyOnloadContributor)behaviour).getBodyOnload();
				if (stmt != null)
				{
					((WebPage)getPage()).appendToBodyOnLoad(stmt);
				}
			}
		}
	}

