	/**
	 * Gets the header part for the markup container. Returns null if it doesn't
	 * contribute to a header.
	 * 
	 * @return the header part for this markup container or null if it doesn't
	 *         contribute anything.
	 */
	public final WebMarkupContainer getHeaderPart()
	{
		// gracefull getAssociateMarkupStream. Throws no exception in case
		// markup is not found
		final MarkupStream associatedMarkupStream = getApplication().getMarkupCache()
				.getMarkupStream(this, null, false);

		// No associated markup => no header section
		if (associatedMarkupStream == null)
		{
			return null;
		}

		int index = -1;
		if (associatedMarkupStream.getHeaderIndex() == Markup.HEADER_NOT_YET_EVALUATED)
		{
			// Iterate the markup and find <wicket:head>
			do
			{
				final MarkupElement element = associatedMarkupStream.get();
				if (element instanceof WicketTag)
				{
					final WicketTag wTag = (WicketTag)element;
					if (wTag.isHeadTag() == true)
					{
					    index = associatedMarkupStream.getCurrentIndex();
					    break;
					}
				}
			}
			while (associatedMarkupStream.next() != null);
		}
		else if (associatedMarkupStream.getHeaderIndex() == Markup.HEADER_NO_HEADER_FOUND)
		{
		    ; // Don't do anything
		}
		else
		{
		    index = associatedMarkupStream.getHeaderIndex();
		}
		
		// If markup contains a header section, handle it now.
		if (index >= 0)
		{
		    associatedMarkupStream.setCurrentIndex(index);
		    
			final MarkupElement element = associatedMarkupStream.get();
			if (element instanceof WicketTag)
			{
				final WicketTag wTag = (WicketTag)element;
				if (wTag.isHeadTag() == true)
				{
				    associatedMarkupStream.setHeaderIndex(index);
				    
				    // found <wicket:head>
				    // create a unique id for the HtmlHeaderContainer to be created
					final String headerId = "_" + Classes.name(this.getClass()) + "Header";
					
					// Create the header container and associate the markup with it
					WebMarkupContainer headerContainer = new HtmlHeaderContainer(headerId,
							associatedMarkupStream);
					
					// In case components are part of the region, the user must 
					// have provided the component objects by means of addToHeader().
					// All the component provided by the user, must now be added
					// to the newly created header container.
					if (this.headerComponents != null)
					{
						for (Iterator iter = headerComponents.iterator(); iter.hasNext();)
						{
					        headerContainer.add((Component)iter.next());
						}
					}
					
					// The container does have a header component
					return headerContainer;
				}
			}
		}

		if (this.headerComponents != null)
		{
			throw new MarkupException(
					"You have added header components but did not specify a <wicket:head> region in your Page markup: "
							+ this.toString());
		}
		
		// Though the container does have markup, it does not have a 
		// <wicket:head> region.
		return null;
	}

