	/**
	 * Gets the header part of the Panel/Border. Returns null if it doesn't have
	 * a header tag.
	 * 
	 * @param parent
	 *            The parent of this component
	 * 
	 * @param index
	 *            A unique index
	 * @param markupClass
	 *            The java class the wicket:head tag is directly associated with
	 * @return the header part for this panel/border or null if it doesn't have
	 *         a wicket:head tag.
	 */
	private final HeaderPartContainer getHeaderPart(MarkupContainer parent,
			final Class markupClass, final int index)
	{
		// Gracefully getAssociateMarkupStream. Throws no exception in case
		// markup is not found
		final MarkupStream markupStream = getAssociatedMarkupStream(false);

		// Position markup stream at beginning of header tag
		markupStream.setCurrentIndex(index);

		// Create a HtmlHeaderContainer for the header tag found
		final ComponentTag tag = markupStream.getTag(false);
		if ((tag != null) && tag.isWicketHeadTag())
		{
			// found <wicket:head>. Create a unique id for the 
			// HtmlHeaderContainer to be created
			final String headerId = Component.AUTO_COMPONENT_PREFIX
					+ Classes.simpleName(markupClass) + getVariation()
					+ "Header" + index;

			// Create the header container and associate the markup with
			// it
			String scope = tag.getAttributes().getString(
					markupStream.getWicketNamespace() + ":scope");
			final HeaderPartContainer headerContainer = newHeaderPartContainer(
					parent, headerId, scope);
			headerContainer.setMyMarkupStream(markupStream);
			headerContainer.setRenderBodyOnly(true);

			// The container does have a header component
			return headerContainer;
		}

		throw new WicketRuntimeException("Programming error: expected a WicketTag: "
				+ markupStream.toString());
	}

