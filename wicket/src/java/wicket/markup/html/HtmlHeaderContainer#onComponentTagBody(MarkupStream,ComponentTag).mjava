	/**
	 * First render the body of the component. And if it is the header component
	 * of a Page (compared to a Panel or Border), than get the header sections
	 * from all component in the hierachie and render them as well.
	 * 
	 * @see wicket.MarkupContainer#onComponentTagBody(wicket.markup.MarkupStream,
	 *      wicket.markup.ComponentTag)
	 */
	protected final void onComponentTagBody(MarkupStream markupStream, ComponentTag openTag)
	{
		// We are able to automatically add <head> to the page if it is
		// missing. But we only want to add it, if we have content to be
		// written to its body. Thus we first write the output into a
		// StringResponse and if not empty, we copy it to the original
		// web response.

		// Temporarily replace the web response with a String response
		final Response webResponse = this.getResponse();

		try
		{
			final StringResponse response = new StringResponse();
			this.getRequestCycle().setResponse(response);

			// In any case, first render the header section directly associated
			// with the markup
			super.onComponentTagBody(markupStream, openTag);

			// If the parent component is a Page (or a bordered Page), we must
			// now include the header sections of all components in the
			// component hierarchie.
			MarkupContainer parent = getParent();

			// Usually only Page and Border implement IHeaderRenderer. Border
			// does in order to support bordered pages.
			if (parent instanceof IHeaderRenderer)
			{
				((IHeaderRenderer)parent).renderHeaderSections(this);
			}
			else
			{
				throw new WicketRuntimeException(
						"Programming error: 'parent' should be a Page or a Border implementing IHeaderRenderer");
			}

			// Automatically add <head> if necessary
			String output = response.toString();
			if (output.length() > 0)
			{
				if (output.charAt(0) == '\r')
				{
					for (int i=2; i < output.length(); i += 2)
					{
					    char ch = output.charAt(i);
					    if (ch != '\r')
					    {
							output = output.substring(i - 2);
					        break;
					    }
					}
				}
				else if (output.charAt(0) == '\n')
				{
					for (int i=1; i < output.length(); i++)
					{
					    char ch = output.charAt(i);
					    if (ch != '\n')
					    {
							output = output.substring(i - 1);
					        break;
					    }
					}
				}
			}
			
			if (output.length() > 0)
			{
				webResponse.write("<head>");
				webResponse.write(output);
				webResponse.write("</head>");
			}
		}
		finally
		{
			// Restore the original response
			this.getRequestCycle().setResponse(webResponse);
		}
	}

