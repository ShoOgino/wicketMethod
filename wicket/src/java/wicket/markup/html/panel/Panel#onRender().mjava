    /**
     * Renders this component.
     */
    protected final void onRender()
    {
        // Render the tag that included this html compoment
        final MarkupStream markupStream = findMarkupStream();
        
		// Allow the component to be re-rendered without a page. Partial
		// re-rendering is a requirement of AJAX.
		if (this.markupStreamPosition < 0)
		{
			// Remember the position while rendering the component the first time
			this.markupStreamPosition = markupStream.getCurrentIndex();
		}
		else
		{
			// Re-set the markups index to the beginning of the component tag
			markupStream.setCurrentIndex(this.markupStreamPosition);
		}

        // True if our panel is referenced by <wicket:panel>
        final boolean atOpenTag = markupStream.atOpenTag();

        // In order to be html compliant (though we are xhtml compliant already) 
        // and even more intuitive, we open up the tag, change it from open-close to
        // open, the panel now becomes the tag body and we'll close it manually
        // later.
        final ComponentTag openTag = markupStream.getTag().mutable();
        openTag.setType(XmlTag.OPEN);
        if (getRenderBodyOnly() == false)
        {
            renderComponentTag(openTag);
        }

        // Render the associated markup
        renderAssociatedMarkup("panel",
                "Markup for a panel component has to contain part '<wicket:panel>'");
        
        if (getRenderBodyOnly() == false)
        {
	        // Close the manually opened panel tag.
	        getResponse().write(openTag.syntheticCloseTagString());
        }
        
        // Skip opening tag
		markupStream.next();
		
        // If we are at an open tag, then there is nested preview markup
        if (atOpenTag)
        {
			// Skip any raw markup in the body
			markupStream.skipRawMarkup();
			
			// Open tag must have close tag
			if (!markupStream.atCloseTag())
			{
				// There must be a component in this discarded body
				markupStream
						.throwMarkupException("Expected close tag.  Possible attempt to embed component(s) "
								+ "in the body of a component which discards its body");
			}
	        
	        // Skip closing tag
			markupStream.next();
        }
    }

