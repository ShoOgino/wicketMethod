	/**
	 * Components which have associated markup files or which need special
	 * treatment to find the markup, such as Fragment, must implement
	 * IMarkupProvider. Fragment is similar to Panel, which has an associated
	 * markup file, and hence requires to implement IMarkupProvider as well.
	 * 
	 * @see wicket.markup.html.IMarkupProvider#getMarkupFragment(java.lang.String)
	 */
	public MarkupFragment getMarkupFragment(final String path)
	{
		// If markupProvider == null, than we assume the markup fragment to be
		// in the fragment's parent markup.
		if (this.markupProvider == null)
		{
			// Find the Fragment's parent with associated markup file
			MarkupContainer parent = getParent();
			while ((parent != null) && !(parent instanceof IMarkupProvider))
			{
				parent = parent.getParent();
			}

			if (parent == null)
			{
				throw new WicketRuntimeException(
						"Component has no parent with external markup file: " + getId());
			}

			// Find the markup fragment with the markup path provided by the
			// user
			MarkupFragment fragment = ((IMarkupProvider)parent).getMarkupFragment(this.markupId + Component.PATH_SEPARATOR + path);
			if (fragment == null)
			{
				throw new WicketRuntimeException(
						"Unable to find the markup fragment with markup path '" + path
								+ "'. Component: " + getId());
			}

			return fragment;
		}

		// Find the fragment based on the markup path and the Container provided
		// by the user
		MarkupFragment fragment = ((IMarkupProvider)this.markupProvider)
				.getMarkupFragment(this.markupId);
		if (fragment == null)
		{
			throw new WicketRuntimeException(
					"Unable to find the markup fragment with markup path '" + path
							+ "' in markup provided by container: " + this.markupProvider.getId()
							+ ". Component: " + getId());
		}

		return fragment;
	}

