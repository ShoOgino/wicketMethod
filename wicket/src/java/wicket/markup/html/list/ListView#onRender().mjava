	/**
	 * Renders this ListView (container).
	 */
	protected void onRender()
	{
		// Ask parents for markup stream to use
		final MarkupStream markupStream = findMarkupStream();

		// Save position in markup stream
		final int markupStart = markupStream.getCurrentIndex();

		// Get number of listItems to be displayed
		final int size = getViewSize();
		if (size > 0)
		{
			if (optimizeRenderProcess == false)
			{
				// Automatically rebuild all ListItems before rendering the
				// list view
				removeAll();
			}
			else
			{
				// Remove all ListItems no longer required
				// TODO or does it make more sense to flag them being rendered
				// and thus avoid the error msg?
				final int maxIndex = firstIndex + size;
				for (final Iterator iterator = iterator(); iterator.hasNext();)
				{
					// Get next child component
					final ListItem child = (ListItem)iterator.next();

					// Is the child of the correct class (or was no class
					// specified)?
					if (child != null)
					{
						final int index = child.getIndex();
						if ((index < firstIndex) || (index >= maxIndex))
						{
							iterator.remove();
						}
					}
				}
			}

			// Loop through the markup in this container for each child
			// container
			for (int i = 0; i < size; i++)
			{
				int index = firstIndex + i;

				// Get the name of the component for listItem i
				final String componentName = Integer.toString(index);

				// If this component does not already exist, populate it
				ListItem listItem = (ListItem)get(componentName);
				if (listItem == null)
				{
					// Create listItem for index i of the list
					listItem = newItem(index);

					onBeginPopulateItem(listItem);
					populateItem(listItem);

					// Add cell to list view
					add(listItem);
				}

				// Rewind to start of markup for kids
				markupStream.setCurrentIndex(markupStart);

				// Render cell
				renderItem(listItem, i >= (size - 1));
			}
		}
		else
		{
			removeAll();
			markupStream.skipComponent();
		}
	}

