	/**
	 * Get the first page link to render. Adjust the first page link based on
	 * the current PageableListView page displayed.
	 */
	private void setStartIndex()
	{
		// Which startIndex are we currently using
		int firstListItem = this.startIndex;

		// How many page links shall be displayed
		int viewSize = getViewSize();
		int margin = getMargin();

		// What is the PageableListView's page index to be displayed
		int currentPage = pageableListView.getCurrentPage();

		// Make sure the current page link index is within the current
		// window taking the left and right margin into account
		if (currentPage < (firstListItem + margin))
		{
			firstListItem = currentPage - margin;
		}
		else if((currentPage >= (firstListItem + viewSize - margin)))
		{

			firstListItem = (currentPage + margin + 1) - viewSize;
		}

		// Make sure the first index is >= 0 and the last index is <=
		// than the last page link index.
		if ((firstListItem + viewSize) >= pageableListView.getPageCount())
		{
			firstListItem = pageableListView.getPageCount() - viewSize;
		}

		if (firstListItem < 0)
		{
			firstListItem = 0;
		}

		if ((viewSize != getIterations()) || (this.startIndex != firstListItem))
		{
			this.modelChanging();

			// Tell the ListView what the new start index shall be
			addStateChange(new StartIndexChange(this.startIndex));
			this.startIndex = firstListItem;
			
			this.setIterations(Math.min(viewSize,pageableListView.getPageCount()));

			this.modelChanged();

			// force all children to be re-rendered
			removeAll();
		}
	}

