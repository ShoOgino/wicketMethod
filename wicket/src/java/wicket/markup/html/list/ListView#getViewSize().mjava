	/**
	 * Based on the model object's list size, firstIndex and view size, determine what the
	 * view size really will be. E.g. default for viewSize is Integer.MAX_VALUE, if not set
	 * via setViewSize(). If the underlying list has 10 elements, the value returned by
	 * getViewSize() will be 10 if startIndex = 0.
	 * @return The number of listItems to be populated and rendered.
	 */
	public int getViewSize()
	{
		int size = this.viewSize;

		// If model object (list view) == null and viewSize has not been
		// deliberately changed, than size = 0.
		Object modelObject = getModelObject();
		if ((modelObject == null) && (viewSize == Integer.MAX_VALUE))
		{
			size = 0;
		}
		else if (modelObject instanceof List)
		{
			// Adjust view size to model object's list size
			final int modelSize = ((List)modelObject).size();
			if (firstIndex > modelSize)
			{
				return 0;
			}

			if ((size == Integer.MAX_VALUE) || ((firstIndex + size) > modelSize))
			{
				size = modelSize - firstIndex;
			}
		}
		else if (viewSize == Integer.MAX_VALUE)
		{
			// The model is not a list and size is not set; probably an error
			log.warn("model object (" + modelObject
					+ ") is not a List and the view size is not explicitly set");
		}

		// firstIndex + size must be smaller than Integer.MAX_VALUE
		if ((Integer.MAX_VALUE - size) <= firstIndex)
		{
			throw new IllegalStateException("firstIndex + size must be smaller than Integer.MAX_VALUE");
		}

		return size;
	}

