	/**
	 * Find the markup fragment for the component with 'path'
	 * 
	 * @param path
	 *            The markup path to find the fragment
	 * @param throwException
	 *            If true, throw an exception if fragment not found
	 * @return MarkupFragment Might be null, if fragment not found
	 */
	public MarkupFragment findMarkupFragment(final String path, final boolean throwException)
	{
		if ((path == null) || (path.length() == 0))
		{
			throw new IllegalArgumentException("Parameter 'path' must not be null");
		}

		if ((this.markup != null) && (this.markupFragments == null))
		{
			initialize();
		}

		// All component tags are registered with the cache
		if (this.pathToFragment == null)
		{
			if (throwException == true)
			{
				throw new MarkupException("Markup not found for tag with path: " + path
						+ "; The markup does not have any Wicket tag");
			}

			// not found
			return null;
		}

		// Get the fragment from the cache
		MarkupFragment fragment = this.pathToFragment.get(path);
		if (fragment == null)
		{
			if (throwException == true)
			{
				throw new MarkupException("Markup not found for tag with path: " + path);
			}

			return null;
		}

		return fragment;
	}

