	/**
	 * Load markup and add a {@link ModificationWatcher}to the markup resource.
	 * 
	 * @param key
	 *            The key for the resource
	 * @param markupResource
	 *            The markup file to load and begin to watch
	 * @return The markup in the file
	 */
	private Markup loadMarkupAndWatchForChanges(final String key, final IResourceStream markupResource)
	{
		try
		{
			// Watch file in the future
			final ModificationWatcher watcher = application.getResourceWatcher();

			if (watcher != null)
			{
				watcher.add(markupResource, new IChangeListener()
				{
					public void onChange()
					{
						synchronized (markupCache)
						{
							try
							{
								log.info("Reloading markup from " + markupResource);
								loadMarkup(key, markupResource);
							}
							catch (ParseException e)
							{
								log.error("Unable to parse markup from " + markupResource, e);
							}
							catch (ResourceStreamNotFoundException e)
							{
								log.error("Unable to find markup from " + markupResource, e);
							}
							catch (IOException e)
							{
								log.error("Unable to read markup from " + markupResource, e);
							}
						}
					}
				});
			}

			log.info("Loading markup from " + markupResource);

			return loadMarkup(key, markupResource);
		}
		catch (ParseException e)
		{
			throwException(e, markupResource, "Unable to parse markup from ");
		}
		catch (MarkupException e)
		{
			throwException(e, markupResource, e.getMessage());
		}
		catch (ResourceStreamNotFoundException e)
		{
			throwException(e, markupResource, "Unable to find markup from ");
		}
		catch (IOException e)
		{
			throwException(e, markupResource, "Unable to read markup from ");
		}

		return Markup.NO_MARKUP;
	}

