	/**
	 * Load markup from an IResourceStream and add an {@link IChangeListener}to
	 * the {@link ModificationWatcher}so that if the resource changes, we can
	 * reload it automatically.
	 * 
	 * @param key
	 *            The key for the resource
	 * @param markupResourceStream
	 *            The markup stream to load and begin to watch
	 * @param containerClass
	 *            The Class the associated stream is directly associated
	 * @param container
	 *            The container requesting the markup
	 * @return The markup in the stream
	 */
	private final Markup loadMarkupAndWatchForChanges(final String key,
			final IResourceStream markupResourceStream, final Class containerClass,
			final MarkupContainer container)
	{
		// Watch file in the future
		final ModificationWatcher watcher = application.getResourceWatcher();
		if (watcher != null)
		{
			watcher.add(markupResourceStream, new IChangeListener()
			{
				public void onChange()
				{
					log.info("Reloading markup from " + markupResourceStream);
					loadMarkup(key, markupResourceStream, containerClass, container);

					// In case of an error or if markup does not exist ...
					// if (markup == Markup.NO_MARKUP)
					// {
					// watcher.remove(markupResourceStream);
					// }
				}
			});
		}

		log.info("Loading markup from " + markupResourceStream);
		return loadMarkup(key, markupResourceStream, containerClass, container);
	}

