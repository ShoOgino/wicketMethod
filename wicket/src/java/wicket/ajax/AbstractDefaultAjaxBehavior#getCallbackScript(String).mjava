	/**
	 * Returns javascript that performs an ajax callback to this behavior. The
	 * script is decorated by the ajax callback decorator from
	 * {@link AbstractDefaultAjaxBehavior#getAjaxCallDecorator()}.
	 * 
	 * @param partialCall
	 *            Javascript of a partial call to the function performing the
	 *            actual ajax callback. Must be in format
	 *            <code>function(params,</code> with signature
	 *            <code>function(params, onSuccessHandler, onFailureHandler</code>.
	 *            Example: <code>wicketAjaxGet('callbackurl'</code>
	 * 
	 * @return script that peforms ajax callback to this behavior
	 */
	protected String getCallbackScript(String partialCall)
	{
		final IAjaxCallDecorator callDecorator = getAjaxCallDecorator();
		final String before = (callDecorator == null) ? null : callDecorator.getBeforeScript();
		final String after = (callDecorator == null) ? null : callDecorator.getAfterScript();
		final String success = (callDecorator == null) ? null : callDecorator.getOnSuccessScript();
		final String failure = (callDecorator == null) ? null : callDecorator.getOnFailureScript();

		String indicatorId = findIndicatorId();

		StringBuilder buff = new StringBuilder(128);

		if (!Strings.isEmpty(indicatorId))
		{
			buff.append("wicketShow('").append(indicatorId).append("');");
		}

		if (!Strings.isEmpty(before))
		{
			buff.append(before);
			if (!before.endsWith(";"))
			{
				buff.append("; ");
			}
		}

		buff.append("var ").append(IAjaxCallDecorator.WICKET_CALL_MADE_VAR).append("=");

		buff.append(partialCall);

		if (!Strings.isEmpty(success)||!Strings.isEmpty(indicatorId))
		{
			buff.append(", function() { ");
			if (!Strings.isEmpty(indicatorId))
			{
				buff.append("wicketHide('").append(indicatorId).append("');");
			}
			if (!Strings.isEmpty(success)) {
				buff.append(success);
				if (!success.endsWith(";")) {
					buff.append(";");
				}
			}
			buff.append("}");
		}

		buff.append(");");

		if (!Strings.isEmpty(after))
		{
			buff.append(after);
			if (!after.endsWith(";"))
			{
				buff.append(";");
			}
		}

		return buff.toString();
	}

