	/**
	 * @see wicket.IRequestTarget#respond(wicket.RequestCycle)
	 */
	public final void respond(final RequestCycle requestCycle)
	{
		try
		{
			final Application app = Application.get();

			// disable component use check since we want to ignore header
			// contribs
			final boolean oldUseCheck = app.getDebugSettings().getComponentUseCheck();
			app.getDebugSettings().setComponentUseCheck(false);

			// Determine encoding
			final String encoding = app.getRequestCycleSettings().getResponseRequestEncoding();

			// Set content type based on markup type for page
			WebResponse response = (WebResponse)requestCycle.getResponse();
			response.setCharacterEncoding(encoding);
			response.setContentType("text/xml; charset=" + encoding);

			// Make sure it is not cached by a client
			response.setHeader("Expires", "Mon, 26 Jul 1997 05:00:00 GMT");
			response.setHeader("Cache-Control", "no-cache, must-revalidate");
			response.setHeader("Pragma", "no-cache");

			response.write("<?xml version=\"1.0\" encoding=\"");
			response.write(encoding);
			response.write("\"?>");
			response.write("<ajax-response>");

			// normal behavior
			Iterator it = prependJavascripts.iterator();
			while (it.hasNext())
			{
				String js = (String)it.next();
				respondInvocation(response, js);
			}

			it = markupIdToComponent.entrySet().iterator();
			while (it.hasNext())
			{
				final Map.Entry entry = (Entry)it.next();
				final Component component = (Component)entry.getValue();
				final String markupId = (String)entry.getKey();
				respondHeaderContribution(response, component);
				respondComponent(response, markupId, component);
			}

			it = appendJavascripts.iterator();
			while (it.hasNext())
			{
				String js = (String)it.next();
				respondInvocation(response, js);
			}

			response.write("</ajax-response>");

			// restore component use check
			app.getDebugSettings().setComponentUseCheck(oldUseCheck);
		}
		catch (RuntimeException ex)
		{
			// log the error but output nothing in the response, parse
			// failure
			// of response will cause any javascript failureHandler to be
			// invoked
			LOG.error("Error while responding to an AJAX request: " + toString(), ex);
		}
	}

