	public List<FeedbackMessage> getObject()
	{
		if (messages == null)
		{
			if (page == null)
			{
				throw new IllegalStateException(
						"getObject() cannot be called on this model until it has been attached to a component");
			}
			// Get filtered messages from page where component lives
			List<FeedbackMessage> pageMessages = page.getFeedbackMessages().messages(filter);

			List<FeedbackMessage> sessionMessages = page.getSession().getFeedbackMessages()
					.messages(filter);

			messages = new ArrayList<FeedbackMessage>(pageMessages.size() + sessionMessages.size());
			messages.addAll(pageMessages);
			messages.addAll(sessionMessages);

			// Sort the list before returning it
			if (sortingComparator != null)
			{
				Collections.sort(messages, sortingComparator);
			}

			// Let subclass do any extra processing it wants to on the messages.
			// It may want to do something special, such as removing a given
			// message under some special condition or perhaps eliminate
			// duplicate messages. It could even add a message under certain
			// conditions.
			messages = processMessages(messages);
		}
		return messages;
	}

