	/**
	 * Factory method that creates an instance of de-/encryption class.
	 * NOTE: this implementation caches the crypt instance, so it has
	 * to be Threadsafe. If you want other behaviour, or want to provide
	 * a custom crypt class, you should override this method.
	 * 
	 * @return Instance of de-/encryption class
	 */
	public synchronized final ICrypt newCrypt()
	{
		if(crypt == null)
		{
			Class cryptClass = getSettings().getCryptClass();
			try
			{
				crypt = (ICrypt)cryptClass.newInstance();
				log.info("using encryption/decryption object " + crypt);
				crypt.setKey(getSettings().getEncryptionKey());
				return crypt;
			}
			catch (Exception e)
			{
				log.warn("************************** WARNING **************************");
				log.warn("As the instantion of encryption/decryption class:");
				log.warn("\t" + cryptClass);
				log.warn("failed, Wicket will fallback on a dummy implementation");
				log.warn("\t(" + NoCrypt.class.getName() + ")");
				log.warn("This is not recommended for production systems.");
				log.warn("Please override method wicket.Application.newCrypt()");
				log.warn("to provide a custom encryption/decryption implementation");
				log.warn("The cause of the instantion failure: ");
				log.warn("\t" + e.getMessage());
				if(log.isDebugEnabled())
				{
					log.debug("exception: ", e);
				}
				else
				{
					log.warn("set log level to DEBUG to display the stack trace.");
				}
				log.warn("*************************************************************");

				// assign the dummy crypt implementation
				crypt = new NoCrypt();
			}
		}

		return crypt;
	}

