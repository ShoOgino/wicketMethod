	/**
	 * @param scope
	 *            Scope of resource
	 * @param name
	 *            Logical name of resource
	 * @param locale
	 *            The locale of the resource
	 * @param style
	 *            The resource style (see {@link wicket.Session})
	 * @param resource
	 *            Resource to store
	 */
	public final void add(final Class scope, final String name, final Locale locale,
			final String style, final Resource resource)
	{
		// Store resource
		final String key = path(application, scope, name, locale, style);
		ResourceState resourceState;
		synchronized (resourceMap)
		{
			resourceState = (ResourceState)resourceMap.get(key);
		}
		if (resourceState == null)
		{
			resourceState = new ResourceState(key,resource);
		}
		synchronized (resourceMap)
		{
			resourceMap.put(key, resourceState);
		}

		// shared resources CAN'T be cacheable by default.
		// The resource itself should take care of this.. (so package resource
		// can be cacheable by default but dynamic once not)
		// this is up to the user
		// Application shared resources are cacheable.
		// resource.setCacheable(true);
	}

