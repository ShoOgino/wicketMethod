	/**
	 * Create a new markup resource stream for the container. 
	 * <p>
	 * Note: IResourceStreamLocators should be used in case the strategy
	 * to find a markup resource should be extended for ALL components
	 * of your application.
	 * 
	 * @see wicket.util.resource.locator.IResourceStreamLocator
	 * 
	 * @param containerClass
	 *            The container the markup should be associated with
	 * @param containerInfo
	 *            The container the markup should be associated with
	 * @return A IResourceStream if the resource was found
	 */
	public IResourceStream newMarkupResourceStream(Class containerClass, 
			final ContainerInfo containerInfo)
	{
		// Get locator to search for the resource 
		final IResourceStreamLocator locator = getApplication().getResourceSettings().getResourceStreamLocator();
		
		// Markup is associated with the containers class. Walk up the class 
		// hierarchy up to MarkupContainer to find the containers markup resource. 
		while (containerClass != MarkupContainer.class)
		{
			final IResourceStream resourceStream = locator.locate(
					containerClass, containerClass.getName().replace('.', '/'),
					containerInfo.getStyle(), containerInfo.getLocale(),
					containerInfo.getFileExtension());
			
			// Did we find it already?
			if (resourceStream != null)
			{
				return resourceStream;
			}

			// Walk up the class hierarchy one level, if markup has not 
			// yet been found
			containerClass = containerClass.getSuperclass();
		}
		
		return null;
	}

