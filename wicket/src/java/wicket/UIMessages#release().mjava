    /**
     * Clears the current messages instance from the thread local and
     * reset the original models of the components that had theirs replaced
     * with decorator models. To be used by the framework only (package local).
     */
    static void release()
    {
        UIMessages currentMessages = (UIMessages)current.get();
        if(currentMessages != null)
        {
            if(log.isDebugEnabled())
            {
                log.debug("UIMessages " + currentMessages + " released for thread "
                        + Thread.currentThread());
            }
            // only error level components have their models (possibly) replaced
            Set components = currentMessages.getErrorReporters();
            for(Iterator i = components.iterator(); i.hasNext();)
            {
                Component component = (Component)i.next();
                IModel currentModel = component.getModel();
                // if the model was wrapped (ie the error message was added by the
                // validation mechanism of this framework
                if(currentModel instanceof ValidationErrorModelDecorator)
                {
                    ValidationErrorModelDecorator deco =
                        ((ValidationErrorModelDecorator)currentModel);
                    IModel originalModel = deco.getOriginalModel();
                    // replace the model with the initial one
                    component.setModel(originalModel);
                }
            }
            // clear thread local
            current.set(null);
        }
        else
        {
            if(log.isDebugEnabled())
            {
                log.debug("no UIMessages to release for thread " + Thread.currentThread());
            }
        }
    }

