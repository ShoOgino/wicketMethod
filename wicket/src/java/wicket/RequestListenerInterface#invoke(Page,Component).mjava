	/**
	 * Invokes a given interface on a component.
	 * 
	 * @param page
	 *            The Page that contains the component
	 * @param component
	 *            The component
	 */
	public final void invoke(final Page page, final Component component)
	{
		// Check authorization
		// FIXME Bug: Why is Component.ENABLE hardwired into this code (which came from AbstractListenerInterfaceRequestTarget)!?
		if (!component.isActionAuthorized(Component.ENABLE))
		{
			throw new UnauthorizedActionException(component, Component.ENABLE);
		}

		page.beforeCallComponent(component, this);

		try
		{
			// Invoke the interface method on the component
			method.invoke(component, new Object[] {});
		}
		catch (InvocationTargetException e)
		{
			// Honor redirect exception contract defined in IPageFactory
			if (e.getTargetException() instanceof AbstractRestartResponseException)
			{
				throw (RuntimeException)e.getTargetException();
			}
			throw new WicketRuntimeException("Method " + method.getName() + " of "
					+ method.getDeclaringClass() + " targeted at component " + component
					+ " threw an exception", e);
		}
		catch (Exception e)
		{
			throw new WicketRuntimeException("Method " + method.getName() + " of "
					+ method.getDeclaringClass() + " targeted at component " + component
					+ " threw an exception", e);
		}
		finally
		{
			page.afterCallComponent(component, this);
		}
	}

