		/**
		 * Gets component path relative to the parent container with associated
		 * markup.
		 * 
		 * @param component
		 * @param parentWithAssociatedMarkup
		 *            A parent container of 'component', which has associated markup
		 *            that contains the markup fragment
		 * @return the relative path
		 */
		private static String getComponentRelativePath(final Component component,
				final MarkupContainer parentWithAssociatedMarkup)
		{
			final MarkupContainer parent = component.getParent();
			if ((parent == null) || (parent == parentWithAssociatedMarkup))
			{
				return "";
			}
	
			final PrependingStringBuffer buffer = new PrependingStringBuffer(32);
			for (Component c = parent; (c != parentWithAssociatedMarkup) && (c != null); c = c
					.getParent())
			{
				if (buffer.length() > 0)
				{
					buffer.prepend(IMarkup.TAG_PATH_SEPARATOR);
				}
				buffer.prepend(c.getId());
			}
			return buffer.toString();
		}

