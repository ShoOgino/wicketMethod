	/**
	 * Gets a fresh markup stream that contains the (immutable) markup resource
	 * for this class.
	 * 
	 * @return A stream of MarkupElement elements
	 */
	protected final MarkupStream getAssociatedMarkupStream()
	{
		try
		{
			return getApplication().getMarkupCache().getMarkupStream(this);
		}
		catch (MarkupException ex)
		{
			// re-throw it. The exception contains already all the information required.
			throw ex;
		}
		catch (WicketRuntimeException ex)
		{
			// throw exception since there is no associated markup
			throw new WicketRuntimeException(
					exceptionMessage("Markup of type '"
							+ getMarkupType()
							+ "' for component '"
							+ getClass().getName()
							+ "' not found or invalid"
							+ " Enable debug messages for wicket.util.resource.Resource to get a list of all filenames tried"),
					ex);
		}
	}

