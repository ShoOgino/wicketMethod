	/**
	 * Gets a fresh markup stream that contains the (immutable) markup resource
	 * for this class.
	 * 
	 * @return A stream of MarkupElement elements
	 */
	final MarkupStream getAssociatedMarkupStream()
	{
		// Look for associated markup
		final Markup markup = getAssociatedMarkup();

		// If we found markup for this container
		if (markup != Markup.NO_MARKUP)
		{
			// return a MarkupStream for the markup
			return new MarkupStream(markup);
		}
		else
		{
			// throw exception since there is no associated markup
			throw new WicketRuntimeException(
					exceptionMessage("Markup of type '"
							+ getMarkupType()
							+ "' for component '"
							+ getClass().getName()
							+ "' not found."
							+ " Enable debug messages for wicket.util.resource.Resource to get a list of all filenames tried."));
		}
	}

