	/**
	 * Sets whether the page is stateless. A page is stateless when it doesn't
	 * have any call backs (like {@link Link links}), and thus doesn't need to
	 * be kept around for possible calls. Pages start out being stateless. If
	 * {@link RequestCycle#urlFor(Component, RequestListenerInterface) a url is created for a call back}
	 * on a page, it is regarded to be stateful. This is not a 100% failsafe way
	 * of doing things - in fact it is quite eager and can theoretically result
	 * in pages being marked as stateful without needing so - but it should work
	 * for 99% of the cases if people use the Wicket API like it is supposed to
	 * be used.
	 * <p>
	 * A side effect of calling this method with stateless is false is that if
	 * the session creation was deferred, it will explicitly be created now.
	 * </p>
	 * 
	 * @param stateless
	 *            Whether to page is stateless
	 */
	final void setStateless(Boolean stateless)
	{
		this.stateless = stateless;
	}

