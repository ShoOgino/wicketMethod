	/**
	 * Get the localized string using all of the supplied parameters. This
	 * method is left public to allow developers full control over string
	 * resource loading. However, it is recommended that one of the other
	 * convenience methods in the class are used as they handle all of the work
	 * related to obtaining the current user locale and style information.
	 * 
	 * @param key
	 *            The key to obtain the resource for
	 * @param component
	 *            The component to get the resource for (optional)
	 * @param model
	 *            The model to use for substitutions in the strings (optional)
	 * @param locale
	 *            The locale to get the resource for (optional)
	 * @param style
	 *            The style to get the resource for (optional) (see
	 *            {@link wicket.Session})
	 * @param defaultValue
	 *            The default value (optional)
	 * @return The string resource
	 * @throws MissingResourceException
	 *             If resource not found and configuration dictates that
	 *             exception should be thrown
	 */
	public String getString(final String key, final Component component, final IModel model,
			final Locale locale, final String style, final String defaultValue)
			throws MissingResourceException
	{
		// Create the cache key
		Class clazz = (component != null ? component.getClass() : null);
		String id = createCacheId(clazz, locale, style, key);
		if (component != null)
		{
			id += ":" + component.getId();
		}

		// The cached key value, NULL can be returned so that we don't search a
		// second time for the same id.
		// TODO juergen? Is this cached value not totally depended on the
		// searchStack? (getComponentStack(component))
		// Depending on where the component is used different values could be
		// returned?
		String string = getCachedValue(id);

		// If not found in the cache
		if (string == null)
		{
			final List searchStack;
			final String path;
			if (component != null)
			{
				searchStack = getComponentStack(component);
				path = Strings.replaceAll(component.getPageRelativePath(), ":", ".");
			}
			else
			{
				searchStack = new ArrayList(0);
				searchStack.add(Application.get().getClass());
				path = null;
			}

			string = traverseResourceLoaders(key, path, searchStack, locale, style);

			// cache all values, not matter the key has been found or not
			if (string != null)
			{
				this.cachedValues.put(id, string);
			}
			else
			{
				// ConcurrentReaderHashMap does not allow null values. This is a
				// substitute
				this.cachedValues.put(id, NULL);
			}
		}

		// Check now if the string was NULL (not found the last time)
		if (string == NULL)
		{
			string = null;
		}
		else if (string != null)
		{
			return substitutePropertyExpressions(component, string, model);
		}

		// Resource not found, so handle missing resources based on application
		// configuration
		final IResourceSettings resourceSettings = application.getResourceSettings();
		if (resourceSettings.getUseDefaultOnMissingResource() && (defaultValue != null))
		{
			return defaultValue;
		}

		if (resourceSettings.getThrowExceptionOnMissingResource())
		{
			throw new MissingResourceException("Unable to find resource: " + key, (clazz != null
					? getClass().getName()
					: ""), key);
		}
		else
		{
			return "[Warning: String resource for '" + key + "' not found]";
		}
	}

