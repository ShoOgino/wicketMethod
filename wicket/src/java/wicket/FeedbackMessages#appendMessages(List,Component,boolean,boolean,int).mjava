	/**
	 * Gets the messages for the given component and append them to the given list.
	 * @param list list to append messages to
	 * @param component the component to get the messages for
	 * @param recurse whether to append any messages of child components
	 * @param stopAtBoundary whether to stop collecting messages when
	 * 	a child component is of type {@link IFeedbackBoundary}.
	 * 	Only has effect when recurse == true.
	 * @param fromLevel from which level the messages are collected; DEBUG traps all,
	 * 		but e.g. ERROR only traps ERROR and FATAL
	 */
	private final void appendMessages(final List list, final Component component,
			boolean recurse, boolean stopAtBoundary, int fromLevel)
	{
		for (Iterator iterator = messages.iterator(); iterator.hasNext();)
		{
			FeedbackMessage message = (FeedbackMessage)iterator.next();
			if (message.getReporter() == component && message.isLevel(fromLevel))
			{
				list.add(message);
			}
		}
		if (recurse && component instanceof MarkupContainer)
		{
			MarkupContainer container = (MarkupContainer)component;
			for (Iterator i = container.iterator(); i.hasNext();)
			{
				Component child = (Component)i.next();
				if ((!stopAtBoundary) || (!(child instanceof IFeedbackBoundary)))
				{
					appendMessages(list, child, recurse, stopAtBoundary, fromLevel);
				}
			}
		}
	}

