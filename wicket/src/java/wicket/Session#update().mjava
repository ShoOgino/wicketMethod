	/**
	 * Updates the session, e.g. for replication purposes.
	 */
	protected void update()
	{
		// If state is dirty
		if (dirty)
		{
			if (log.isDebugEnabled())
			{
				log.debug("update: Session is dirty.  Replicating.");
			}

			// State is no longer dirty
			this.dirty = false;

			// Set attribute.
			setAttribute(SESSION_ATTRIBUTE_NAME, this);
		}
		else
		{
			if (log.isDebugEnabled())
			{
				log.debug("update: Session not dirty.");
			}
		}

		// Go through all dirty entries, replicating any dirty objects
		List dirtyObjects = (List)Session.dirtyObjects.get();
		if (dirtyObjects != null)
		{
			for (final Iterator iterator = dirtyObjects.iterator(); iterator.hasNext();)
			{
				String attribute = null;
				Object object = iterator.next();
				if (object instanceof Page)
				{
					final Page page = (Page)object;
					if (page.isStateless())
					{
						continue;
					}
					attribute = page.getPageMap().attributeForId(page.getNumericId());
					object = page.getPageMapEntry();
				}
				else if (object instanceof PageMap)
				{
					attribute = attributeForPageMapName(((PageMap)object).getName());
				}

				setAttribute(attribute, object);
			}
			Session.dirtyObjects.set(null);
		}
	}

