	/**
	 * Writes a simple tag out to the response stream. Any components that might
	 * be referenced by the tag are ignored. Also undertakes any tag attribute
	 * modifications if they have been added to the component.
	 * 
	 * @param tag
	 *            The tag to write
	 */
	protected final void renderComponentTag(ComponentTag tag)
	{
		final ApplicationSettings settings = getApplication().getSettings();
		if (!(tag instanceof WicketTag) || !settings.getStripWicketTags())
		{
			// Apply attribute modifiers
			if ((attributeModifiers != null) && (tag.getType() != XmlTag.CLOSE) 
					&& (getFlag(FLAG_IGNORE_ATTRIBUTE_MODIFIER) == false))
			{
				tag = tag.mutable();
				
				if (attributeModifiers instanceof AttributeModifier)
				{
					((AttributeModifier)attributeModifiers).replaceAttibuteValue(this, tag);
				}
				else if (attributeModifiers instanceof Object[])
				{
					Object[] array = (Object[])attributeModifiers ;
					for (int i = 0; i < array.length; i++)
					{
						((AttributeModifier)array[i]).replaceAttibuteValue(this, tag);
					}
				}				
			}

			if (ajaxHandlers != null)
			{
				for (Iterator i = ajaxHandlers.iterator(); i.hasNext();)
				{
					AjaxHandler handler = (AjaxHandler)i.next();
					handler.onComponentTag(tag);
				}
			}

			// Write the tag
			tag.writeOutput(getResponse(), settings.getStripWicketTags(), 
			        this.findMarkupStream().getWicketNamespace());
		}
	}

