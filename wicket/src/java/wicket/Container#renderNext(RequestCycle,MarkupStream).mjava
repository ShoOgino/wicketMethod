	/**
	 * Renders the next element of markup in the given markup stream.
	 * 
	 * @param cycle
	 *           The wicket.response to write to
	 * @param markupStream
	 *           The markup stream
	 */
	private void renderNext(final RequestCycle cycle, final MarkupStream markupStream)
	{
		// Get the current markup element
		final MarkupElement element = markupStream.get();

		// If it a tag like <wicket..> or <span id="wicket-..." >
		if ((element instanceof ComponentTag) && !markupStream.atCloseTag())
		{
			// Get element as tag
			final ComponentTag tag = (ComponentTag) element;
			
			// Get component name
			final String componentName = tag.getComponentName();

			// Get the component for the component name from the given container
			Component component = get(componentName);

			// Failed to find it?
			if (component != null)
			{
				if (log.isDebugEnabled())
				{
					log.debug("Begin render of sub-component " + component);
				}

				component.render(cycle);

				if (log.isDebugEnabled())
				{
					log.debug("End render of sub-component " + component);
				}
			}
			else 
			{
			    // 2nd try: all static name resolvers
			    final List componentResolvers = this.getApplicationSettings().getComponentResolvers();
			    final Iterator iter = componentResolvers.iterator();
			    while (iter.hasNext())
			    {
			        final IComponentResolver resolver = (IComponentResolver) iter.next();
			        if (resolver.resolve(cycle, markupStream, tag, this) == true)
			        {
			            return;
			        }
				}

			    // 3rd try: a subclass replacing resolveComponent()
			    Container container = this;
			    while (container != null)
			    {
					if (container.resolveComponent(cycle, markupStream, tag) == true)
					{
					    return;
					}
					
					container = container.findParent(Container.class);
			    }

			    // No one was able to handle the component name
				markupStream.throwMarkupException("Unable to find component named '" + componentName + "' in "
						+ this);
			}
		}
		else
		{
			// Render as raw markup
			log.debug("Rendering raw markup");
			cycle.getResponse().write(element.toString());
			markupStream.next();
		}
	}

