	/**
	 * Redirects browser to the given page. NOTE: Usually, you should never call
	 * this method directly, but work with setResponsePage instead. This method
	 * is part of Wicket's internal behaviour and should only be used when you
	 * want to circumvent the normal framework behaviour and issue the redirect
	 * directly.
	 * 
	 * @param page
	 *            The page to redirect to
	 */
	public final void redirectTo(final Page page)
	{
		String redirectUrl = null;

		// Check if use serverside response for client side redirects
		ApplicationSettings settings = application.getSettings();
		if ((settings.getRenderStrategy() == ApplicationSettings.REDIRECT_TO_BUFFER)
				&& (application instanceof WebApplication))
		{
			// remember the current response
			final Response currentResponse = getResponse();
			try
			{
				// create the redirect response.
				// override the encodeURL so that it will use the real once
				// encoding.
				final BufferedResponse redirectResponse = new BufferedResponse()
				{
					public String encodeURL(String url)
					{
						return currentResponse.encodeURL(url);
					}
				};
				redirectResponse.setCharacterEncoding(currentResponse.getCharacterEncoding());

				// redirect the response to the buffer
				setResponse(redirectResponse);

				// render the page into the buffer
				page.doRender();

				// re-assign the original response
				setResponse(currentResponse);

				final String responseRedirect = redirectResponse.getRedirectUrl();
				if (responseRedirect != null)
				{
					// if the redirectResponse has another redirect url set
					// then the rendering of this page caused a redirect to
					// something else.
					// set this redirect then.
					redirectUrl = responseRedirect;
				}
				else if (redirectResponse.getContentLength() > 0)
				{
					// if no content is created then don't set it in the
					// redirect buffer
					// (maybe access failed).
					// Set the encoding of the response (what the browser wants)
					redirectResponse.setCharacterEncoding(currentResponse.getCharacterEncoding());

					// call filter() so that any filters can process the
					// response
					redirectResponse.filter();
					// close it so that the reponse is fixed and encoded from
					// here on.
					redirectResponse.close();

					redirectUrl = page.urlFor(page, IRedirectListener.class);
					((WebApplication)application).addRedirect(getWebRequest()
							.getHttpServletRequest(), redirectUrl, redirectResponse);
				}
			}
			catch (RuntimeException ex)
			{
				// re-assign the original response
				setResponse(currentResponse);
				log.error(ex.getMessage(), ex);
				IRequestCycleProcessor processor = getRequestCycleProcessor();
				processor.respond(ex, this);
				return;
			}
		}
		else
		{
			session.touch(page);
			// redirect page can touch its models already (via for example the
			// constructors)
			page.internalEndRequest();
		}

		if (redirectUrl == null)
		{
			redirectUrl = page.urlFor(page, IRedirectListener.class);
		}
		// Redirect to the url for the page
		response.redirect(redirectUrl);
	}

