	/**
	 * Gets a WebSession object from the HttpServletRequest, creating a new one
	 * if it doesn't already exist.
	 * 
	 * @param request
	 *            The http request object
	 * @return The session object
	 */
	final WebSession getSession(final WebRequest request)
	{
		// Get session, creating if it doesn't exist
		// do not create it as we try to defer the actual
		// creation as long as we can
		final HttpSession httpSession = request.getHttpServletRequest().getSession(false);

		// The actual attribute for the session is
		// "wicket-<servletName>-session"
		final String sessionAttribute = getSessionAttributePrefix(request)
				+ Session.SESSION_ATTRIBUTE_NAME;

		WebSession webSession = null;
		if (httpSession != null)
		{
			// Get Session abstraction from httpSession attribute
			webSession = (WebSession)httpSession.getAttribute(sessionAttribute);
		}

		if (webSession == null)
		{
			// Create session using session factory
			final Session session = getSessionFactory().newSession();
			if (session instanceof WebSession)
			{
				webSession = (WebSession)session;
			}
			else
			{
				throw new WicketRuntimeException(
						"Session created by a WebApplication session factory must be a subclass of WebSession");
			}

			// Set the client Locale for this session
			webSession.setLocale(request.getLocale());

			if (httpSession != null)
			{
				// Save this session in the HttpSession using the attribute name
				httpSession.setAttribute(sessionAttribute, webSession);
			}

			// Set the default context path if the context path is not already
			// set
			// (previous time or by the developer itself)
			// This all to do missing api in the servlet spec.. You can't get a
			// context path from the servlet context, which is just stupid.
			if (getApplicationSettings().getContextPath() == null)
			{
				getApplicationSettings().setContextPath(request.getContextPath());
			}
		}

		// Set application on session
		webSession.setApplication(this);

		// Set session attribute name and attach/reattach http servlet session
		webSession.initForRequest();

		return webSession;
	}

