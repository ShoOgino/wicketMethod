	/**
	 * Create and process the request cycle using the current request and
	 * response information.
	 * 
	 * @param cycle
	 */
	public void processRequestCycle(WebRequestCycle cycle)
	{
		cycle.request();

		previousRenderedPage = lastRenderedPage;

		// handle redirects which are usually managed by the browser
		// transparently
		final MockHttpServletResponse httpResponse = (MockHttpServletResponse)cycle
				.getWebResponse().getHttpServletResponse();

		if (httpResponse.isRedirect())
		{
			generateLastRenderedPage(cycle);

			final MockHttpServletRequest httpRequest = (MockHttpServletRequest)cycle
					.getWebRequest().getHttpServletRequest();

			MockHttpServletRequest newHttpRequest = new MockHttpServletRequest(this, servletSession, context);
			newHttpRequest.setRequestToRedirectString(httpResponse.getRedirectLocation());
			wicketRequest = newWebRequest(newHttpRequest);
			wicketSession = getSession(wicketRequest);
			
			cycle = new WebRequestCycle(wicketSession, wicketRequest, wicketResponse);
			cycle.request();
		}
		generateLastRenderedPage(cycle);

		Session.set(getWicketSession());

		if (getLastRenderedPage() instanceof ExceptionErrorPage)
		{
			throw (RuntimeException)((ExceptionErrorPage)getLastRenderedPage()).getThrowable();
		}
	}

