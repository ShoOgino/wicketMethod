	/**
	 * Parses a request. The following four steps are followed:
	 * <p>
	 * 1. If the URL requested is in the form of a component listener
	 * invocation, then that invocation will occur and is expected to generate a
	 * response.
	 * <p>
	 * 2. If the URL is to a bookmarkable page, then an instance of that page is
	 * created and is expected render a response.
	 * <p>
	 * 3. If the URL is for the application's home page, an instance of the home
	 * page will be created and is expected to render a response.
	 * <p>
	 * 4. Finally, an attempt is made to render the requested resource as static
	 * content, available through the servlet context.
	 * <p>
	 * If all four steps are executed and content cannot be found to satisfy the
	 * request, then false is returned.
	 *
	 * @return True if a Page should be rendered back to the user
	 */
	protected final boolean parseRequest()
	{
		// Try different methods of parsing and dispatching the request
		if (callDispatchedComponentListener())
		{
			// if it is, we don't need to update the cluster, etc, and return false
		}
		// it wasn't a dispatched listener, try other methods
		else if (callComponentListener() || bookmarkablePage() || homePage())
		{
			// Returning a page
			return true;
		}
		// If it's not a resource reference or static content
		else if (resourceReference() || staticContent())
	    {
			// if it is, we don't need to update the cluster, etc, and return false
	    }
		else
		{
		    int rtn = doParseRequest();
		    if (rtn == PARSE_REQUEST_RETURNING_PAGE)
		    {
		        return true;
		    }
		    else if (rtn == PARSE_REQUEST_RETURNING_STATIC_CONTENT)
		    {
				// if it is, we don't need to update the cluster, etc, and return false
		    }
		    else
		    {
				// not found... send 404 to client indicating that no resource was found
				// for the request uri
				WebResponse webResponse = (WebResponse)getResponse();
				HttpServletResponse httpServletResponse = webResponse.getHttpServletResponse();
				try
				{
					httpServletResponse.sendError(HttpServletResponse.SC_NOT_FOUND);
				}
				catch (IOException e)
				{
					// that seems unlikely... anyway, log exception and forget about it
					log.error("unable to send 404 for " + getRequest() + ", cause: " + e.getMessage(), e);
				}
			}
		}

		// Don't update the cluster, not returning a page
		setUpdateCluster(false);
		setResponsePage((Page)null);
		return false;
	}

