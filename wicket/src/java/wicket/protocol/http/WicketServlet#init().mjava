	/**
	 * Servlet initialization
	 */
	public void init()
	{
		IWebApplicationFactory factory = getApplicationFactory();

		// Construct WebApplication subclass
		this.webApplication = factory.createApplication(this);

		// Set this WicketServlet as the servlet for the web application
		this.webApplication.setWicketServlet(this);

		// Store instance of this application object in servlet context to make
		// integration with outside world easier
		String contextKey = WebApplication
				.getServletContextKey(getServletConfig().getServletName());
		getServletContext().setAttribute(contextKey, this.webApplication);
		

		// Finished
		log.info("WicketServlet loaded application " + this.webApplication.getName() + " via "
				+ factory.getClass().getName() + " factory");

		try
		{
			Application.set(webApplication);

			// Call internal init method of web application for default initialisation
			this.webApplication.internalInit();
			// store the servlet context key in the settings
			this.webApplication.getApplicationSettings().setServletContextKey(contextKey);
			// Call init method of web application
			this.webApplication.init();
			// We initialize components here rather than in the constructor or
			// in the internal init, because in the init method class aliases
			// can be added, that would be used in installing resources in the
			// component.
			this.webApplication.initializeComponents();

		}
		finally
		{
			Application.unset();
		}
	}

