	/**
	 * Gets a WebSession object from the HttpServletRequest, creating a new one
	 * if it doesn't already exist.
	 * 
	 * @param request
	 *            The http request object
	 * @param create
	 *            Should the session be created if not there.
	 * @return The session object
	 */
	final WebSession getSession(final WebRequest request, boolean create)
	{
		// Get session, creating if it doesn't exist
		final HttpSession httpSession = ((ServletWebRequest)request).getHttpServletRequest()
				.getSession(true);
		if (!create && (httpSession == null))
		{
			return null;
		}

		// Namespacing for session attributes is provided by adding the servlet
		// path
		final String sessionAttributePrefix = "wicket-" + request.getServletPath();

		// The actual attribute for the session is
		// "wicket-<servlet-path>-session"
		final String sessionAttribute = sessionAttributePrefix + "-" + Session.sessionAttributeName;

		// Get Session abstraction from httpSession attribute
		WebSession webSession = (WebSession)httpSession.getAttribute(sessionAttribute);
		if (webSession == null)
		{
			if (!create)
			{
				return null;
			}

			// Create session using session factory
			final Session session = getSessionFactory().newSession();
			if (session instanceof WebSession)
			{
				webSession = (WebSession)session;
			}
			else
			{
				throw new WicketRuntimeException(
						"Session created by a WebApplication session factory must be a subclass of WebSession");
			}

			// Set the client Locale for this session
			webSession.setLocale(request.getLocale());

			// Save this session in the HttpSession using the attribute name
			httpSession.setAttribute(sessionAttribute, webSession);
		}

		// Set application on session
		webSession.setApplication(this);

		// Set session attribute name and attach/reattach http servlet session
		webSession.init(httpSession, sessionAttributePrefix);

		return webSession;
	}

