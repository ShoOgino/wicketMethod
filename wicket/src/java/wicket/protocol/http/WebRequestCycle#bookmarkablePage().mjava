	/**
	 * Activates a bookmarkable page if one was specified in the request.
	 * 
	 * @return True if a bookmarkable page was created and returned for the
	 *         request.
	 * @throws WicketRuntimeException
	 */
	private boolean bookmarkablePage()
	{
		// Get any component parameter
		final String bookmarkableName = request.getParameter("bookmarkablePage");
		if (bookmarkableName != null)
		{
			// first see whether we have a logical mapping
			Class pageClass = application.getPages().pageClassForAlias(bookmarkableName);

			// nope, we don't have a logical mapping, so this should be a full class name
			if (pageClass == null)
			{
			    try
			    {
					pageClass = session.getClassResolver().resolveClass(bookmarkableName);
			    }
			    catch (RuntimeException e)
			    {
					try
					{
						getWebResponse().getHttpServletResponse().sendError(
						        HttpServletResponse.SC_NOT_FOUND, 
						        "Unable to load Page class: " + bookmarkableName);
						
						return false;
					}
					catch (IOException ex)
					{
						// that seems unlikely... anyway, log exception and forget about it
						log.error("unable to send 404 for " + getRequest() + ", cause: " + ex.getMessage(), ex);
						return false;
					}
			    }
			}

		    try
		    {
				Page newPage = session.getPageFactory().newPage(pageClass,
						new PageParameters(getRequest().getParameterMap()));
				
				setResponsePage(newPage);
				setUpdateCluster(true);
				return true;
		    }
		    catch (RuntimeException e)
		    {
		        throw new WicketRuntimeException("Unable to instantiate Page class: " 
		                + bookmarkableName + ". See below for details.", e);
		    }
		}
		return false;
	}

