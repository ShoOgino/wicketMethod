	/**
	 * Returns a URL that references a given interface on a component. When the
	 * URL is requested from the server at a later time, the interface will be
	 * called. A URL returned by this method will not be stable across sessions
	 * and cannot be bookmarked by a user.
	 * 
	 * @param component
	 *            The component to reference
	 * @param listenerInterface
	 *            The listener interface on the component
	 * @return A URL that encodes a page, component and interface to call
	 */
	public String urlFor(final Component component, final Class listenerInterface)
	{
		// Ensure that component instanceof listenerInterface
		if (!listenerInterface.isAssignableFrom(component.getClass()))
		{
			throw new WicketRuntimeException("The component " + component + " of class "
					+ component.getClass() + " does not implement " + listenerInterface);
		}

		// Buffer for composing URL
		final StringBuffer buffer = urlPrefix();

		// Compose URL differently depending on component sharing
		switch (component.getSharing())
		{
			case Component.UNSHARED : {
				buffer.append("?component=");
				buffer.append(component.getPath());
				buffer.append("&rendering=");
				buffer.append(component.getPage().getRendering());
				buffer.append("&interface=");
				buffer.append(Classes.name(listenerInterface));
				return response.encodeURL(buffer.toString());
			}

			case Component.SESSION_SHARED : {
				buffer.append('/');
				buffer.append(((WebSession)session).reference(component));
				return response.encodeURL(buffer.toString());
			}

			case Component.APPLICATION_SHARED : {
				buffer.append('/');
				buffer.append(((WebApplication)application).reference(component));
				return buffer.toString();
			}

			default : {
				throw new WicketRuntimeException("Illegal component sharing type");
			}
		}
	}

