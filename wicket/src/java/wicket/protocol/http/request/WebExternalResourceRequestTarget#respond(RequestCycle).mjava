	/**
	 * Respond by trying to delegate getting the resource from the
	 * {@link ServletContext} object and stream that to the client. If such a
	 * resource is not found, a warning will be logged, and a 404 will be
	 * issued.
	 * 
	 * @see wicket.IRequestTarget#respond(wicket.RequestCycle)
	 */
	public void respond(RequestCycle requestCycle)
	{
		try
		{
			WebResponse webResponse = ((WebRequestCycle)requestCycle).getWebResponse();
			final ServletContext context = ((WebApplication)requestCycle.getApplication())
					.getWicketServlet().getServletContext();

			// Set content type
			webResponse.setContentType(context.getMimeType(url));
			final InputStream in = context.getResourceAsStream(url);
			if (in != null)
			{
				try
				{
					// Copy resource input stream to servlet output stream
					Streams.copy(in, webResponse.getHttpServletResponse().getOutputStream());
				}
				finally
				{
					// NOTE: We only close the InputStream. The servlet
					// container should close the output stream.
					in.close();
				}
			}
			else
			{
				log.warn("the resource requested by request " + requestCycle.getRequest()
						+ " was not found");
				HttpServletResponse httpServletResponse = webResponse.getHttpServletResponse();
				httpServletResponse.sendError(HttpServletResponse.SC_NOT_FOUND);
			}
		}
		catch (IOException e)
		{
			throw new WicketRuntimeException("Cannot load static content for request "
					+ requestCycle.getRequest(), e);
		}
	}

