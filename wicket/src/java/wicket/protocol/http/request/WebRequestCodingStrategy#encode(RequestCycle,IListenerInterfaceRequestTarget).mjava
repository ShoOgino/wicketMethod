	/**
	 * Encode a listener interface target.
	 * 
	 * @param requestCycle
	 *            the current request cycle
	 * @param requestTarget
	 *            the target to encode
	 * @return the encoded url
	 */
	protected final String encode(RequestCycle requestCycle,
			IListenerInterfaceRequestTarget requestTarget)
	{
		final StringBuffer url = new StringBuffer(64);
		url.append(urlPrefix(requestCycle));
		url.append("?path=");
		final Component component = requestTarget.getTarget();
		url.append(component.getPath());
		final Page currentPage = component.getPage();
		final PageMap pageMap = currentPage.getPageMap();
		if (!pageMap.isDefault())
		{
			url.append("&pagemap=");
			url.append(pageMap.getName());
		}
		final int versionNumber = component.getPage().getCurrentVersionNumber();
		if (versionNumber > 0)
		{
			url.append("&version=");
			url.append(versionNumber);
		}

		final String listenerName = requestTarget.getRequestListenerInterface().getName();
		if (!IRedirectListener.INTERFACE.getName().equals(listenerName))
		{
			url.append("&interface=");
			url.append(listenerName);
		}

		return requestCycle.getResponse().encodeURL(url.toString());
	}

