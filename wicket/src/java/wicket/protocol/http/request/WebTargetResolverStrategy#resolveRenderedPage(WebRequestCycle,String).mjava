	/**
	 * Resolves to a page target that was previously rendered. Optionally
	 * resolves to a component call target, which is a specialization of a page
	 * target. If no corresponding page could be found, a expired page target
	 * will be returned.
	 * 
	 * @param webRequestCycle
	 *            the current request cycle
	 * @param componentPath
	 *            the component path
	 * @return the previously rendered page as a request target
	 */
	private IRequestTarget resolveRenderedPage(WebRequestCycle webRequestCycle,
			final String componentPath)
	{
		final WebRequest webRequest = webRequestCycle.getWebRequest();
		final String pageMapName = webRequest.getParameter("pagemap");
		// Get version number
		final String versionNumberString = webRequest.getParameter("version");
		final int versionNumber = Strings.isEmpty(versionNumberString) ? 0 : Integer
				.parseInt(versionNumberString);

		final Session session = webRequestCycle.getSession();
		final Page page = session.getPage(pageMapName, componentPath, versionNumber);

		// Does page exist?
		if (page != null)
		{
			// Assume cluster needs to be updated now, unless listener
			// invocation change this (for example, with a simple page
			// redirect)
			webRequestCycle.setUpdateCluster(true);

			// see whether this resolves to a component call or just the page
			final String interfaceName = getInterfaceName(webRequest);
			if (interfaceName != null)
			{
				if (interfaceName.equals("IRedirectListener"))
				{
					return new RedirectPageRequestTarget(page);
				}
				else
				{
					final Method listenerMethod = webRequestCycle
							.getRequestInterfaceMethod(interfaceName);
					if (listenerMethod == null)
					{
						throw new WicketRuntimeException("Attempt to access unknown interface "
								+ interfaceName);
					}
					String componentPart = Strings.afterFirstPathComponent(componentPath, ':');
					if (Strings.isEmpty(componentPart))
					{
						// we have an interface that is not redirect, but no
						// component... that must be wrong
						throw new WicketRuntimeException("when trying to call " + listenerMethod
								+ ", a component must be provided");
					}
					final Component component = page.get(componentPart);
					if (!component.isVisible())
					{
						throw new WicketRuntimeException(
								"Calling listener methods on components that are not visible is not allowed");
					}
					return new InterfaceCallRequestTarget(page, component, listenerMethod);
				}
			}
			else
			{
				return new PageRequestTarget(page);
			}
		}
		else
		{
			// Page was expired from session, probably because backtracking
			// limit was reached
			return new ExpiredPageClassRequestTarget();
		}
	}

