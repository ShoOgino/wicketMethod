	/**
	 * @see javax.servlet.http.HttpServlet#getLastModified(javax.servlet.http.HttpServletRequest)
	 */
	protected long getLastModified(final HttpServletRequest servletRequest)
	{
		final String pathInfo = servletRequest.getPathInfo();
		if ((pathInfo != null) && pathInfo.startsWith(WebRequestCycle.resourceReferencePrefix))
		{
			final String resourceReferenceKey = pathInfo
					.substring(WebRequestCycle.resourceReferencePrefix.length());

			Locale locale = servletRequest.getLocale();
			WebSession session = webApplication.getSession(servletRequest, false);

			if(session != null)
			{
				locale = session.getLocale();
			}
			String localizedResourceReferenceKey = SharedResources.path(resourceReferenceKey, locale, null); // no style because that is already in the key
			
			// Try to find shared resource
			Resource resource = webApplication.getSharedResources().get(localizedResourceReferenceKey);
			if (resource == null)
			{
				if(locale != null && locale.getCountry() != null)
				{
					// try only language
					locale = new Locale(locale.getLanguage());
					localizedResourceReferenceKey = SharedResources.path(resourceReferenceKey, locale, null);
					resource = webApplication.getSharedResources().get(localizedResourceReferenceKey);					
				}
				// try it without any locale (plain url, could be different locale then the default)
				if(resource == null)
				{
					localizedResourceReferenceKey = resourceReferenceKey;
					resource = webApplication.getSharedResources().get(localizedResourceReferenceKey);
				}
			}
			// If resource found and it is cacheable
			if (resource != null && resource.isCacheable())
			{
				if(session == null || session.isResourceCacheable(localizedResourceReferenceKey))
				{
					try
					{
						Application.set(webApplication);
						// Set parameters from servlet request
						resource.setParameters(new WebRequest(servletRequest).getParameterMap());
						
		
						// Get resource stream
						IResourceStream stream = resource.getResourceStream();
		
						// First ask the length so the content is created/accessed
						stream.length();
		
						// Get last modified time from stream
						Time time = stream.lastModifiedTime();
						return time != null ? time.getMilliseconds() : -1;
					}
					finally
					{
						Application.set(null);
					}
				}
			}
		}
		return -1;
	}

