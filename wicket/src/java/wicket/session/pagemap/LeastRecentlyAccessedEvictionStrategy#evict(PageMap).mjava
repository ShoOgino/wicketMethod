	/**
	 * @see wicket.session.pagemap.IPageMapEvictionStrategy#evict(wicket.PageMap)
	 */
	public void evict(final PageMap pageMap)
	{
		if (pageMap.getVersions() > maxVersions)
		{
			final List list = pageMap.getEntries();
			IPageMapEntry leastRecentlyUsed = null;
			int min = Integer.MAX_VALUE;
			for (Iterator iterator = list.iterator(); iterator.hasNext();)
			{
				IPageMapEntry entry = (IPageMapEntry)iterator.next();
				int accessSequenceNumber = entry.getAccessSequenceNumber();
				if (accessSequenceNumber < min)
				{
					min = accessSequenceNumber;
					leastRecentlyUsed = entry;
				}
			}
			if (leastRecentlyUsed != null)
			{
				// If entry is a page
				if (leastRecentlyUsed instanceof Page)
				{
					Page page = (Page)leastRecentlyUsed;
					
					// If there is more than one version of this page
					if (page.getVersions() > 1)
					{
						// expire the oldest version
						page.expireOldestVersion();
					}
					else
					{
						// expire whole page
						pageMap.remove(page);						
					}
				}
				else
				{
					// Remove the entry
					pageMap.remove(leastRecentlyUsed);
				}
			}
		}
	}

