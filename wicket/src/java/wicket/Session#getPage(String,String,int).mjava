	/**
	 * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT CALL IT.
	 * 
	 * Get the page for the given path.
	 * 
	 * @param pageMapName
	 *            The name of the page map where the page is
	 * @param path
	 *            Component path
	 * @param versionNumber
	 *            The version of the page required
	 * @return The page based on the first path component (the page id), or null
	 *         if the requested version of the page cannot be found.
	 */
	public final synchronized Page getPage(final String pageMapName, final String path,
			final int versionNumber)
	{
		if (log.isDebugEnabled())
		{
			log.debug("Getting page [path = " + path + ", versionNumber = " + versionNumber + "]");
		}

		// Get page map by name, creating the default page map automatically
		PageMap pageMap = pageMapForName(pageMapName, pageMapName == PageMap.DEFAULT_NAME);
		if (pageMap != null)
		{
			// Get page entry for id and version
			final String id = Strings.firstPathComponent(path, Component.PATH_SEPARATOR);
			Thread t = usedPages.get(id);
			while (t != null && t != Thread.currentThread())
			{
				try
				{
					wait(1000);
				}
				catch (InterruptedException ex)
				{
					throw new WicketRuntimeException(ex);
				}
				t = usedPages.get(id);
			}
			usedPages.put(id, Thread.currentThread());
			Page page = pageMap.get(Integer.parseInt(id), versionNumber);
			if(page == null)
			{
				usedPages.remove(id);
				notifyAll();
			}
			return page;
		}
		return null;
	}

