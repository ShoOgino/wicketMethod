	/**
	 * Constructor, do not override this constructor for configuring youre
	 * application. Use the init() method for that.
	 */
	public Application()
	{
		// Create name from subclass
		this.name = Classes.simpleName(getClass());

		// Construct markup cache for this application
		this.markupCache = new MarkupCache(this);

		// Create shared resources repository
		this.sharedResources = new SharedResources(this);

		// Install default component resolvers
		getPageSettings().addComponentResolver(new ParentResolver());
		getPageSettings().addComponentResolver(new AutoComponentResolver());
		getPageSettings().addComponentResolver(new MarkupInheritanceResolver());
		getPageSettings().addComponentResolver(new HtmlHeaderResolver());
		getPageSettings().addComponentResolver(new WicketLinkResolver());
		getPageSettings().addComponentResolver(new WicketMessageResolver());

		// Install button image resource factory
		getResourceSettings().addResourceFactory("buttonFactory",
				new DefaultButtonImageResourceFactory());

		// Install default component instantiation listener that uses
		// authorization strategy to check component instantiations.
		addComponentInstantiationListener(new IComponentInstantiationListener()
		{
			/**
			 * @see wicket.application.IComponentInstantiationListener#onInstantiation(wicket.Component)
			 */
			public void onInstantiation(final Component component)
			{
				// If component instantiation is not authorized
				if (!Session.get().getAuthorizationStrategy().isInstantiationAuthorized(
						component.getClass()))
				{
					// then call any unauthorized component instantiation listener
					getSecuritySettings().getUnauthorizedComponentInstantiationListener()
							.onUnauthorizedInstantiation(component);
				}
			}
		});
	}

