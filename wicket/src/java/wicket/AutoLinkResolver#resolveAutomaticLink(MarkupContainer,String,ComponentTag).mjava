	/**
	 * Resolves the given tag's page class and page parameters by parsing the
	 * tag component name and then searching for a page class at the absolute or
	 * relative URL specified by the href attribute of the tag.
	 *
	 * @param container
	 *            The container where the link is
	 * @param id
	 *            the name of the component
	 * @param tag
	 *            the component tag
	 * @return A BookmarkablePageLink to handle the href
	 */
	private final Component resolveAutomaticLink(final MarkupContainer container,
			final String id, final ComponentTag tag)
	{
		final Page page = container.getPage();
		final String originalHref = tag.getAttributes().getString("href");
		final int pos = originalHref.indexOf(".html");

		String classPath = originalHref.substring(0, pos);
		PageParameters pageParameters = null;

		// ".html?" => 6 chars
		if ((classPath.length() + 6) < originalHref.length())
		{
			final String queryString = originalHref.substring(classPath.length() + 6);
			pageParameters = new PageParameters(new ValueMap(queryString, "&"));
		}

		// Make the id (page-)unique
		final String autoId = id + Integer.toString(page.getAutoIndex());

		// The component name on the tag changed
		tag.setId(autoId);

		// Obviously a href like href="myPkg.MyLabel.html" will do as well.
		// Wicket will not throw an exception. It accepts it.
		classPath = Strings.replaceAll(classPath,"/", ".");

		if (!classPath.startsWith("."))
		{
			// Href is relative. Resolve the url given relative to the current
			// page
			final String className = page.getClass().getPackage().getName() + "." + classPath;
			final Class clazz = page.getApplicationSettings().getDefaultClassResolver()
					.resolveClass(className);

			return new AutolinkBookmarkablePageLink(autoId, clazz, pageParameters);
		}
		else
		{
			// href is absolute. If class with the same absolute path exists,
			// use it. Else don't change the href.
			final String className = classPath.substring(1);
			try
			{
				final Class clazz = page.getApplicationSettings().getDefaultClassResolver()
						.resolveClass(className);

				return new AutolinkBookmarkablePageLink(autoId, clazz, pageParameters);
			}
			catch (WicketRuntimeException ex)
			{
				; // fall through
			}
		}

		// Don't change the href. Did not find a proper Wicket page
		return new AutolinkExternalLink(autoId, originalHref);
	}

