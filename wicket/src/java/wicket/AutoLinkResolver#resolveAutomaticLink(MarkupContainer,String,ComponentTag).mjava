	/**
	 * Resolves the given tag's page class and page parameters by parsing the
	 * tag component name and then searching for a page class at the absolute or
	 * relative URL specified by the href attribute of the tag.
	 *
	 * @param container
	 *            The container where the link is
	 * @param id
	 *            the name of the component
	 * @param tag
	 *            the component tag
	 * @return A BookmarkablePageLink to handle the href
	 */
	private final Component resolveAutomaticLink(final MarkupContainer container,
			final String id, final ComponentTag tag)
	{
	    // Init
		final Page page = container.getPage();
		final String originalHref = tag.getAttributes().getString("href");
		
		PageParameters pageParameters = null;
		String classPath = originalHref;
		
		// get query string 
		int pos = originalHref.indexOf("?");
		if (pos != -1)
		{
			final String queryString = originalHref.substring(pos + 1);
			pageParameters = new PageParameters(new ValueMap(queryString, "&"));
			classPath = originalHref.substring(0, pos);
		}

		// Make the id (page-)unique
		final String autoId = id + Integer.toString(page.getAutoIndex());

		// By setting the component name, the tag becomes a Wicket component 
		// tag, which needs a Component attached to it.
		tag.setId(autoId);

		// remove the file extension, but remember it
		String extension = null;
		pos = classPath.lastIndexOf(".");
		if (pos != -1)
		{
		    extension = classPath.substring(pos + 1);
		    classPath = classPath.substring(0, pos);
		}

		// HTML hrefs are validated differently
		if ("html".equalsIgnoreCase(extension))
        {
			// Obviously a href like href="myPkg.MyLabel.html" will do as well.
			// Wicket will not throw an exception. It accepts it.
			classPath = Strings.replaceAll(classPath,"/", ".");
			
		    if (!classPath.startsWith("."))
			{
				// Href is relative. Resolve the url given relative to the current
				// page
				final String className = page.getClass().getPackage().getName() + "." + classPath;
				final Class clazz = page.getApplicationSettings().getDefaultClassResolver()
						.resolveClass(className);
	
				return new AutolinkBookmarkablePageLink(autoId, clazz, pageParameters);
			}
			else
			{
				// href is absolute. If class with the same absolute path exists,
				// use it. Else don't change the href.
				final String className = classPath.substring(1);
				try
				{
					final Class clazz = page.getApplicationSettings().getDefaultClassResolver()
							.resolveClass(className);
	
					return new AutolinkBookmarkablePageLink(autoId, clazz, pageParameters);
				}
				catch (WicketRuntimeException ex)
				{
					; // fall through
				}
			}
        }
		// Validate all other hrefs
		else
		{
		    if (classPath.startsWith("/") || classPath.startsWith("\\"))
			{
				// href is absolute. Don't change it at all.
			}
		    else
		    {
				// Href is relative, prepend the package name. Thus we keep
		        // pre-view capabilities in Dreamweaver etc. and creat a proper
		        // href at runtime.
		        
		        // <wicket:head> component are handled differently. We can not use
		        // the container, because it is the container the header has been
		        // added to (e.g. the Page). What we need however, is the component
		        // (e.g. a Panel) which contributed it.
		        Component relevantContainer = container;
		        if (container instanceof HtmlHeaderContainer)
		        {
		            relevantContainer = findPanelComponent(container);
		        }
		        
		        // Create the runtime href which has the proper package name
		        // prepended.
		        String href = relevantContainer.getClass().getPackage().getName();
		        href = Strings.replaceAll(href, ".", "/") + "/" + originalHref;
		        
		        // Create the component implementing the link
				return new AutolinkExternalLink(autoId, href);
			}
		}

		// Don't change the href. Did not find a proper Wicket page
		return new AutolinkExternalLink(autoId, originalHref);
	}

