	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
		StringBuffer sb = new StringBuffer(super.toString());
		sb.append(":nestedModel=[").append(nestedModel).append("]");
		return sb.toString();
	}
	/**
	 * Ognl context with a reference to the current component.
	 */
//	private static final class ConversionContext extends OgnlContext
//	{
//		/** current component. */
//		Component component;
//
//		/**
//		 * Construct.
//		 */
//		ConversionContext()
//		{
//			setTypeConverter(new TypeConverter());
//		}
//
//		/**
//		 * Type converter for expressions.
//		 */
//		private final class TypeConverter extends DefaultTypeConverter
//		{
//			/**
//			 * @see ognl.DefaultTypeConverter#convertValue(java.util.Map, java.lang.Object, java.lang.Class)
//			 */
//			public Object convertValue(Map context, Object value, Class toType)
//			{
//				if (value == null)
//				{
//					return null;
//				}
//
//				if (!toType.isArray() && value instanceof String[]
//						&& ((String[])value).length == 1)
//				{
//					value = ((String[])value)[0];
//				}
//
//				if (value instanceof String && ((String)value).trim().equals(""))
//				{
//					return null;
//				}
//				return component.getConverter().convert(value, toType);
//			}
//
//			/**
//			 * @see ognl.TypeConverter#convertValue(java.util.Map, java.lang.Object, java.lang.reflect.Member, java.lang.String, java.lang.Object, java.lang.Class)
//			 */
//			public Object convertValue(Map context, Object target, Member member,
//					String propertyName, Object value, Class toType)
//			{
//				return convertValue(context, value, toType);
//			}
//		}
//	}

