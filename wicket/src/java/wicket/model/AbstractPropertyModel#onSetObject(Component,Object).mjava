	/**
	 * Applies the Ognl expression on the model object using the given object
	 * argument (Ognl.setValue).
	 * 
	 * @param object
	 *            the object that will be used when applying Ognl.setValue on
	 *            the model object
	 * @see AbstractDetachableModel#onSetObject(Component, Object)
	 */
	protected void onSetObject(final Component component, Object object)
	{
		try
		{
			final String expression = ognlExpression(component);
			if (Strings.isEmpty(expression))
			{
				// No expression will cause OGNL to throw an exception. The OGNL
				// expression to set the current object is "#this".
				if(nestedModel instanceof IModel)
				{
					((IModel)nestedModel).setObject(null, object);
				}
				else
				{
					nestedModel = object;
				}
			}
			else
			{
				// Get the real object
				Object modelObject = modelObject(component);
	
				// If the object is a String
				if (object instanceof String)
				{
					// and that String is not empty
					final String string = (String)object;
					if (!Strings.isEmpty(string))
					{
						// and there is a non-null property type for the component
						final Class propertyType = propertyType(component);
						if (propertyType != null)
						{
							// convert the String to the right type
							object = component.getConverter().convert(string, propertyType);
						}
					}
				}
	
				// Let OGNL set the value
				prepareContext(component);
				Ognl.setValue(ognlExpression(component), conversionContext, modelObject, object);
			}
		}
		catch (OgnlException e)
		{
			throw new WicketRuntimeException(e);
		}
	}

