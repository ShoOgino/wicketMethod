	/**
	 * Loads markup.
	 * 
	 * @param settings
	 *           Application settings
	 * @param key
	 *           Key under which markup should be cached
	 * @param markupResource
	 *           The markup resource to load
	 * @return The markup
	 * @throws ParseException
	 * @throws IOException
	 * @throws ResourceNotFoundException
	 */
	private Markup loadMarkup(final ApplicationSettings settings, final String key,
			final Resource markupResource) throws ParseException, IOException, ResourceNotFoundException
	{
	    final Class markupParserClass = settings.getMarkupParserClass();
	    
	    final IMarkupParser parser;
	    try
	    {
	        parser = (IMarkupParser) markupParserClass.newInstance();
	    }
	    catch (IllegalAccessException ex)
	    {
	        throw new IOException("Failed to load MarkupParser: " + ex.getMessage());
	    }
	    catch (InstantiationException ex)
	    {
	        throw new IOException("Failed to load MarkupParser: " + ex.getMessage());
	    }
	    
		parser.setComponentNameAttribute(settings.getComponentNameAttribute()); 
		parser.setWicketNamespace(settings.getWicketNamespace());
		parser.setStripComments(settings.getStripComments());
		parser.setCompressWhitespace(settings.getCompressWhitespace());
		parser.setStripWicketParamTag(settings.getStripWicketParamTag());
		parser.setAutolinking(settings.isAutomaticLinking());
		parser.setAutolinkBasePage(this.getPage());

		final Markup markup = parser.read(markupResource);

		markupCache.put(key, markup);

		return markup;
	}

