	/**
	 * Page.doRender() is used to render a whole page. With AJAX however it must
	 * be possible to re-render any one component contained in a page. That is
	 * what Component.doRender() is for, though it is not necessary that the 
	 * page has been rendered.
	 */
	public void doRender()
	{
		// Save the parent's markup stream to re-assign it at the end
		MarkupContainer parent = getParent();
		MarkupStream originalMarkupStream = parent.getMarkupStream();

		// Get the parent's associated markup stream.
		MarkupContainer parentWithAssociatedMarkup = findParentWithAssociatedMarkup();
		MarkupStream markupStream = parentWithAssociatedMarkup.getAssociatedMarkupStream();

		// Make sure the markup stream is position at the correct element
		if (this.markupStreamPosition != -1)
		{
			markupStream.setCurrentIndex(this.markupStreamPosition);
		}
		else
		{
			String componentPath = getParent().getPageRelativePath();
			String parentWithAssociatedMarkupPath = parentWithAssociatedMarkup.getPageRelativePath();
			String relativePath = componentPath.substring(parentWithAssociatedMarkupPath.length());
			
			this.markupStreamPosition = markupStream.findComponent(relativePath, getId());
		}

		if (this.markupStreamPosition == -1)
		{
			throw new WicketRuntimeException("Unable to determine markup for component: " + this.toString());
		}

		try
		{
			// Make sure that while rendering the markup stream is found
			parent.setMarkupStream(markupStream);

			// Render the component and all its children
			internalBeginRequest();
			render();
		}
		finally
		{
			// Make sure the original markup stream is back in place
			parent.setMarkupStream(originalMarkupStream);
		}
	}

