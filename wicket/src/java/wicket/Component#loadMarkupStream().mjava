	/**
	 * This method is called in the Component's constructor. 
	 * However some components may either require to load the markup later
	 * or not at all in case the markup is fully dynamic. In both cases
	 * override loadMarkupStream() and provide you own logic.
	 * E.g. 
	 * <pre>
	 * 	protected void loadMarkupStream()
	 *  {
	 *     if (this.myDatasource != null)
	 *     {
	 *        super.loadMarkupStream();
	 *     }
     *  }
	 * </pre> 
	 */
	protected void loadMarkupStream()
	{
		try
		{
			MarkupStream markupStream = Application.get().getMarkupSettings().getMarkupFragmentFinder().find(this);
			ComponentTag tag = markupStream.getTag();
			if (tag.hasAttributes())
			{
				markupAttributes = new CopyOnWriteValueMap(tag.getAttributes());
			}
		}
		catch (MarkupException ex)
		{
			log.warn("MarkupFragmentFinder was unable to find the markup associated with Component '" 
					+ id + "'. You will not be able to use the component for AJAX calls.");
//				throw ex;
		}
		catch (RuntimeException re)
		{
			log.warn("MarkupFragmentFinder was unable to find the markup associated with Component '" 
					+ id + "'. You will not be able to use the component for AJAX calls.");
//				throw new WicketRuntimeException("Couldn't find the markup of the component '" + id
//						+ "' in parent " + parent.getPageRelativePath(), re);
		}
	}

