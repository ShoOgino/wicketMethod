	/**
	 * Adds a child component to this container.
	 * 
	 * @param child
	 *            The child
	 * @throws IllegalArgumentException
	 *             Thrown if a child with the same id is replaced by the add
	 *             operation.
	 * @return This
	 */
	public MarkupContainer add(final Component child)
	{
		// Check for degenerate case
		if (child == this)
		{
			throw new IllegalArgumentException("Component can't be added to itself");
		}

		if (log.isDebugEnabled())
		{
			log.debug("Add " + child.getId() + " to " + this);
		}

		// Set child's parent
		child.setParent(this);

		// Are we using MicroMap optimization?
		if (optimizeChildMapsForSpace)
		{
			if (childForId.size() == MicroMap.MAX_ENTRIES)
			{
				// Reallocate MicroMap as MiniMap
				childForId = new MiniMap(childForId, MINIMAP_MAX_ENTRIES);
			}
			else if (childForId.size() == MINIMAP_MAX_ENTRIES)
			{
				// Reallocate MiniMap as full HashMap
				childForId = new HashMap(childForId);
			}
		}

		// Add to map
		final Object replaced = childForId.put(child.getId(), child);

		// Look up to make sure it's not already in the map
		if (replaced != null)
		{
			throw new IllegalArgumentException(exceptionMessage("A child component with the id '"
					+ child.getId() + "' already exists"));
		}

		// Tell the page a component was added
		final Page page = findPage();
		if (page != null)
		{
			page.componentAdded(child);
		}

		return this;
	}

