	/**
	 * Renders the next element of markup in the given markup stream.
	 * 
	 * @param markupStream
	 *			  The markup stream
	 */
	private void renderNext(final MarkupStream markupStream)
	{
		// Get the current markup element
		final MarkupElement element = markupStream.get();

		// If it a tag like <wicket..> or <span wicket:id="..." >
		if (element instanceof ComponentTag && !markupStream.atCloseTag())
		{
			// Get element as tag
			final ComponentTag tag = (ComponentTag)element;

			// Get component id
			final String id = tag.getId();

			// Get the component for the id from the given container
			final Component component = get(id);

			// Failed to find it?
			if (component != null)
			{
				component.render();
			}
			else
			{
				// 2nd try: all static name resolvers
				final List componentResolvers = this.getApplication().getComponentResolvers();
				final Iterator iter = componentResolvers.iterator();
				while (iter.hasNext())
				{
					final IComponentResolver resolver = (IComponentResolver)iter.next();
					if (resolver.resolve(this, markupStream, tag))
					{
						return;
					}
				}

				// 3rd try: a subclass replacing resolveComponent()
				MarkupContainer container = this;
				while (container != null)
				{
					if (container.resolveComponent(markupStream, tag))
					{
						return;
					}

					container = container.findParent(MarkupContainer.class);
				}

				// No one was able to handle the component name
				markupStream.throwMarkupException("Unable to find component named '"
						+ id + "' in " + this);
			}
		}
		else
		{
			// Render as raw markup
			log.debug("Rendering raw markup");
			getResponse().write(element.toString());
			markupStream.next();
		}
	}

