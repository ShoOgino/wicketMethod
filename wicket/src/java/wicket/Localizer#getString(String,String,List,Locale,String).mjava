	/**
	 * 
	 * <p>
	 * Note: This implementation does NOT allow variable (OGNL) substitution
	 * 
	 * @param key
	 *            The key to obtain the resource for
	 * @param searchStack
	 *            A stack of classes to get the resource for
	 * @param path
	 *            The component id path relative to the page
	 * @param locale
	 *            The locale to get the resource for (optional)
	 * @param style
	 *            The style to get the resource for (optional) (see
	 *            {@link wicket.Session})
	 * @return The string resource
	 * @throws MissingResourceException
	 *             If resource not found and configuration dictates that
	 *             exception should be thrown
	 */
	public String getString(final String key, final String path, final List searchStack, 
			final Locale locale, final String style)
			throws MissingResourceException
	{
		if (searchStack == null)
		{
			throw new IllegalArgumentException(
					"Parameter 'searchStack' must have at least one entry");
		}

		// The top element
		Class componentClass = (searchStack.size() > 0 ? (Class) searchStack.get(0) : null); 
		
		// If value is cached already ...
		String id = createCacheId(componentClass, locale, style, key);

		// The cached key value
		String string = getCachedValue(id);
		
		// If not found in the cache
		if (string == null)
		{
			string = traverseResourceLoaders(key, path, searchStack, locale, style);
			
			// cache all values, not matter the key has been found or not
			if (string != null)
			{
				this.cachedValues.put(id, string);
			}
			else
			{
				// ConcurrentReaderHashMap does not allow null values. This is a
				// substitute
				this.cachedValues.put(id, NULL);
			}
		}

		return string;
	}

