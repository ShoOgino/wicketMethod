    /**
     * Looks up a page constructor by class name and constructor argument. If
     * argument == null, the default constructor will be taken.
     * 
     * @param pageClass
     *            The class of page
     * @param parameter
     *            The parameter class for the constructor
     * @return The page constructor
     * @throws RenderException
     */
    protected final Constructor getConstructor(final Class pageClass,
            final Class parameter)
    {
        // Constructor already in cache?

        // Note: the class name has been deliberately taken as map key, as
        // Groovy e.g. will create a new Class if the groovy file has been
        // changed and afterwards reloaded: new Class != old Class.
        Constructor constructor = (Constructor) constructors.get(pageClass
                .getName());
        if (constructor == null)
        {
            try
            {
                // Not found. Create a new Constructor
                if (parameter == null)
                {
                    constructor = pageClass.getConstructor((Class[]) null);
                }
                else
                {
                    constructor = pageClass
                            .getConstructor(new Class[] { parameter });
                }

                // Store it in the cache
                constructors.put(pageClass.getName(), constructor);
            }
            catch (NoSuchMethodException e)
            {
                throw new RenderException(
                        "Could not find proper page constructor in "
                                + pageClass
                                + "; Constructor parameter="
                                + (parameter == null ? "null" : parameter
                                        .getName()), e);
            }
        }

        return constructor;
    }

