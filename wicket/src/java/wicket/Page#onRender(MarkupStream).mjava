	/**
	 * Renders this container to the given response object.
	 * 
	 * @param markupStream
	 */
	protected final void onRender(final MarkupStream markupStream)
	{
		// Visit all this page's children to reset markup streams and check
		// rendering authorization, as appropriate. We set any result; positive
		// or negative as a temporary boolean in the components, and when a
		// authorization exception is thrown it will block the rendering of this
		// page
		visitChildren(new IVisitor()
		{
			public Object component(final Component component)
			{
				// Find out if this component can be rendered
				final boolean renderAllowed = component.authorize(RENDER);
				if (renderAllowed)
				{
					// It could be that the markup stream has been reloaded
					// (modified) and that the markup stream positions are no
					// longer valid.
					component.resetMarkupStream();
				}

				// Authorize rendering
				component.setRenderAllowed(renderAllowed);
				return IVisitor.CONTINUE_TRAVERSAL;
			}
		});

		// Set page's associated markup stream
		final MarkupStream associatedMarkupStream = getAssociatedMarkupStream();
		setMarkupStream(associatedMarkupStream);

		// Configure response object with locale and content type
		configureResponse();

		// Render all the page's markup
		setFlag(FLAG_IS_RENDERING, true);
		try
		{
			renderAll(associatedMarkupStream);
		}
		finally
		{
			setFlag(FLAG_IS_RENDERING, false);
		}
	}

