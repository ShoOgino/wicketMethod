	/**
	 * Constructor that uses the provided object as a model. If the object given
	 * is an instance of PropertyModel, the object will be used directly. If the
	 * object is an instance of IModel, it will be wrapped in a PropertyModel
	 * instance using the OGNL expression. This is the equivalent of:
	 * 
	 * <pre>
	 * 
	 *                 IModel model;
	 *                 String expression;
	 *                 ...
	 *                 new MyComponent(name, new PropertyModel(model, expression));
	 *  
	 * </pre>
	 * 
	 * If the object is not an instance of PropertyModel or IModel, the object
	 * will be wrapped in an instance of {@link Model}that will in turn be
	 * wrapped in an instance of {@link PropertyModel}using the provided
	 * expression. Thus, this is the equivalent of:
	 * 
	 * <pre>
	 * 
	 *                 Serializable model;
	 *                 String expression;
	 *                 ...
	 *                 new MyComponent(name, new PropertyModel(new Model(model), expression));
	 *  
	 * </pre>
	 * 
	 * All components have names. A component's name cannot be null.
	 * 
	 * @param name
	 *            The non-null name of this component
	 * @param object
	 *            The object that will be used as the subject for the given OGNL
	 *            expression
	 * @param expression
	 *            The OGNL expression that works on the given model object
	 * @throws WicketRuntimeException
	 *             Thrown if the component has been given a null name.
	 */
	public Component(String name, Serializable object, String expression)
	{
		setName(name);

		// If object is already a property model, set that
		if (object instanceof PropertyModel)
		{
			setModel((PropertyModel)object);
		}
		else
		// If object is already an IModel
		if (object instanceof IModel)
		{
			// wrap in a PropertyModel
			setModel(new PropertyModel((IModel)object, expression));
		}
		else
		{
			// wrap object in a Model and then in a PropertyModel
			setModel(new PropertyModel(new Model(object), expression));
		}
	}

