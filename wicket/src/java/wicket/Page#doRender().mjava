	/**
	 * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT CALL IT.
	 */
	public final void doRender()
	{
		// first try to check if the page can be rendered:
		if (!isActionAuthorized(RENDER))
		{
			if (log.isDebugEnabled())
			{
				log.debug("Page not allowed to render: " + this);
			}
			throw new UnauthorizedActionException(this,Component.RENDER);
		}

		// Visit all this page's children to reset markup streams and check
		// rendering authorization, as appropriate. We set any result; positive
		// or negative as a temporary boolean in the components, and when a
		// authorization exception is thrown it will block the rendering of this
		// page
		visitChildren(new IVisitor()
		{
			public Object component(final Component component)
			{
				// Find out if this component can be rendered
				final boolean renderAllowed = component.isActionAuthorized(RENDER);

				// Authorize rendering
				component.setRenderAllowed(renderAllowed);
				return IVisitor.CONTINUE_TRAVERSAL;
			}
		});

		// Make sure it is really empty
		renderedComponents = null;

		// Reset it to stateless is false so that
		this.stateless = true;

		// Set form component values from cookies
		setFormComponentValuesFromCookies();

		try
		{
			// We have to initialize the page's request now

			// First, give priority to IFeedback instances, as they have to
			// collect their messages before components like ListViews
			// remove any child components
			visitChildren(IFeedback.class, new IVisitor()
			{
				public Object component(Component component)
				{
					((IFeedback)component).updateFeedback();
					component.internalBeginRequest();
					return IVisitor.CONTINUE_TRAVERSAL;
				}
			});

			// Now, do the initialization for the other components
			internalBeginRequest();

			// Handle request by rendering page
			render(null);

			// Check rendering if it happened fully
			checkRendering(this);

			// Add/touch the response page in the session (its pagemap).
			getSession().touch(this);

		}
		finally
		{
			// The request is over
			internalEndRequest();
		}
	}

