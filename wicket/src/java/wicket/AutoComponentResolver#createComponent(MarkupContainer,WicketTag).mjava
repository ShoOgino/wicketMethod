    /**
     * Based on the tag, create and initalize the component.
     *  
     * @param container The current container. The new compent will be added to that container.
     * @param tag The tag containing the information about component 
     * @return The new component
     * @throws WicketRuntimeException in case the component could not be created
     */
    // Wicket is current not using any bean util jar, which is why ...
    private final Component createComponent(final MarkupContainer container, final WicketTag tag)
    {
        // If no component name is given, create a page-unique one yourself.
        String componentId = tag.getNameAttribute();
        if (componentId == null)
        {
            componentId = "anonymous-" + container.getPage().getAutoIndex();
        }

        // Get the component class name
        final String classname = tag.getAttributes().getString("class");
        if ((classname == null) || (classname.trim().length() == 0))
        {
            throw new MarkupException("Tag <wicket:component> must have attribute 'class'");
        }

        // Load the class. In case a Groovy Class Resolver has been provided,
        // the name might be a Groovy file.
        // Note: Spring based components are not supported this way. May be we
        //  should provide a ComponentFactory like we provide a PageFactory.
        final Class componentClass = container.getSession().getClassResolver().resolveClass(classname);

        // construct the component. It must have a constructor with a single
        // String (componentId) parameter.
        final Component component;
        try
        {
            final Constructor constructor = componentClass
                    .getConstructor(new Class[] { String.class });
            component = (Component)constructor.newInstance(new Object[] { componentId });
        }
        catch (NoSuchMethodException e)
        {
            throw new MarkupException(
                    "Unable to create Component from wicket tag: Cause: " 
                    + e.getMessage());
        }
        catch (InvocationTargetException e)
        {
            throw new MarkupException(
                    "Unable to create Component from wicket tag: Cause: " 
                    + e.getMessage());
        }
        catch (IllegalAccessException e)
        {
            throw new MarkupException(
                    "Unable to create Component from wicket tag: Cause: " 
                    + e.getMessage());
        }
        catch (InstantiationException e)
        {
            throw new MarkupException(
                    "Unable to create Component from wicket tag: Cause: " 
                    + e.getMessage());
        }
        catch (ClassCastException e)
        {
            throw new MarkupException(
                    "Unable to create Component from wicket tag: Cause: " 
                    + e.getMessage());
        }
        catch (SecurityException e)
        {
            throw new MarkupException(
                    "Unable to create Component from wicket tag: Cause: " 
                    + e.getMessage());
        }

        // Get all remaining attributes and invoke the component's setters
        final Iterator iter = tag.getAttributes().entrySet().iterator();
        while (iter.hasNext())
        {
            final Map.Entry entry = (Map.Entry)iter.next();
            final String key = (String)entry.getKey();
            final String value = (String)entry.getValue();

            // Ignore attributes 'name' and 'class'
            if ("name".equalsIgnoreCase(key) || ("class".equalsIgnoreCase(key)))
            {
                continue;
            }

            // Get the setter for the attribute
            final String methodName = "set" + key;
            final Method[] methods = component.getClass().getMethods();
            Method method = null;
            for (int i = 0; i < methods.length; i++)
            {
                if (methods[i].getName().equalsIgnoreCase(methodName))
                {
                    method = methods[i];
                }
            }

            if (method == null)
            {
                throw new MarkupException(
                        "Unable to initialize Component. Method with name " + methodName
                                + " not found");
            }

            // The method must have a single parameter
            final Class[] parameterClasses = method.getParameterTypes();
            if (parameterClasses.length != 1)
            {
                throw new MarkupException(
                        "Unable to initialize Component. Method with name " + methodName
                                + " must have one and only one parameter");
            }

            // Convert the parameter if necessary, depending on the setter's attribute
            final Class paramClass = parameterClasses[0];
            try
            {
                if (paramClass.equals(String.class))
                {
                    method.invoke(component, new Object[] { value });
                }
                else if (paramClass.equals(int.class))
                {
                    method.invoke(component, new Object[] { new Integer(tag.getAttributes().getInt(
                            key)) });
                }
                else if (paramClass.equals(long.class))
                {
                    method.invoke(component, new Object[] { new Long(tag.getAttributes().getLong(
                            (key))) });
                }
            }
            catch (IllegalAccessException ex)
            {
                throw new MarkupException(
                        "Unable to initialize Component. Failure while invoking method "
                                + methodName + ". Cause: " + ex);
            }
            catch (InvocationTargetException ex)
            {
                throw new MarkupException(
                        "Unable to initialize Component. Failure while invoking method "
                                + methodName + ". Cause: " + ex);
            }
            catch (StringValueConversionException ex)
            {
                throw new MarkupException(
                        "Unable to initialize Component. Failure while invoking method "
                                + methodName + ". Cause: " + ex);
            }
        }

        return component;
    }

