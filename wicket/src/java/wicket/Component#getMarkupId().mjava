	/**
	 * Retrieves id by which this component is represented within the markup.
	 * <p>
	 * The point of this function is to generate a unique id to make it easy to
	 * locate this component in the generated markup for post-wicket processing
	 * such as javascript or an xslt transform.
	 * <p>
	 * Note: The component must have been added (directly or indirectly) to a
	 * container with an associated markup file (Page, Panel or Border). This
	 * TODO this restriction will be implicitly met after implementing 1.3's
	 * constructor change
	 * 
	 * @return markup id of this component, which is the result of the call to
	 *         {@link #getPageRelativePath()} where the ':' character (the
	 *         internal path seperator of Wicket) are replaced by the '_'
	 *         character.
	 */
	public String getMarkupId()
	{
		/*
		 * TODO Post 1.2: Restore the code below after the constructor refactor,
		 * right now its causing too much pain for components inside listviews
		 * and borders.
		 * 
		 * CODE:
		 * 
		 * String id = getMarkupAttributes().getString("id"); if (id == null) {
		 * id = getPageRelativePath(); } return id;
		 * 
		 * JAVADOC:
		 * 
		 * If the id attribute is present in the markup attributes of this
		 * component it will be used, otherwise the page-relative path of this
		 * component will be used. <p>
		 * 
		 * 
		 */

		return getPageRelativePath().replace(':', '_');
	}

