	/**
	 * Resolves to a bookmarkable page target.
	 * 
	 * @param requestCycle
	 *            the current request cycle
	 * @param requestParameters
	 *            the request parameters object
	 * @return the bookmarkable page as a request target
	 */
	protected IRequestTarget resolveBookmarkablePage(final RequestCycle requestCycle,
			final RequestParameters requestParameters)
	{
		String bookmarkablePageClass = requestParameters.getBookmarkablePageClass();
		Session session = requestCycle.getSession();
		Class<? extends Page> pageClass;
		try
		{
			pageClass = (Class<? extends Page>)session.getClassResolver().resolveClass(bookmarkablePageClass);
		}
		catch (RuntimeException e)
		{
			return new WebErrorCodeResponseTarget(HttpServletResponse.SC_NOT_FOUND,
					"Unable to load Bookmarkable Page");
		}

		try
		{
			PageParameters params = new PageParameters(requestParameters.getParameters());
			if (requestParameters.getComponentPath() != null && requestParameters.getInterfaceName() != null) 
			{
				return new BookmarkableListenerInterfaceRequestTarget(requestParameters.getPageMapName(), 
						pageClass, params, requestParameters.getComponentPath(), requestParameters.getInterfaceName());
			}			
			else if (requestParameters.getBookmarkableFormName() != null)
			{
				return new BookmarkableFormPageRequestTarget(requestParameters.getPageMapName(),
						pageClass, params, requestParameters.getBookmarkableFormName());
			}
			else
			{
				return new BookmarkablePageRequestTarget(requestParameters.getPageMapName(),
						pageClass, params);
			}
		}
		catch (RuntimeException e)
		{
			throw new WicketRuntimeException("Unable to instantiate Page class: "
					+ bookmarkablePageClass + ". See below for details.", e);
		}
	}

