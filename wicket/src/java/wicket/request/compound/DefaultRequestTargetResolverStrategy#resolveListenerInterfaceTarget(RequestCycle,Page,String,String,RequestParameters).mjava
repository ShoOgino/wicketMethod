	/**
	 * Resolves the RequestTarget for the given interface. This method can be
	 * overriden if some special interface needs to resolve to its own target.
	 * 
	 * @param requestCycle
	 *            The current RequestCycle object
	 * @param page
	 *            The page object which holds the component for which this
	 *            interface is called on.
	 * @param componentPath
	 *            The component path for looking up the component in the page.
	 * @param interfaceName
	 *            The interface to resolve.
	 * @param requestParameters 
	 * @return The RequestTarget that was resolved
	 */
	protected IRequestTarget resolveListenerInterfaceTarget(RequestCycle requestCycle,
			final Page page, final String componentPath, final String interfaceName, RequestParameters requestParameters)
	{
		if (interfaceName.equals("IRedirectListener"))
		{
			return new RedirectPageRequestTarget(page);
		}
		else
		{
			Method listenerMethod = requestCycle.getRequestInterfaceMethod(interfaceName);
			if (listenerMethod == null)
			{
				throw new WicketRuntimeException("Attempt to access unknown interface "
						+ interfaceName);
			}
			String componentPart = Strings.afterFirstPathComponent(componentPath,
					Component.PATH_SEPARATOR);
			if (Strings.isEmpty(componentPart))
			{
				// we have an interface that is not redirect, but no
				// component... that must be wrong
				throw new WicketRuntimeException("when trying to call " + listenerMethod
						+ ", a component must be provided");
			}
			Component component = page.get(componentPart);
			if (!component.isVisible())
			{
				throw new WicketRuntimeException(
						"Calling listener methods on components that are not visible is not allowed");
			}
			if (interfaceName.equals("IResourceListener"))
			{
				return new ComponentResourceRequestTarget(page, component, listenerMethod);
			}
			else if (interfaceName.equals("IBehaviorListener"))
			{
				return new BehaviorRequestTarget(page, component, listenerMethod, requestParameters);
			}
			return new ListenerInterfaceRequestTarget(page, component, listenerMethod, requestParameters);
		}
	}

