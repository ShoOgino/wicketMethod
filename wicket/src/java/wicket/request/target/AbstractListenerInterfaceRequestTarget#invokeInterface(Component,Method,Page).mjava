	/**
	 * Invokes a given interface on a component.
	 * 
	 * @param component
	 *            The component
	 * @param method
	 *            The name of the method to call
	 * @param page
	 *            The page on which the component resides
	 */
	protected final void invokeInterface(final Component component, final Method method,
			final Page page)
	{
		// Check authorization
		if (!component.isActionAuthorized(Component.ENABLE))
		{
			throw new UnauthorizedActionException(component, Component.ENABLE);
		}

		page.beforeCallComponent(component, method);

		try
		{
			// Invoke the interface method on the component
			method.invoke(component, new Object[] {});
		}
		catch (InvocationTargetException e)
		{
			// honor redirect exception contract defined in IPageFactory
			if (e.getTargetException() instanceof AbstractRestartResponseException)
			{
				throw (RuntimeException)e.getTargetException();
			}
			throw new WicketRuntimeException("method " + method.getName() + " of "
					+ method.getDeclaringClass() + " targetted at component " + component
					+ " threw an exception", e);
		}
		catch (Exception e)
		{
			throw new WicketRuntimeException("method " + method.getName() + " of "
					+ method.getDeclaringClass() + " targetted at component " + component
					+ " threw an exception", e);
		}
		finally
		{
			page.afterCallComponent(component, method);
		}
	}

