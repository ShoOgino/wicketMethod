	/**
	 * @see wicket.model.AbstractDetachableModel#onGetObject(wicket.Component)
	 */
	public Object onGetObject(Component component)
	{
		if(current != null)
		{
			return current;
		}

		// get the message queue
		Page page = component.getPage();
		FeedbackMessages feedbackMessages = page.getFeedbackMessages();

		// if the queue is empty, just return an empty list
		if(feedbackMessages.isEmpty())
		{
			current = Collections.EMPTY_LIST;
		}
		else
		{
			final Component collector;
			if(collectingComponent != null)
			{
				// use the one that was explicitly set
				collector = collectingComponent;
			}
			else
			{
				// find the feedback enabled component that nests the component that uses this model
				// for example, this could be a FeedbackPanel
				collector = component.findParent(IFeedbackBoundary.class);
			}
	
			// get the messages for the target component, recurse depending
			// on property 'includeNestedComponents'
			current = feedbackMessages.messages(collector, includeNestedComponents,
					true, FeedbackMessage.DEBUG);
		}

		// sort the list before returning it
		sort(current);

		return current;
	}

