	/**
	 * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT CALL IT.
	 * <p>
	 * Responds to a request.
	 * 
	 * @throws ServletException
	 */
	public final void request() throws ServletException
	{
		// prepare the request
		prepare();

		IRequestCycleProcessor processor = null;

		try
		{
			// get the processor we delegate the handling of the request
			// cycle behaviour to
			processor = safeGetRequestProcessor();

			// get the request parameters object using the request encoder of
			// the processor
			final RequestParameters requestParameters = getRequestParameters(processor);

			// resolve the target of the request using the request parameters
			final IRequestTarget target = processor.resolve(this, requestParameters);

			if (target == null)
			{
				throw new WicketRuntimeException(
						"the processor did not resolve to any request target");
			}

			// set it as the current target, on the top of the stack
			setRequestTarget(target);

			// determine what kind of synchronization is to be used, and
			// handle any events with that
			processEventsAndRespond(processor);
		}
		catch (Exception e)
		{
			// try to play nicely and let the request processor handle the
			// exception response. If that doesn't work, any runtime exception
			// will automatically be bubbled up
			if (processor != null)
			{
				processor.respond(e, this);
			}
		}
		finally
		{
			// clean up the request
			cleanUp();
		}
	}

