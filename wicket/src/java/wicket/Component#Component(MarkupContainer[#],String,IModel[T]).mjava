	/**
	 * Constructor. All components have names. A component's id cannot be null.
	 * This constructor includes a model.
	 * 
	 * @param parent
	 *            The parent of this component.
	 * @param id
	 *            The non-null id of this component
	 * @param model
	 *            The component's model
	 * 
	 * @throws WicketRuntimeException
	 *             Thrown if the component has been given a null id.
	 */
	@SuppressWarnings("unchecked")
	public Component(MarkupContainer<?> parent, final String id, final IModel<T> model)
	{
		setId(id);

		if (parent == null)
		{
			if (!(this instanceof Page))
			{
				throw new WicketRuntimeException("component without a parent is not allowed.");
			}
		}
		// Bordered pages might implement the interface to allow to redirect
		// to another parent without the need to change to code of adding a
		// component. Another use case is where you want the parent to
		// automatically
		// add a container in between the parent and new component.
		else if (parent instanceof IAlternateParentProvider)
		{
			// TODO 2.0:juergen: check comment below
			// maybe even keep a list of all previously returned alt-parents in
			// case impl of getAlternateParent() returns getParent() ???
			// otherwise might have infinite loop
			MarkupContainer recursiveCheck = parent;
			while (parent instanceof IAlternateParentProvider)
			{
				parent = ((IAlternateParentProvider)parent).getAlternateParent(this.getClass(), id);
				if (parent == recursiveCheck)
				{
					break;
				}
			}
		}

		this.parent = parent;

		getApplication().notifyComponentInstantiationListeners(this);
		if (id.startsWith(AUTO_COMPONENT_PREFIX))
		{
			parent.autoAdd(this);
		}
		else
		{
			loadMarkupStream();
			parent.add(this);
		}

		if (model instanceof IAssignmentAware)
		{
			this.model = ((IAssignmentAware)model).wrapOnAssignment(this);
		}
		else
		{
			this.model = model;
		}
	}

