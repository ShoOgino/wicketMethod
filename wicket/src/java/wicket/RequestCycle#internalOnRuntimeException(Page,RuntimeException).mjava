	/**
	 * Sets up to handle a runtime exception thrown during rendering. FRAMEWORK
	 * CLIENTS SHOULD NOT CALL THIS METHOD.
	 * 
	 * @param page
	 *            Any page context where the exception was thrown
	 * @param e
	 *            The exception
	 * @throws ServletException
	 *             The exception rethrown for the servlet container
	 */
	protected final void internalOnRuntimeException(final Page page, final RuntimeException e)
			throws ServletException
	{
		// Let client handle any specifics and possibly return a page to redirect to
		final Page redirectTo = application.onRuntimeException(page, e);

		// Always log as error
		log.error("Unexpected runtime exception [page = " + page + "]", e);

		// Always print stack trace
		e.printStackTrace();
		
		// Reset page for re-rendering after exception
		if (page != null)
		{
			page.resetMarkupStreams();
		}

		// If the page we failed to render is an error page
		if (page != null && page.isErrorPage())
		{
			// give up while we're ahead!
			throw new ServletException("Internal Error: Could not render error page " + page, e);
		}
		else
		{
			if (redirectTo != null)
			{
				setResponsePage(redirectTo);
				redirectTo(redirectTo);
			}
			else
			{
				try
				{
					redirectToExceptionErrorPage(page, e);
				}
				catch (RuntimeException e2)
				{
					throw new ServletException(
							"Internal Error: Could not redirect to exception error page.  Was trying to display exception for page "
									+ page + ":\n" + Strings.toString(e), e2);
				}
			}
		}
	}

