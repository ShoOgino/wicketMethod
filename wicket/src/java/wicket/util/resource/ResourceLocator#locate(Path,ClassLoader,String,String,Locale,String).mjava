	/**
	 * Loads a resource. This method prefers to load from the path argument
	 * first. If the resource cannot be found on the path, the classloader
	 * provided is searched. Resources are located using the style, locale and
	 * extension provided and the naming logic encapsulated in ResourceLocator.
	 * 
	 * @param path
	 *            Path to search for resource
	 * @param classloader
	 *            ClassLoader to search if not found on path
	 * @param resourcePath
	 *            The path of the resource
	 * @param style
	 *            Any resource style, such as a skin style
	 * @param locale
	 *            The locale of the resource to load
	 * @param extension
	 *            The extension of the resource
	 * @return The resource
	 * @see ResourceLocator
	 */
	public static IResource locate(final Path path, final ClassLoader classloader,
			String resourcePath, final String style, final Locale locale, final String extension)
	{
		// If no extension specified, extract extension
		final String extensionString;
		if (extension == null)
		{
			extensionString = "." + Strings.lastPathComponent(resourcePath, '.');
			resourcePath = Strings.beforeLastPathComponent(resourcePath, '.');
		}
		else
		{
			extensionString = "." + extension;
		}

		// Compute string components
		resourcePath = resourcePath.replace('.', '/');

		// 1. Search the path provided
		if (path != null && path.size() > 0)
		{
			final IResource resource = new ResourceLocator()
			{
				/**
				 * Check if file exists.
				 * 
				 * @param name
				 *            Name of the resource to find
				 * @return Resource, or null if file not found
				 */
				protected IResource locate(final String name)
				{
					// Log attempt
					log.debug("Attempting to locate resource '" + name + "' on path");

					// Try to find file resource on the path supplied
					final File file = path.find(name);

					// Found resource?
					if (file != null)
					{
						// Return file resource
						return new FileResource(file);
					}
					return null;
				}
			}.locate(resourcePath, style, locale, extensionString);

			if (resource != null)
			{
				return resource;
			}
		}

		// 2. Search the ClassLoader provided
		return new ResourceLocator()
		{
			/**
			 * Locate resource using classloader
			 * 
			 * @param name
			 *            Name of resource
			 * @return The resource
			 */
			protected IResource locate(final String name)
			{
				// Log attempt
				log.debug("Attempting to locate resource '" + name + "' on classpath");

				// Try loading filename on classpath
				final URL url = classloader.getResource(name);
				if (url != null)
				{
					return new UrlResource(url);
				}
				return null;
			}
		}.locate(resourcePath, style, locale, extensionString);
	}

