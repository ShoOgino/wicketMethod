	/**
	 * Replace all occurrences of one string replaceWith another string
	 * 
	 * @param s
	 *            The string to process
	 * @param searchFor
	 *            The value to search for
	 * @param replaceWith
	 *            The value to searchFor replaceWith
	 * @return The resulting string with searchFor replaced with replaceWith
	 */
	public static String replaceAll(final String s, final String searchFor, final String replaceWith)
	{
		// Check arguments
		if (s == null)
		{
			throw new IllegalArgumentException("Cannot pass null target string to replaceAll");
		}

		if (searchFor == null)
		{
			throw new IllegalArgumentException("Cannot pass null searchFor string to replaceAll");
		}

		if (replaceWith == null)
		{
			throw new IllegalArgumentException("Cannot pass null replaceWith string to replaceAll");
		}

		// Go through the string
		StringBuffer buffer = null;
		final int searchForLength = searchFor.length();
		int pos = 0;
		for (int matchIndex; -1 != (matchIndex = s.indexOf(searchFor, pos)); pos = matchIndex
				+ searchForLength)
		{
			// Start a replace operation?
			if (buffer == null)
			{
				// Determine a buffer size so we don't need to
				// reallocate if there's just one replacement.
				int size = s.length();
				final int replaceWithLength = replaceWith.length();
				if (replaceWithLength > searchForLength)
				{
					size += (replaceWithLength - searchForLength);
				}
				buffer = new StringBuffer(size + 16);
			}

			// Found a match. Append up to the match
			buffer.append(s.substring(pos, matchIndex));

			// Add replaceWith
			buffer.append(replaceWith);
		}

		// If no replace was required
		if (buffer == null)
		{
			// return original string
			return s;
		}
		else
		{
			// add tail of s
			buffer.append(s.substring(pos));
			
			// return processed buffer
			return buffer.toString();
		}
	}

