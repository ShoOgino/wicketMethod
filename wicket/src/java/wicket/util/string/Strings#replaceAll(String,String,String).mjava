	/**
	 * Replace all occurrences of one string replaceWith another string
	 * 
	 * @param s
	 *            The string to process
	 * @param searchFor
	 *            The value to search for
	 * @param replaceWith
	 *            The value to searchFor replaceWith
	 * @return The resulting string with searchFor replaced with replaceWith
	 */
	public static String replaceAll(final String s, final String searchFor, final String replaceWith)
	{
		// Look for first occurrence of searchFor
		int matchIndex = s.indexOf(searchFor);
		if (matchIndex == -1)
		{
			// No replace operation needs to happen
			return s;
		}
		else
		{
			// Allocate a StringBuffer that will hold one replacement with a
			// little extra room.
			int size = s.length();
			final int replaceWithLength = replaceWith.length();
			final int searchForLength = searchFor.length();
			if (replaceWithLength > searchForLength)
			{
				size += (replaceWithLength - searchForLength);
			}
			final StringBuffer buffer = new StringBuffer(size + 16);

			int pos = 0;
			do
			{
				// Append text up to the match
				buffer.append(s.substring(pos, matchIndex));

				// Add replaceWith text
				buffer.append(replaceWith);

				// Find next occurrence, if any
				pos = matchIndex + searchForLength;
				matchIndex = s.indexOf(searchFor, pos);
			}
			while (matchIndex != -1);

			// add tail of s
			buffer.append(s.substring(pos));

			// return processed buffer
			return buffer.toString();
		}
	}

