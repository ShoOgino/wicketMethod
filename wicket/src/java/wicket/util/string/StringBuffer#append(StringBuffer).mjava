	/**
	 * Appends the specified <tt>StringBuffer</tt> to this
	 * <tt>StringBuffer</tt>.
	 * <p>
	 * The characters of the <tt>StringBuffer</tt> argument are appended, in
	 * order, to the contents of this <tt>StringBuffer</tt>, increasing the
	 * length of this <tt>StringBuffer</tt> by the length of the argument. If
	 * <tt>sb</tt> is <tt>null</tt>, then the four characters
	 * <tt>"null"</tt> are appended to this <tt>StringBuffer</tt>.
	 * <p>
	 * Let <i>n</i> be the length of the old character sequence, the one
	 * contained in the <tt>StringBuffer</tt> just prior to execution of the
	 * <tt>append</tt> method. Then the character at index <i>k</i> in the
	 * new character sequence is equal to the character at index <i>k</i> in
	 * the old character sequence, if <i>k</i> is less than <i>n</i>;
	 * otherwise, it is equal to the character at index <i>k-n</i> in the
	 * argument <code>sb</code>.
	 * <p>
	 * The method <tt>ensureCapacity</tt> is first called on this
	 * <tt>StringBuffer</tt> with the new buffer length as its argument. (This
	 * ensures that the storage of this <tt>StringBuffer</tt> is adequate to
	 * contain the additional characters being appended.)
	 * 
	 * @param sb
	 *            the <tt>StringBuffer</tt> to append.
	 * @return a reference to this <tt>StringBuffer</tt>.
	 * @since 1.4
	 */
	public StringBuffer append(StringBuffer sb)
	{
		if (sb == null)
		{
			sb = NULL;
		}

		int len = sb.length();
		int newcount = count + len;
		if (newcount > value.length)
			expandCapacity(newcount);
		sb.getChars(0, len, value, count);
		count = newcount;
		return this;
	}

