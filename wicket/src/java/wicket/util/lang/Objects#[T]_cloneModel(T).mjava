	/**
	 * Makes a deep clone of an object by serializing and deserializing it. The
	 * object must be fully serializable to be cloned. This method will not
	 * clone wicket Components, it will just reuse those instances so that the
	 * complete component tree is not copied over only the model data.
	 * 
	 * @param object
	 *            The object to clone
	 * @return A deep copy of the object
	 * @param <T>
	 *            The type
	 */
	@SuppressWarnings("unchecked")
	public static <T> T cloneModel(final T object)
	{
		if (object == null)
		{
			return null;
		}
		else
		{
			try
			{
				final ByteArrayOutputStream out = new ByteArrayOutputStream(256);
				ReplaceObjectOutputStream oos = new ReplaceObjectOutputStream(out);
				oos.writeObject(object);
				ObjectInputStream ois = new ReplaceObjectInputStream(new ByteArrayInputStream(out
						.toByteArray()),oos.getUsedClasses(),oos.getReplacedComponents() );
				return (T)ois.readObject();
			}
			catch (ClassNotFoundException e)
			{
				throw new WicketRuntimeException("Internal error cloning object", e);
			}
			catch (IOException e)
			{
				throw new WicketRuntimeException("Internal error cloning object", e);
			}
		}
	}

