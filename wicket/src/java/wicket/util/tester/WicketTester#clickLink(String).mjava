	/**
	 * Click the <code>Link</code> in the last rendered Page.
	 * <p>
	 * This method also works for {@link AjaxLink} and {@link AjaxSubmitLink}.
	 * <p>
	 * On AjaxLinks the onClick method is invoked with a valid
	 * AjaxRequestTarget. In that way you can test the flow of your application
	 * when using AJAX.
	 * <p>
	 * When clicking an AjaxSubmitLink the form, which the AjaxSubmitLink is
	 * attached to is first submitted, and then the onSubmit method on
	 * AjaxSubmitLink is invoked. If you have changed some values in the form
	 * during your test, these will also be submitted. This should not be used
	 * as a replacement for the {@link FormTester} to test your forms. It should
	 * be used to test that the code in your onSubmit method in AjaxSubmitLink
	 * actually works.
	 * 
	 * @param path
	 *            path to <code>Link</code> component
	 */
	public void clickLink(String path)
	{
		Component linkComponent = getComponentFromLastRenderedPage(path);

		// if the link is an AjaxLink, we process it differently
		// than a normal link
		if (linkComponent instanceof AjaxLink)
		{
			AjaxLink link = (AjaxLink)linkComponent;

			setupRequestAndResponse();
			RequestCycle requestCycle = createRequestCycle();
			AjaxRequestTarget target = new AjaxRequestTarget();
			requestCycle.setRequestTarget(target);

			link.onClick(target);

			// process the request target
			target.respond(requestCycle);
		}
		// if the link is an AjaxSubmitLink, we need to find the form
		// from it using reflection so we know what to submit.
		else if (linkComponent instanceof AjaxSubmitLink)
		{
			AjaxSubmitLink link = (AjaxSubmitLink)linkComponent;

			// We cycle through the attached behaviors and select the
			// LAST matching behavior as the one we handle.
			List behaviors = link.getBehaviors();
			AjaxFormSubmitBehavior ajaxFormSubmitBehavior = null;
			for (Iterator iter = behaviors.iterator(); iter.hasNext();)
			{
				Object behavior = (Object)iter.next();
				
				if (behavior instanceof AjaxFormSubmitBehavior) {
					AjaxFormSubmitBehavior submitBehavior = (AjaxFormSubmitBehavior) behavior;
					ajaxFormSubmitBehavior = submitBehavior;
				}
			}
			
			String failMessage = "No form submit behavior found on the submit link. Strange!!";
			Assert.assertNotNull(failMessage, ajaxFormSubmitBehavior);
			
			// We need to get the form submitted, using reflection.
			// It needs to be "submitted".
			Form form = null;
			try
			{
				Field formField = AjaxFormSubmitBehavior.class.getDeclaredField("form");
				formField.setAccessible(true);
				form = (Form)formField.get(ajaxFormSubmitBehavior);
			}
			catch (Exception e)
			{
				Assert.fail(e.getMessage());
			}
			
			failMessage = "No form attached to the submitlink.";
			Assert.assertNotNull(failMessage, form);
			
			setupRequestAndResponse();
			RequestCycle requestCycle = createRequestCycle();
			
			// "Submit" the form
			form.visitFormComponents(new FormComponent.IVisitor()
			{
				public void formComponent(FormComponent formComponent)
				{
					if (!(formComponent instanceof Button)
							&& !(formComponent instanceof RadioGroup))
					{
						String name = formComponent.getInputName();
						String value = formComponent.getValue();
						
						getServletRequest().setParameter(name, value);
					}
				}
			});
			
			// Ok, finally we "click" the link
			ajaxFormSubmitBehavior.onRequest();

			// process the request target
			requestCycle.getRequestTarget().respond(requestCycle);
		}
		// if the link is a normal link
		else if (linkComponent instanceof Link)
		{
			Link link = (Link)linkComponent;
			newRequestToComponent(link);
		}
		else
		{
			Assert.fail("Link " + path + " is not a Link, AjaxLink or AjaxSubmitLink");
		}
	}

