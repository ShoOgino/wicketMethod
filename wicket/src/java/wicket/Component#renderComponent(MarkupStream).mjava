    /**
     * Renders the component at the current position in the given markup stream.
     * The method handleComponentTag() is called to allow the component to
     * mutate the start tag. The method handleBody() is then called to permit
     * the component to render its body.
     * 
     * @param markupStream
     *            The markup stream
     */
    protected final void renderComponent(final MarkupStream markupStream)
    {
        // Get mutable copy of next tag
        final ComponentTag tag = markupStream.getTag().mutable();

        // Call any tag handler
        handleComponentTag(tag);

        // If we're an openclose tag
        final ComponentTag.Type type = tag.getType();
        if (tag.isOpenClose())
        {
            // Change type to open tag
            tag.setType(ComponentTag.OPEN);
        }
        else
        {
            // Must be an open tag
            if (!tag.isOpen())
            {
                // We were something other than <tag> or <tag/>
                markupStream
                        .throwMarkupException("Method renderComponent called on bad markup element "
                                + tag);
            }
        }

        // Render open tag
        renderTag(tag);
        markupStream.next();

        // Render body using original tag type so implementors
        // of handleBody will know if the tag has a body or not
        tag.setType(type);
        handleBody(markupStream, tag);

        // Render close tag
        renderCloseTag(markupStream, tag);
    }

