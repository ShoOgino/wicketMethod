	/**
	 * Renders the component at the current position in the given markup stream.
	 * The method onComponentTag() is called to allow the component to mutate
	 * the start tag. The method onComponentTagBody() is then called to permit
	 * the component to render its body.
	 * 
	 * @param markupStream
	 *			  The markup stream
	 */
	protected final void renderComponent(final MarkupStream markupStream)
	{
		// Get mutable copy of next tag
		final ComponentTag tag = markupStream.getTag().mutable();

		// Call any tag handler
		onComponentTag(tag);

		// If we're an openclose tag
		final XmlTag.Type type = tag.getType();
		final boolean isImageTag = tag.getName().equalsIgnoreCase("img");
		if (tag.isOpenClose())
		{
			// Change type to open tag
			if (!isImageTag)
			{
				tag.setType(XmlTag.OPEN);
			}
		}
		else
		{
			// Must be an open tag
			if (!tag.isOpen())
			{
				// We were something other than <tag> or <tag/>
				markupStream
						.throwMarkupException("Method renderComponent called on bad markup element "
								+ tag);
			}
		}

		// Render open tag
		renderComponentTag(tag);
		markupStream.next();

		// Render body using original tag type so implementors of
		// onComponentTagBody will know if the tag has a body or not
		tag.setType(type);
		onComponentTagBody(markupStream, tag);

		// Render close tag
		if (!isImageTag)
		{
			renderClosingComponentTag(markupStream, tag);
		}
	}

