	private long internalSizeOf(Object obj, Stack<Object> stack,
			Map<Object, Object> visited) {
		if (skipObject(obj, visited)) {
			return 0;
		}
		visited.put(obj, null);

		long result = 0;
		// get size of object + primitive variables + member pointers
		result += sizeOf(obj);

		// process all array elements
		Class clazz = obj.getClass();
		if (clazz.isArray()) {
			if (clazz.getName().length() != 2) {// skip primitive type array
				int length = Array.getLength(obj);
				for (int i = 0; i < length; i++) {
					stack.add(Array.get(obj, i));
				}
			}
			return result;
		}

		// process all fields of the object
		while (clazz != null) {
			Field[] fields = clazz.getDeclaredFields();
			for (int i = 0; i < fields.length; i++) {
				if (!Modifier.isStatic(fields[i].getModifiers())) {
					if (fields[i].getType().isPrimitive()) {
						continue; // skip primitive fields
					} else {
						fields[i].setAccessible(true);
						try {
							// objects to be estimated are put to stack
							Object objectToAdd = fields[i].get(obj);
							if (objectToAdd != null) {
								stack.add(objectToAdd);
							}
						} catch (IllegalAccessException ex) {
							assert false;
						}
					}
				}
			}
			clazz = clazz.getSuperclass();
		}
		return result;
	}

