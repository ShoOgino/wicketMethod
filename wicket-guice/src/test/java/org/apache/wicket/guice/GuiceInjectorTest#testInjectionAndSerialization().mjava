	public void testInjectionAndSerialization()
	{
		MockWebApplication mockApp = new MockWebApplication(new WebApplication()
		{
			@Override
			protected void outputDevelopmentModeWarning()
			{
				// Do nothing.
			}

			@Override
			public Class<WebPage> getHomePage()
			{
				return null;
			}

			@Override
			protected ISessionStore newSessionStore()
			{
				// Don't use a filestore, or we spawn lots of threads, which
				// makes things slow.
				return new HttpSessionStore(this);
			}
		}, null);

		// Make a new webapp and injector, and register the injector with the
		// webapp as a component instantiation listener.
		Application app = mockApp.getApplication();

		try
		{
			Application.set(app);
			GuiceComponentInjector injector = new GuiceComponentInjector(app, new Module()
			{

				public void configure(Binder binder)
				{
					binder.bind(ITestService.class).to(TestService.class);
					binder.bind(ITestService.class).annotatedWith(Red.class).to(
							TestServiceRed.class);
					binder.bind(ITestService.class).annotatedWith(Blue.class).to(
							TestServiceBlue.class);
					binder.bind(new TypeLiteral<Map<String, String>>()
					{
					}).toProvider(new Provider<Map<String, String>>()
					{
						public Map<String, String> get()
						{
							Map<String, String> strings = new HashMap<String, String>();

							strings.put(ITestService.RESULT, ITestService.RESULT);

							return strings;
						}
					});
				}

			});
			app.addComponentInstantiationListener(injector);

			// Create a new component, which should be automatically injected,
			// and test to make sure the injection has worked.
			TestComponent testComponent = new TestComponent("id");
			doChecksForComponent(testComponent);

			// Serialize and deserialize the object, and check it still works.
			TestComponent clonedComponent = (TestComponent)Objects.cloneObject(testComponent);
			doChecksForComponent(clonedComponent);

		}
		finally
		{
			Application.unset();
		}
	}

