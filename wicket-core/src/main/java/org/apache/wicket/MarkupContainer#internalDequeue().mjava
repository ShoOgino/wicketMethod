	private void internalDequeue()
	{
		class Repeater
		{
			int parentMarkupIndex;
			Iterator<Component> renderIterator;
			ComponentTag tag;

			Repeater(int parentMarkupIndex, Iterator<Component> renderIterator, ComponentTag tag)
			{
				this.parentMarkupIndex = parentMarkupIndex;
				this.renderIterator = renderIterator;
				this.tag = tag;
			}
		}

		Markup markup = getAssociatedMarkup();
		if (markup == null)
		{
			// markup not found, skip dequeuing
			// this sometimes happens when we are in a unit test
			return;
		}
		// use arraydeque?
		ArrayListStack<ComponentTag> tags = new ArrayListStack<ComponentTag>();
		ArrayListStack<MarkupContainer> containers = new ArrayListStack<MarkupContainer>();
		ArrayListStack<Repeater> repeaters = new ArrayListStack<Repeater>();

		containers.push(this);

		for (int i = 0; i < markup.size(); i++)
		{
			MarkupElement element = markup.get(i);

			if (!(element instanceof ComponentTag))
			{
				continue;
			}

			ComponentTag tag = (ComponentTag)element;

			if (tag instanceof WicketTag)
			{
				ComponentTag openTag = tag.getOpenTag() == null ? tag : tag.getOpenTag();
				if (openTag.getAutoComponentFactory() == null)
				{
					// wicket tags that do not produce auto components can be ignored
					continue;
				}
			}

			if (tag.isClose())
			{
				ComponentTag closeTag = tags.pop();
				containers.pop();

				if (containers.peek() instanceof AbstractRepeater)
				{
					Repeater repeater = repeaters.peek();
					if (repeater.renderIterator.hasNext())
					{
						containers.push((MarkupContainer)repeater.renderIterator.next());
						tags.push(repeater.tag);
						i = repeater.parentMarkupIndex;
						continue;
					}
					else
					{
						// we rendered the last item, now time to close the repeater
						repeaters.pop();
						tags.pop();
						containers.pop();
					}
				}
			}
			else
			{
				String id = tag.getId();
				Component child = containers.peek().get(id);

				// see if child is already added to parent
				if (child == null)
				{
					// the container does not yet have a child with this id, see if we can
					// dequeue
					for (int j = containers.size() - 1; j >= 0; j--)
					{
						MarkupContainer container = containers.get(j);
						child = container.getQueue() != null
							? container.getQueue().remove(id)
							: null;
						if (child != null)
						{
							break;
						}
					}

					if (child != null)
					{
						containers.peek().add(child);

						if (child instanceof IQueueRegion)
						{
							((MarkupContainer)child).dequeue();
						}

					}
				}
				if (child == null)
				{
					// could not dequeue, skip until closing tag

					if (tag.isOpen())
					{
						for (i = i + 1; i < markup.size(); i++)
						{
							MarkupElement e = markup.get(i);
							if (e instanceof ComponentTag && ((ComponentTag)e).closes(tag))
							{
								break;
							}
						}
					}

					// if (dequeueSites == null)
					// {
					// dequeueSites = new HashSet<String>();
					// }
					// dequeueSites.add(id);

				}
				else
				{
					if (tag.isOpen())
					{
						if (child instanceof MarkupContainer)
						{
							containers.push((MarkupContainer)child);
							tags.push(tag);

							if (child instanceof AbstractRepeater)
							{
								Repeater repeater = new Repeater(i,
									((AbstractRepeater)child).iterator(), tag);
								if (repeater.renderIterator.hasNext())
								{
									repeaters.push(repeater);
									containers
										.push((MarkupContainer)repeater.renderIterator.next());
									tags.push(tag);
								}
								else
								{
									// empty repeater, skip until closing tag
									for (i = i + 1; i < markup.size(); i++)
									{
										MarkupElement e = markup.get(i);
										if (e instanceof ComponentTag
											&& ((ComponentTag)e).closes(tag))
										{
											break;
										}
									}
									i--;
									continue;
								}
							}
						}
						else
						{
							// web component, skip until closing tag
							for (i = i + 1; i < markup.size(); i++)
							{
								MarkupElement e = markup.get(i);
								if (e instanceof ComponentTag && ((ComponentTag)e).closes(tag))
								{
									break;
								}
							}
						}
					}
					else
					{
						// openclose tag, nothing to do
					}

				}
			}
		}


	}

