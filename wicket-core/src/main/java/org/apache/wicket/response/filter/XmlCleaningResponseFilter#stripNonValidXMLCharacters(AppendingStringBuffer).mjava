	/**
	 * This method ensures that the output String has only
	 * valid XML unicode characters as specified by the
	 * XML 1.0 standard. For reference, please see
	 * <a href="http://www.w3.org/TR/2000/REC-xml-20001006#NT-Char">the
	 * standard</a>. This method will return an empty
	 * String if the input is null or empty.
	 *
	 * @param input The StringBuffer whose non-valid characters we want to remove.
	 * @return The in String, stripped of non-valid characters.
	 */
	public AppendingStringBuffer stripNonValidXMLCharacters(AppendingStringBuffer input)
	{
		if (input == null) {
			return new AppendingStringBuffer();
		}

		char[] chars = input.getValue();
		AppendingStringBuffer out = null;
		boolean isDebugEnabled = LOG.isDebugEnabled();

		int codePoint;

		int i = 0;

		while (i < input.length())
		{
			codePoint = Character.codePointAt(chars, i, chars.length);

			if (!isValidXmlChar(codePoint))
			{
				if (out == null)
				{
					out = new AppendingStringBuffer(chars.length);
					out.append(input.subSequence(0, i));

					if (isDebugEnabled)
					{
						LOG.debug("An invalid character '{}' found at position '{}' in '{}'",
								String.format("0x%X", codePoint), i, new String(chars));
					}
				}
				else if (isDebugEnabled)
				{
					LOG.debug(String.format("Dropping character for codePoint '0x%X' at position '%d'",
							codePoint, i));
				}
			}
			else if (out != null)
			{
				out.append(Character.toChars(codePoint));
			}

			// Increment with the number of code units(java chars) needed to represent a Unicode char.
			i += Character.charCount(codePoint);
		}

		return out != null ? out : input;
	}

