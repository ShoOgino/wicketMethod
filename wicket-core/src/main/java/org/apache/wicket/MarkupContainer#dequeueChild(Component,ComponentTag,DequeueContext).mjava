	/**
	 * Propagates dequeuing to child component.
	 * 
	 * @param child
	 *             the child component
	 * @param tag
	 *             the child tag
	 * @param dequeue
	 *             the dequeue context to use
	 */
	private void dequeueChild(Component child, ComponentTag tag, DequeueContext dequeue)
	{
		ChildToDequeueType childType = ChildToDequeueType.fromChild(child);
		
		if (childType == ChildToDequeueType.QUEUE_REGION ||
			childType == ChildToDequeueType.BORDER)
		{
			((IQueueRegion)child).dequeue();			
		}
		
		if (childType == ChildToDequeueType.BORDER) 
		{
			Border childContainer = (Border)child;
			// propagate dequeuing to border's body
            MarkupContainer body = childContainer.getBodyContainer();
			
			dequeueChildrenContainer(dequeue, body);
		}
		
		if (childType == ChildToDequeueType.MARKUP_CONTAINER)
		{
			// propagate dequeuing to containers
			MarkupContainer childContainer = (MarkupContainer)child;
			
			dequeueChildrenContainer(dequeue, childContainer);			
		}
		
		if (childType == ChildToDequeueType.NULL || 
			childType == ChildToDequeueType.QUEUE_REGION)
		{
			dequeue.skipToCloseTag();
		}

		// pull the close tag off
		ComponentTag close = dequeue.takeTag();
		do
		{
			if (close != null && close.closes(tag))
			{
				return;
			}
		} while ((close = dequeue.takeTag()) != null);

		throw new IllegalStateException(String.format("Could not find the closing tag for '%s'", tag));
	}

