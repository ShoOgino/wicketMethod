	/**
	 * Builds a CSP configuration with the following directives: {@code default-src 'none';}
	 * {@code script-src 'self' 'unsafe-inline' 'unsafe-eval';}
	 * {@code style-src 'self' 'unsafe-inline';} {@code img-src 'self';} {@code connect-src 'self';}
	 * {@code font-src 'self';} {@code manifest-src 'self';} {@code child-src 'self';}
	 * {@code frame-src 'self'}. This will allow resources to be loaded from {@code 'self'} (the
	 * current host). In addition, unsafe inline Javascript, {@code eval()} and inline CSS is
	 * allowed.
	 *
	 * It is recommended to not allow {@code unsafe-inline} or {@code unsafe-eval}, because those
	 * can be used to trigger XSS attacks in your application (often in combination with another
	 * bug). Because older application often rely on inline scripting and styling, this CSP can be
	 * used as a stepping stone for older Wicket applications, before switching to {@link #strict}.
	 * Using a CSP with unsafe directives is still more secure than using no CSP at all.
	 *
	 * @return {@code this} for chaining.
	 */
	public CSPHeaderConfiguration unsafeInline()
	{
		return clear().add(DEFAULT_SRC, NONE)
			.add(SCRIPT_SRC, SELF, UNSAFE_INLINE, UNSAFE_EVAL)
			.add(STYLE_SRC, SELF, UNSAFE_INLINE)
			.add(IMG_SRC, SELF)
			.add(CONNECT_SRC, SELF)
			.add(FONT_SRC, SELF)
			.add(MANIFEST_SRC, SELF)
			.add(CHILD_SRC, SELF)
			.add(BASE_URI, SELF);
	}

