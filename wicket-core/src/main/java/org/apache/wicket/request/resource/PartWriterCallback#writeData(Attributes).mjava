	/**
	 * Writes the data
	 *
	 * @param attributes
	 *            the attributes to get the output stream of the response
	 * @throws IOException
	 *             if something went wrong while writing the data to the output stream
	 */
	@Override
	public void writeData(Attributes attributes) throws IOException
	{
		try
		{
			OutputStream outputStream = attributes.getResponse().getOutputStream();
			byte[] buffer = new byte[getBufferSize()];

			if (startbyte != null || endbyte != null)
			{
				// skipping the first bytes which are
				// requested to be skipped by the client
				if (startbyte != null)
				{
					inputStream.skip(startbyte);
				}

				// If there are no end bytes given read the whole stream till the end
				if (endbyte == null || Long.valueOf(-1).equals(endbyte))
				{
					endbyte = contentLength;
				}

				// The read bytes in the current buffer
				int readBytes;

				// The total bytes read
				long totalBytes = 0;

				while ((readBytes = inputStream.read(buffer)) != -1)
				{
					totalBytes += readBytes;

					// Check if the end byte is reached
					if (endbyte - totalBytes < 0)
					{
						// calculate the bytes left to be read in the current buffer
						// can be casted to int, because the the previous chunks are
						// subtracted - so it can't exceed buffer size
						int leftBytesToBeRead = (int)(totalBytes - startbyte) -
							(int)(totalBytes - endbyte);
						outputStream.write(buffer, 0, leftBytesToBeRead);
						break;
					}
					else
					{
						// If the end byte is not reached read the full buffer
						outputStream.write(buffer, 0, readBytes);
					}
				}
			}
			else
			{
				Streams.copy(inputStream, outputStream, getBufferSize());
			}
		}
		catch (ResponseIOException e)
		{
			// the client has closed the connection and
			// doesn't read the stream further on
			// (in tomcats
			// org.apache.catalina.connector.ClientAbortException)
			// we ignore this case
		}
	}

