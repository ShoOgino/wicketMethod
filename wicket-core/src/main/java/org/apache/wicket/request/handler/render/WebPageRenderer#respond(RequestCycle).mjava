	/*
	 * TODO: simplify the code below. See WICKET-3347
	 */
	@Override
	public void respond(RequestCycle requestCycle)
	{
		Url currentUrl = requestCycle.getUrlRenderer().getBaseUrl();
		Url targetUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler());

		//
		// the code below is little hairy but we have to handle 3 redirect policies,
		// 3 rendering strategies and two kind of requests (ajax and normal)
		//

		// try to get an already rendered buffered response for current URL
		BufferedWebResponse bufferedResponse = getAndRemoveBufferedResponse(currentUrl);

		boolean isAjax = isAjax(requestCycle);

		boolean shouldPreserveClientUrl = ((WebRequest)requestCycle.getRequest()).shouldPreserveClientUrl();

		if (bufferedResponse != null)
		{
			logger.warn("The Buffered response should be handled by BufferedResponseRequestHandler");
			// if there is saved response for this URL render it
			bufferedResponse.writeTo((WebResponse)requestCycle.getResponse());
		}
		else {
			RedirectPolicy redirectPolicy = getRedirectPolicy();

			boolean onePassRender = isOnePassRender();
			boolean isRedirectToRender = isRedirectToRender();

			boolean targetEqualsCurrentUrl = targetUrl.equals(currentUrl);
			boolean isNewPageInstance = getPageProvider().isNewPageInstance();
			boolean isPageStateless = getPage().isPageStateless();

			if (shouldRenderPageAndWriteResponse(isAjax, onePassRender, isRedirectToRender, redirectPolicy, shouldPreserveClientUrl, targetEqualsCurrentUrl, isNewPageInstance, isPageStateless)) //
			{
				BufferedWebResponse response = renderPage(currentUrl, requestCycle);
				if (response != null)
				{
					response.writeTo((WebResponse)requestCycle.getResponse());
				}
			}
			else if (shouldRedirectToTargetUrl(isAjax, redirectPolicy, isRedirectToRender, targetEqualsCurrentUrl, isNewPageInstance, isPageStateless))
			{
				redirectTo(targetUrl, requestCycle);
			}
			else
			{
				if (isRedirectToBuffer() == false && logger.isDebugEnabled())
				{
					String details = String.format("redirect strategy: '%s', isAjax: '%s', redirect policy: '%s', " +
							"current url: '%s', target url: '%s', is new: '%s', is stateless: '%s', is temporary: '%s'",
							Application.get().getRequestCycleSettings().getRenderStrategy(),
							isAjax, redirectPolicy, currentUrl, targetUrl, isNewPageInstance,
									isPageStateless, isSessionTemporary());
					logger.debug("Falling back to Redirect_To_Buffer render strategy because none of the conditions " +
							"matched. Details: " + details);
				}

				// redirect to buffer
				BufferedWebResponse response = renderPage(targetUrl, requestCycle);

				if (response == null)
				{
					return;
				}

				// check if the url hasn't changed after page has been rendered
				// (i.e. the stateless flag might have changed which could result in different page url)
				Url targetUrl2 = requestCycle.mapUrlFor(getRenderPageRequestHandler());

				if (targetUrl.getSegments().equals(targetUrl2.getSegments()) == false)
				{
					// the amount of segments is different - generated relative URLs will not work, we
					// need to rerender the page. This shouldn't happen, but in theory it can - with
					// RequestHandlerEncoders that produce different URLs with different amount of
					// segments for stateless and stateful pages
					response = renderPage(targetUrl2, requestCycle);
				}

				if (currentUrl.equals(targetUrl2))
				{
					// no need to redirect when both urls are exactly the same
					response.writeTo((WebResponse)requestCycle.getResponse());
				}
				// if page is still stateless after render
				else if (isPageStateless && !enableRedirectForStatelessPage())
				{
					// we don't want the redirect to happen for stateless page
					// example:
					// when a normal mounted stateful page is hit at /mount/point
					// wicket renders the page to buffer and redirects to /mount/point?12
					// but for stateless page the redirect is not necessary
					// also for listener interface on stateful page we want to redirect
					// after the listener is invoked, but on stateless page the user
					// must ask for redirect explicitly
					response.writeTo((WebResponse)requestCycle.getResponse());
				}
				else
				{
					storeBufferedResponse(targetUrl2, response);

					redirectTo(targetUrl2, requestCycle);
				}
			}
		}
	}

