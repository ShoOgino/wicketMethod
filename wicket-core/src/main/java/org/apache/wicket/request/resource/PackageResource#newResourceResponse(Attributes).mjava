	/**
	 * creates a new resource response based on the request attributes
	 * 
	 * @param attributes
	 *            current request attributes from client
	 * @return resource response for answering request
	 */
	@Override
	protected ResourceResponse newResourceResponse(Attributes attributes)
	{
		final ResourceResponse resourceResponse = new ResourceResponse();

		final IResourceStream resourceStream = getResourceStream();

		// bail out if resource stream could not be found
		if (resourceStream == null)
		{
			return sendResourceError(resourceResponse, HttpServletResponse.SC_NOT_FOUND,
				"Unable to find resource");
		}

		// add Last-Modified header (to support HEAD requests and If-Modified-Since)
		final Time lastModified = resourceStream.lastModifiedTime();

		resourceResponse.setLastModified(lastModified);

		if (resourceResponse.dataNeedsToBeWritten(attributes))
		{
			String contentType = resourceStream.getContentType();

			if (contentType == null && Application.exists())
			{
				contentType = Application.get().getMimeType(path);
			}

			// set Content-Type (may be null)
			resourceResponse.setContentType(contentType);

			// set content encoding (may be null)
			resourceResponse.setTextEncoding(getTextEncoding());

			// supports accept range
			resourceResponse.setAcceptRange(ContentRangeType.BYTES);

			try
			{
				// read resource data to get the content length
				InputStream inputStream = resourceStream.getInputStream();

				byte[] bytes = null;
				// send Content-Length header
				if (readBuffered)
				{
					bytes = IOUtils.toByteArray(inputStream);
					resourceResponse.setContentLength(bytes.length);
				}
				else
				{
					resourceResponse.setContentLength(resourceStream.length().bytes());
				}

				// get content range information
				RequestCycle cycle = RequestCycle.get();
				Long startbyte = cycle.getMetaData(CONTENT_RANGE_STARTBYTE);
				Long endbyte = cycle.getMetaData(CONTENT_RANGE_ENDBYTE);

				// send response body with resource data
				PartWriterCallback partWriterCallback = new PartWriterCallback(bytes != null
					? new ByteArrayInputStream(bytes) : inputStream,
					resourceResponse.getContentLength(), startbyte, endbyte);

				// If read buffered is set to false ensure the part writer callback is going to
				// close the input stream
				resourceResponse.setWriteCallback(partWriterCallback.setClose(!readBuffered));
			}
			catch (IOException e)
			{
				log.debug(e.getMessage(), e);
				return sendResourceError(resourceResponse, 500, "Unable to read resource stream");
			}
			catch (ResourceStreamNotFoundException e)
			{
				log.debug(e.getMessage(), e);
				return sendResourceError(resourceResponse, 500, "Unable to open resource stream");
			}
			finally
			{
				try
				{
					if (readBuffered)
					{
						IOUtils.close(resourceStream);
					}
				}
				catch (IOException e)
				{
					log.warn("Unable to close the resource stream", e);
				}
			}
		}

		return resourceResponse;
	}

