	public Url mapHandler(IRequestHandler requestHandler)
	{
		if (requestHandler instanceof ResourceReferenceRequestHandler)
		{
			ResourceReferenceRequestHandler referenceRequestHandler = (ResourceReferenceRequestHandler)requestHandler;
			ResourceReference reference = referenceRequestHandler.getResourceReference();

			Url url;

			if (reference instanceof MetaInfStaticResourceReference)
			{
				url = ((MetaInfStaticResourceReference)reference).mapHandler(referenceRequestHandler);
				// if running on Servlet 3.0 engine url is not null
				if (url != null)
				{
					return url;
				}
				// otherwise it has to be served by the standard wicket way
			}

			url = new Url();

			List<String> segments = url.getSegments();
			segments.add(getContext().getNamespace());
			segments.add(getContext().getResourceIdentifier());
			segments.add(getClassName(reference.getScope()));

			StringTokenizer tokens = new StringTokenizer(reference.getName(), "/");

			while (tokens.hasMoreTokens())
			{
				String token = tokens.nextToken();

				// on the last component of the resource path add the timestamp
				if (isTimestampsEnabled() && tokens.hasMoreTokens() == false)
				{
					// get last modification of resource (cached during the current request cycle)
					Time lastModified = getLastModifiedTimestampUsingCache(reference);

					// if resource provides a timestamp we include it in resource name
					if (lastModified != null)
					{
						// check if resource name has extension
						int extensionAt = token.lastIndexOf('.');

						// create timestamped version of filename:
						//
						// filename :=
						// [basename][timestamp-prefix][last-modified-milliseconds](.extension)
						//
						StringBuilder filename = new StringBuilder();
						filename.append(extensionAt == -1 ? token : token.substring(0, extensionAt));
						filename.append(TIMESTAMP_PREFIX);
						filename.append(lastModified.getMilliseconds());

						if (extensionAt != -1)
							filename.append(token.substring(extensionAt));

						token = filename.toString();
					}
				}
				segments.add(token);
			}

			encodeResourceReferenceAttributes(url, reference);
			PageParameters parameters = referenceRequestHandler.getPageParameters();
			if (parameters != null)
			{
				parameters = new PageParameters(parameters);
				// need to remove indexed parameters otherwise the URL won't be able to decode
				parameters.clearIndexed();
				url = encodePageParameters(url, parameters, pageParametersEncoder);
			}

			return url;
		}
		return null;
	}

