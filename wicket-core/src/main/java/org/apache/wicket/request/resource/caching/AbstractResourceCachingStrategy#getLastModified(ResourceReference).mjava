	/**
	 * That method gets the last modification timestamp for the specified resource reference.
	 * <p>
	 * The timestamp is cached in the meta data of the application to eliminate repeated lookups of
	 * the same resource reference which will harm performance.<br/>
	 * In Development mode the cache is preserved in the current {@link RequestCycle}'s meta data so
	 * the benefit is only if the same resource is used more than once in the same page. But after
	 * eventual modification of the resource the new modification time will be used for the next
	 * requests.
	 * 
	 * @param resourceReference
	 *            resource reference
	 * 
	 * @return last modification timestamp or <code>null</code> if no timestamp provided
	 */
	protected Time getLastModified(ResourceReference resourceReference)
	{
		Application application = ThreadContext.getApplication();
		if (application == null)
		{
			// no application: test case without WicketTester
			return resourceReference.getLastModified();
		}

		Map<ResourceReference, Time> cache;
		if (application.usesDevelopmentConfig())
		{
			// try to lookup current request cycle
			RequestCycle requestCycle = ThreadContext.getRequestCycle();

			// retrieve cache from current request cycle
			cache = requestCycle.getMetaData(TIMESTAMP_KEY);

			// create it on first call
			if (cache == null)
			{
				cache = Generics.newHashMap();
				requestCycle.setMetaData(TIMESTAMP_KEY, cache);
			}
		}
		else
		{
			// in deployment mode put the cache in the application's meta data
			cache = application.getMetaData(TIMESTAMP_KEY);

			// create it on first call
			if (cache == null)
			{
				// use Collections.synchronizedMap() because j.u.CHM doesn't support null values
				cache = Collections.<ResourceReference, Time> synchronizedMap(new HashMap<ResourceReference, Time>());
				application.setMetaData(TIMESTAMP_KEY, cache);
			}
		}

		// lookup timestamp from cache (may contain NULL values which are valid)
		if (cache.containsKey(resourceReference))
		{
			return cache.get(resourceReference);
		}

		// no cache entry, so retrieve timestamp from resource reference
		Time lastModified = resourceReference.getLastModified();

		// and put it in cache
		cache.put(resourceReference, lastModified);

		return lastModified;
	}

