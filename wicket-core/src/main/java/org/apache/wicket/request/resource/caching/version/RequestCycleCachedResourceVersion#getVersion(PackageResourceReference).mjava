	public String getVersion(PackageResourceReference resourceReference)
	{
		// get current request cycle
		final RequestCycle requestCycle = ThreadContext.getRequestCycle();

		// get current stream information for package resource
		final PackageResourceReference.StreamInfo streamInfo = resourceReference.getCurrentStreamInfo();
		
		// if no stream info is available we can not provide a version
		if(streamInfo == null)
		{
			return null;
		}
		
		// cache instance
		Map<CacheResourceVersionKey, String> cache = null;

		// cache key
		CacheResourceVersionKey key = null;

		// is request cycle available?
		if (requestCycle != null)
		{
			// retrieve cache from current request cycle
			cache = requestCycle.getMetaData(CACHE_KEY);

			// does cache exist within current request cycle?
			if (cache == null)
			{
				// no, so create it
				requestCycle.setMetaData(CACHE_KEY, cache = Generics.newHashMap());
			}
			else if (cache.containsKey(key))
			{
				// lookup timestamp from cache (may contain NULL values which are valid)
				return cache.get(key);
			}
			// create caching key
			key = new CacheResourceVersionKey(resourceReference, streamInfo);
		}
		
		// no cache entry found, query version from delegate
		final String version = delegate.getVersion(resourceReference);

		// store value in cache (if it is available)
		if (cache != null && key != null)
		{
			cache.put(key, version);
		}
		
		return version;
	}

