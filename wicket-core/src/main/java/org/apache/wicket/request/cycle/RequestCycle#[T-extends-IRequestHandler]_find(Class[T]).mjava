	/**
	 * Finds a IRequestHandler which is either the currently executing handler or is scheduled to be
	 * executed.
	 * 
	 * @return the found IRequestHandler or {@code null}
	 */
	@SuppressWarnings("unchecked")
	public <T extends IRequestHandler> T find(final Class<T> type)
	{
		if (type == null)
		{
			return null;
		}

		IRequestHandler result = getActiveRequestHandler();

		if (result == null || type.isAssignableFrom(result.getClass()) == false)
		{
			result = getRequestHandlerScheduledAfterCurrent();
			if (result == null || type.isAssignableFrom(result.getClass()) == false)
			{
				result = null;
			}
		}

		return (T)result;
	}

