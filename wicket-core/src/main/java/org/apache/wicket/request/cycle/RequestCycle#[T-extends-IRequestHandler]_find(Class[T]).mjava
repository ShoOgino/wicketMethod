	/**
	 * Finds a IRequestHandler which is either the currently executing handler or is scheduled to be
	 * executed.
	 * 
	 * @return the found IRequestHandler or {@link Optional#empty()}
	 */
	@SuppressWarnings("unchecked")
	public <T extends IRequestHandler> Optional<T> find(final Class<T> type)
	{
		if (type == null)
		{
			return Optional.empty();
		}

		IRequestHandler result = getActiveRequestHandler();
		if (type.isInstance(result))
		{
			return (Optional<T>)Optional.of(result);
		}
		
		result = getRequestHandlerScheduledAfterCurrent();
		if (type.isInstance(result))
		{
			return (Optional<T>)Optional.of(result);
		}

		return Optional.empty();
	}

