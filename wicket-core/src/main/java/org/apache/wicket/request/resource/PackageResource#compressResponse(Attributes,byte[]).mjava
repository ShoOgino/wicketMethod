	/**
	 * Compresses the response if its is eligible and there is a configured compressor
	 *
	 * @param attributes
	 * 	 *            current request attributes from client
	 * 	 * @param original
	 * 	 *            the original response
	 * 	 * @return the compressed response
	 */
	protected byte[] compressResponse(final Attributes attributes, final byte[] original)
	{
		ITextResourceCompressor compressor = getCompressor();

		if (compressor != null && getCompress())
		{
			try
			{
				Charset charset = getProcessingEncoding();
				String nonCompressed = new String(original, charset);
				String output;
				if (compressor instanceof IScopeAwareTextResourceProcessor)
				{
					IScopeAwareTextResourceProcessor scopeAwareProcessor = (IScopeAwareTextResourceProcessor)compressor;
					output = scopeAwareProcessor.process(nonCompressed, getScope(), name);
				}
				else
				{
					output = compressor.compress(nonCompressed);
				}
				final String textEncoding = getTextEncoding();
				final Charset outputCharset;
				if (Strings.isEmpty(textEncoding))
				{
					outputCharset = charset;
				}
				else
				{
					outputCharset = Charset.forName(textEncoding);
				}
				return output.getBytes(outputCharset);
			}
			catch (Exception e)
			{
				log.error("Error while compressing the content", e);
				return original;
			}
		}
		else
		{
			// don't strip the comments
			return original;
		}
	}

