	/**
	 * Get a resource reference matching the parameters from the registry or if not found and
	 * requested, create an default resource reference and add it to the registry.
	 * <p>
	 * Part of the search is scanning the class (scope) and it's superclass for static
	 * ResourceReference fields. Found fields get registered automatically (but are different from
	 * auto-generated ResourceReferences).
	 * 
	 * @see #createDefaultResourceReference(Class, String, Locale, String, String)
	 * @see ClassScanner
	 * 
	 * @param scope
	 *            The scope of resource reference (e.g. the Component's class)
	 * @param name
	 *            The name of resource reference (e.g. filename)
	 * @param locale
	 *            see Component
	 * @param style
	 *            see Component
	 * @param variation
	 *            see Component
	 * @param strict
	 *            If true, "weaker" combination of scope, name, locale etc. are not tested
	 * @param createIfNotFound
	 *            If true a default resource reference is created if no entry can be found in the
	 *            registry. The newly created resource reference will be added to the registry.
	 * @return Either the resource reference found in the registry or, if requested, a resource
	 *         reference automatically created based on the parameters provided. The automatically
	 *         created resource reference will automatically be added to the registry.
	 */
	public final ResourceReference getResourceReference(final Class<?> scope, final String name,
		final Locale locale, final String style, final String variation, final boolean strict,
		final boolean createIfNotFound)
	{
		return getResourceReference(new Key(scope.getName(), name, locale, style, variation),
			strict, createIfNotFound);
	}

