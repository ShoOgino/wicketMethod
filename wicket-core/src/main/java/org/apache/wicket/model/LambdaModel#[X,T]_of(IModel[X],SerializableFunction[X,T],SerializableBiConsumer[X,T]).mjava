	/**
	 * Create a {@link LambdaModel} for a given target. Usage:
	 * 
	 * <pre>
	 * {@code
	 * 	LambdaModel.of(personModel, Person::getName, Person::setName)
	 * }
	 * </pre>
	 * 
	 * The target model will be detached automatically.
	 *
	 * @param target
	 *            target for getter and setter
	 * @param getter
	 *            used to get a value
	 * @param setter
	 *            used to set a value
	 *
	 * @param <X>
	 *            target model object type
	 * @param <T>
	 *            model object type
	 * 
	 * @return model
	 */
	public static <X, T> IModel<T> of(IModel<X> target, SerializableFunction<X, T> getter,
		SerializableBiConsumer<X, T> setter)
	{
		Args.notNull(target, "target");
		Args.notNull(getter, "getter");
		Args.notNull(setter, "setter");

		return new LambdaModel<T>(() -> {
			X x = target.getObject();
			if (x == null)
			{
				return null;
			}
			return getter.apply(x);
		},

			(t) -> {
				X x = target.getObject();
				if (x != null)
				{
					setter.accept(x, t);
				}
			})
		{
			private static final long serialVersionUID = 1L;

			@Override
			public void detach()
			{
				target.detach();
			}
		};
	}

