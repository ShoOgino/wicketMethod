	/**
	 * Returns a IModel applying the given IModel-bearing mapper to the contained object, if it is not {@code null}.
	 *
	 * @param <R>
	 *            the new type of the contained object
	 * @param mapper
	 *            a mapper, to be applied to the contained object
	 * @return a new IModel
	 * @see LambdaModel#of(IModel, SerializableFunction, SerializableBiConsumer)
	 */
	default <R> IModel<R> flatMap(SerializableFunction<? super T, IModel<R>> mapper)
	{
		Args.notNull(mapper, "mapper");
		return new IModel<R>()
		{
			private static final long serialVersionUID = 1L;

			@Override
			public R getObject()
			{
				T object = IModel.this.getObject();
				if (object != null)
				{
					IModel<R> model = mapper.apply(object);
					if (model != null) 
					{
						return model.getObject();
					}
					else 
					{
						return null;
					}
				}
				else
				{
					return null;
				}
			}

			@Override
			public void setObject(R object)
			{
				T modelObject = IModel.this.getObject();
				if (modelObject != null)
				{
					IModel<R> model = mapper.apply(modelObject);
					if (model != null)
					{
						model.setObject(object);
					}
				}
			}

			@Override
			public void detach()
			{
				T object = IModel.this.getObject();
				IModel.this.detach();
				if (object != null)
				{
					IModel<R> model = mapper.apply(object);
					if (model != null)
					{
						model.detach();
					}
				}
			}
		};
	}

