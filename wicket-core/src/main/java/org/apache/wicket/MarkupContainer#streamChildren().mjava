	/**
	 * Returns a sequential {@code Stream} with the all children of this markup container as its
	 * source. This stream does traverse the component tree.
	 * 
	 * @return a sequential {@code Stream} over the all children of this markup container
	 * @since 8.0
	 */
	@SuppressWarnings("unchecked")
	public Stream<Component> streamChildren()
	{
		class ChildrenIterator<C> implements Iterator<C>
		{
			private Iterator<C> currentIterator;

			private Deque<Iterator<C>> iteratorStack = new ArrayDeque<>();

			private ChildrenIterator(Iterator<C> iterator)
			{
				currentIterator = iterator;
			}

			@Override
			public boolean hasNext()
			{
				while (!currentIterator.hasNext() && !iteratorStack.isEmpty())
				{
					currentIterator = iteratorStack.pop();
				}
				return currentIterator.hasNext();
			}

			@Override
			public C next()
			{
				C child = currentIterator.next();
				if (child instanceof Iterable)
				{
					iteratorStack.push(currentIterator);
					currentIterator = ((Iterable<C>)child).iterator();
				}
				return child;
			}
		}
		return StreamSupport.stream(
			Spliterators.spliteratorUnknownSize(new ChildrenIterator<>(iterator()), 0), false);
	}

