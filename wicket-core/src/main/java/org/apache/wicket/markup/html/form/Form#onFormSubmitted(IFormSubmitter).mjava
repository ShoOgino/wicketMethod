	/**
	 * THIS METHOD IS NOT PART OF THE WICKET API. DO NOT ATTEMPT TO OVERRIDE OR CALL IT.
	 * 
	 * Handles form submissions.
	 * 
	 * @param submitter
	 *            listener that will receive form processing events, if {@code null} the form will
	 *            attempt to locate one
	 * 
	 * @see Form#validate()
	 */
	public final void onFormSubmitted(final IFormSubmitter submitter)
	{
		final IFormSubmitter actualSubmitter =  submitter != null ? submitter :
			findActualSubmitter();
		//find the actual form to process
		final Form<?> formToProcess = findFormToProcess(actualSubmitter);
		
		formToProcess.markFormsSubmitted();
		
		if (handleMultiPart())
		{
			// Tells FormComponents that a new user input has come
			inputChanged();

			String url = getRequest().getRequestParameters()
				.getParameterValue(getHiddenFieldId())
				.toString();
			if (!Strings.isEmpty(url))
			{
				dispatchEvent(getPage(), url);
			}
			else
			{
				// When processing was triggered by a Wicket IFormSubmittingComponent and that
				// component indicates it wants to be called immediately
				// (without processing), call the IFormSubmittingComponent.onSubmit* methods right
				// away.
				if (actualSubmitter != null && !actualSubmitter.getDefaultFormProcessing())
				{
					actualSubmitter.onSubmit();
					actualSubmitter.onAfterSubmit();
				}
				else
				{
					// process the form for this request
					formToProcess.process(actualSubmitter);
				}
			}
		}
		// If multi part did fail check if an error is registered and call
		// onError
		else if (hasError())
		{
			callOnError(actualSubmitter);
		}

		// update auto labels if we are inside an ajax request
		getRequestCycle().find(AjaxRequestTarget.class).ifPresent(target -> {
			visitChildren(FormComponent.class, new IVisitor<FormComponent<?>, Void>()
			{
				@Override
				public void component(FormComponent<?> component, IVisit<Void> visit)
				{
					component.updateAutoLabels(target);
				}
			});
		});
	}

