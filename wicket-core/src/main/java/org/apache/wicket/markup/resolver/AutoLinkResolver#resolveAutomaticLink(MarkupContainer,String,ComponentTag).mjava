	/**
	 * Resolves the given tag's page class and page parameters by parsing the tag component name and
	 * then searching for a page class at the absolute or relative URL specified by the href
	 * attribute of the tag.
	 * <p>
	 * None html references are treated similar.
	 * 
	 * @param container
	 *            The container where the link is
	 * @param id
	 *            the name of the component
	 * @param tag
	 *            the component tag
	 * @return A BookmarkablePageLink<?> to handle the href
	 */
	private final Component resolveAutomaticLink(final MarkupContainer container, final String id,
		final ComponentTag tag)
	{
		final Page page = container.getPage();

		// Make the id (page-)unique
		final String autoId = id + Integer.toString(page.getAutoIndex());

		// get the tag name, which is something like 'a' or 'script'
		final String tagName = tag.getName();

		// By setting the component name, the tag becomes a Wicket component
		// tag, which must have a associated Component.
		if (tag.getId() == null)
		{
			tag.setAutoComponentTag(true);
		}
		tag.setId(autoId);

		// get the reference resolver
		ITagReferenceResolver referenceResolver = tagNameToTagReferenceResolvers.get(tagName);
		if (referenceResolver == null)
		{
			// fallback on default
			referenceResolver = DEFAULT_ATTRIBUTE_RESOLVER;
		}

		// get the reference, which is typically the value of e.g. a href or src
		// attribute
		String reference = referenceResolver.getReference(tag);

		// create the path info object
		PathInfo pathInfo = new PathInfo(reference);
		// now get the resolver delegate
		IAutolinkResolverDelegate autolinkResolverDelegate = tagNameToAutolinkResolverDelegates.get(tagName);
		Component autoComponent = null;
		if (autolinkResolverDelegate != null)
		{
			autoComponent = autolinkResolverDelegate.newAutoComponent(container, autoId, pathInfo);
		}

		if (autoComponent == null)
		{
			// resolving didn't have the desired result or there was no delegate
			// found; fallback on the default resolving which is a simple
			// component that leaves the tag unchanged
			autoComponent = new AutolinkExternalLink(autoId, pathInfo.reference);
		}

		return autoComponent;
	}

