	/**
	 * Update the model of a {@link FormComponent} containing a {@link Collection}.
	 * 
	 * If the model object does not yet exists, a new {@link ArrayList} is filled with the converted
	 * input and used as the new model object. Otherwise the existing collection is modified
	 * in-place, then {@link Model#setObject(Object)} is called with the same instance: it allows
	 * the Model to be notified of changes even when {@link Model#getObject()} returns a different
	 * {@link Collection} at every invocation.
	 * 
	 * @param <S>
	 *            collection type
	 * @param formComponent
	 *            the form component to update
	 * @see FormComponent#updateModel()
	 * @throws UnsupportedOperationException
	 *             if the existing model object Collection cannot be modified
	 */
	protected static <S> void updateCollectionModel(FormComponent<Collection<S>> formComponent)
	{
		Collection<S> convertedInput = formComponent.getConvertedInput();

		Collection<S> collection = formComponent.getModelObject();
		if (collection == null)
		{
			collection = new ArrayList<S>(convertedInput);
			formComponent.setDefaultModelObject(collection);
		}
		else
		{
			formComponent.modelChanging();
			collection.clear();
			if (convertedInput != null)
			{
				collection.addAll(convertedInput);
			}
			formComponent.modelChanged();

			try
			{
				formComponent.getModel().setObject(collection);
			}
			catch (Exception e)
			{
				// ignore this exception because it could be that there
				// is not setter for this collection.
				logger.info("no setter for the property attached to " + formComponent);
			}
		}
	}

