		/**
		 * Finds start and end index of text in the label. This range is represented by the body of
		 * the {@code <span class='text'></span>} tag
		 * 
		 * @param markup
		 * @return start und end index of text in the label
		 */
		protected int[] findLabelTextRange(AppendingStringBuffer markup)
		{
			int[] range = new int[] { -1, -1 };

			XmlPullParser parser = new XmlPullParser();
			XmlTag opening = null; // opening label text span tag
			XmlTag closing = null; // close label text span tag

			try
			{
				parser.parse(markup);

				XmlTag tag = null; // current tag

				int depth = 0; // depth of span tags
				int openDepth = -1; // depth of the label text open span tag

				while (((tag = parser.nextTag()) != null))
				{
					if (!"span".equalsIgnoreCase(tag.getName()) || tag.getNamespace() != null)
					{
						// skip non-span tags
						continue;
					}

					if (opening != null && tag.isClose() && depth == openDepth)
					{
						// found the closing tag we need, we are done
						closing = tag;
						break;
					}

					depth += tag.isOpen() ? 1 : -1;

					if (opening == null && isTextSpan(tag))
					{
						// found the opening tag, keep looking for the closing one
						opening = tag;
						openDepth = depth;
						continue;
					}
				}
			}
			catch (Exception e)
			{
				throw new WicketRuntimeException(
					"Could not parse markup while processing an auto label for component: " +
						component.toString(false), e);
			}

			if (opening != null)
			{
				// calculate the range of the tag's body, this is where the label text is/will be
				range[0] = opening.getPos() + opening.getLength();
				range[1] = closing.getPos();
			}

			return range;
		}

