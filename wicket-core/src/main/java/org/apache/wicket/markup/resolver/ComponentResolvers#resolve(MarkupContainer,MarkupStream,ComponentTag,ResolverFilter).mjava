	/**
	 * Attempts to resolve a component using resolvers. Tries resolvers in the component hierarchy
	 * as well as application-wide.
	 * <p>
	 * This method encapsulates the contract of resolving components and should be used any time a
	 * component needs to be resolved under normal circumstances.
	 * </p>
	 * 
	 * @param container
	 *            The container parsing its markup
	 * @param markupStream
	 *            The current markupStream
	 * @param tag
	 *            The current component tag while parsing the markup
	 * @param filter
	 *            A filter for application-wide resolvers
	 * @return component or {@code null} if not found
	 */
	public static Component resolve(final MarkupContainer container,
		final MarkupStream markupStream, final ComponentTag tag, final ResolverFilter filter)
	{
		// try to resolve using component hierarchy
		Component component = resolveByComponentHierarchy(container, markupStream, tag);

		if (component == null)
		{
			// fallback to application-level resolvers
			component = resolveByApplication(container, markupStream, tag, filter);
		}

		return component;
	}

