	@Override
	public Component resolve(final MarkupContainer container, final MarkupStream markupStream,
		final ComponentTag tag)
	{
		if (!tag.getId().startsWith(LABEL_ATTR))
		{
			return null;
		}

		// retrieve the relative path to the component
		final String path = tag.getAttribute(getWicketNamespace(markupStream) + WICKET_FOR).trim();

		Component component = findRelatedComponent(container, path);
		if (component == null)
		{
			throw new ComponentNotFoundException("Could not find form component with path '" + path +
				"' while trying to resolve wicket:for attribute");
		}
		// check if component implements ILabelProviderLocator
		if (component instanceof ILabelProviderLocator)
		{
			component = ((ILabelProviderLocator) component).getAutoLabelComponent();
		}

		if (!(component instanceof ILabelProvider))
		{
			throw new WicketRuntimeException("Component pointed to by wicket:for attribute '" + path +
				"' does not implement " + ILabelProvider.class.getName());
		}

		if (!component.getOutputMarkupId())
		{
			component.setOutputMarkupId(true);
			if (component.hasBeenRendered())
			{
				logger.warn(
					"Component: {} is referenced via a wicket:for attribute but does not have its outputMarkupId property set to true",
					component.toString(false));
			}
		}

		if (component instanceof FormComponent)
		{
			component.setMetaData(MARKER_KEY, new AutoLabelMarker((FormComponent<?>)component));
		}

		return new AutoLabel(tag.getId(), component);
	}

