	/**
	 * @see org.apache.wicket.markup.resolver.IComponentResolver#resolve(org.apache.wicket.MarkupContainer,
	 *      org.apache.wicket.markup.MarkupStream, org.apache.wicket.markup.ComponentTag)
	 */
	@Override
	public final Component resolve(final MarkupContainer container,
		final MarkupStream markupStream, final ComponentTag tag)
	{
		// Must be marked as autolink tag
		if (tag.isAutolinkEnabled())
		{
			// get the reference resolver
			ITagReferenceResolver referenceResolver = tagNameToTagReferenceResolvers.get(tag.getName());
			if (referenceResolver == null)
			{
				// fallback on default
				referenceResolver = DEFAULT_ATTRIBUTE_RESOLVER;
			}

			// get the reference, which is typically the value of e.g. a href or src
			// attribute
			String reference = referenceResolver.getReference(tag);

			// create the path info object
			PathInfo pathInfo = new PathInfo(reference, container, markupStream);

			// Try to find the Page matching the href
			// Note: to not use tag.getId() because it will be modified while
			// resolving the link and hence the 2nd render will fail.
			Component link = resolveAutomaticLink(pathInfo, WicketLinkTagHandler.AUTOLINK_ID, tag);

			if (log.isDebugEnabled())
			{
				log.debug("Added autolink " + link);
			}

			// Tell the container, we resolved the id
			return link;
		}

		// We were not able to resolve the id
		return null;
	}

