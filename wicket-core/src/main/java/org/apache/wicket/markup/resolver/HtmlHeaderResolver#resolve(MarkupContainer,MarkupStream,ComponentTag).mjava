	@Override
	public Component resolve(final MarkupContainer container, final MarkupStream markupStream,
		final ComponentTag tag)
	{
		// Only <head> component tags have the id == "_header"
		if (tag.getId().equals(HtmlHeaderSectionHandler.HEADER_ID))
		{
			// Create a special header component which will gather additional
			// input the <head> from 'contributors'.
			return newHtmlHeaderContainer(HtmlHeaderSectionHandler.HEADER_ID +
				container.getPage().getAutoIndex());
		}
		else if ((tag instanceof WicketTag) && ((WicketTag)tag).isHeadTag())
		{
			// If we found <wicket:head> without surrounding <head> on a Page,
			// than we have to add wicket:head into a automatically generated
			// head first.
			if (container instanceof WebPage)
			{
				// Create a special header component which will gather
				// additional input the <head> from 'contributors'.
				MarkupContainer header = newHtmlHeaderContainer(HtmlHeaderSectionHandler.HEADER_ID +
					container.getPage().getAutoIndex());

				// It is <wicket:head>. Because they do not provide any
				// additional functionality they are merely a means of surrounding relevant
				// markup. Thus we simply create a WebMarkupContainer to handle
				// the tag.
				WebMarkupContainer header2 = new TransparentWebMarkupContainer(
					HtmlHeaderSectionHandler.HEADER_ID);

				header2.setRenderBodyOnly(true);
				header.add(header2);

				return header;
			}
			else if (container instanceof HtmlHeaderContainer)
			{
				// It is <wicket:head>. Because they do not provide any
				// additional functionality there are merely a means of surrounding
				// relevant markup. Thus we simply create a WebMarkupContainer to handle
				// the tag.
				WebMarkupContainer header = new TransparentWebMarkupContainer(
					HtmlHeaderSectionHandler.HEADER_ID);
				header.setRenderBodyOnly(true);

				return header;
			}
			final Page page = container.getPage();
			final String pageClassName = (page != null) ? page.getClass().getName() : "unknown";
			final IResourceStream stream = markupStream.getResource();
			final String streamName = (stream != null) ? stream.toString() : "unknown";

			throw new MarkupException(
				"Mis-placed <wicket:head>. <wicket:head> must be outside of <wicket:panel>, <wicket:border>, and <wicket:extend>. Error occured while rendering page: " +
					pageClassName + " using markup stream: " + streamName);
		}

		// We were not able to handle the tag
		return null;
	}

