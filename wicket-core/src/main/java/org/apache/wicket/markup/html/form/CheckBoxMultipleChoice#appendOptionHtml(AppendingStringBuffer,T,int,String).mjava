	/**
	 * Generates and appends html for a single choice into the provided buffer
	 * 
	 * @param buffer
	 *            Appending string buffer that will have the generated html appended
	 * @param choice
	 *            Choice object
	 * @param index
	 *            The index of this option
	 * @param selected
	 *            The currently selected string value
	 */
	@Override
	protected void appendOptionHtml(final AppendingStringBuffer buffer, final T choice, int index,
		final String selected)
	{
		// Append option suffix
		buffer.append(getPrefix(index, choice));

		String id = getChoiceRenderer().getIdValue(choice, index);
		final String idAttr = getCheckBoxMarkupId(id);

		CharSequence renderValue = renderValue(choice);

		// Allows user to add attributes to the <label..> tag
		IValueMap labelAttrs = getAdditionalAttributesForLabel(index, choice);
		StringBuilder extraLabelAttributes = new StringBuilder();
		if (labelAttrs != null)
		{
			for (Map.Entry<String, Object> attr : labelAttrs.entrySet())
			{
				extraLabelAttributes.append(' ')
						.append(Strings.escapeMarkup(attr.getKey()))
						.append("=\"")
						.append(Strings.escapeMarkup(attr.getValue().toString()))
						.append('"');
			}
		}

		labelPosition.before(buffer, idAttr, extraLabelAttributes, renderValue);

		// Add checkbox element
		buffer.append("<input name=\"");
		buffer.append(getInputName());
		buffer.append('"');
		buffer.append(" type=\"checkbox\"");
		if (isSelected(choice, index, selected))
		{
			buffer.append(" checked=\"checked\"");
		}
		if (isDisabled(choice, index, selected) || !isEnabledInHierarchy())
		{
			buffer.append(" disabled=\"disabled\"");
		}
		buffer.append(" value=\"");
		buffer.append(Strings.escapeMarkup(id));
		buffer.append("\" id=\"");
		buffer.append(Strings.escapeMarkup(idAttr));
		buffer.append('"');

		// Allows user to add attributes to the <input..> tag
		{
			IValueMap attrs = getAdditionalAttributes(index, choice);
			if (attrs != null)
			{
				for (Map.Entry<String, Object> attr : attrs.entrySet())
				{
					buffer.append(' ')
						.append(Strings.escapeMarkup(attr.getKey()))
						.append("=\"")
						.append(Strings.escapeMarkup(attr.getValue().toString()))
						.append('"');
				}
			}
		}

		DebugSettings debugSettings = getApplication().getDebugSettings();
		String componentPathAttributeName = debugSettings.getComponentPathAttributeName();
		if (Strings.isEmpty(componentPathAttributeName) == false)
		{
			CharSequence path = getPageRelativePath();
			path = Strings.replaceAll(path, "_", "__");
			path = Strings.replaceAll(path, ":", "_");
			buffer.append(' ').append(componentPathAttributeName).append("=\"")
				.append(path)
				.append("_input_")
				.append(index)
				.append('"');
		}

		buffer.append("/>");

		labelPosition.after(buffer, idAttr, extraLabelAttributes, renderValue);

		// Append option suffix
		buffer.append(getSuffix(index, choice));
	}

