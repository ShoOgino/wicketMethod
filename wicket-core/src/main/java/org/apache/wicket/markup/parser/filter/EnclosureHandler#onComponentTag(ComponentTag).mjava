	@Override
	protected final MarkupElement onComponentTag(ComponentTag tag) throws ParseException
	{
		final boolean isWicketTag = tag instanceof WicketTag;
		final boolean isEnclosureTag = isWicketTag && ((WicketTag)tag).isEnclosureTag();

		// If wicket:enclosure
		if (isEnclosureTag)
		{
			// If open tag, than put the tag onto the stack
			if (tag.isOpen())
			{
				if (stack == null)
				{
					stack = new Stack<ComponentTag>();
				}
				stack.push(tag);
			}
			// If close tag, then remove the tag from the stack and update
			// the child attribute of the open tag if required
			else if (tag.isClose())
			{
				if (stack == null)
				{
					throw new WicketParseException("Missing open tag for Enclosure:", tag);
				}

				// Remove the open tag from the stack
				ComponentTag lastEnclosure = stack.pop();

				// If the child attribute has not been given by the user,
				// then ...
				if (childId != null)
				{
					lastEnclosure.put(CHILD_ATTRIBUTE, childId);
					lastEnclosure.setModified(true);
					childId = null;
				}

				if (stack.size() == 0)
				{
					stack = null;
				}
			}
			else
			{
				throw new WicketParseException("Open-close tag not allowed for Enclosure:", tag);
			}
		}
		// Are we inside a wicket:enclosure tag?
		else if (stack != null)
		{
			ComponentTag lastEnclosure = stack.lastElement();

			// If the enclosure tag has NO child attribute, then ...
			if (lastEnclosure.getAttribute(CHILD_ATTRIBUTE) == null)
			{
				String id = tag.getAttribute(getWicketNamespace() + ":id");
				if (id != null)
				{
					// We encountered more than one child component inside
					// the enclosure and are not able to automatically
					// determine the child component to delegate the
					// isVisible() to => Exception
					if (childId != null)
					{
						throw new WicketParseException("Use <" + getWicketNamespace() +
							":enclosure child='xxx'> to name the child component:", tag);
					}
					// Remember the child id. The open tag will be updated
					// once the close tag is found. See above.
					childId = id;
				}
			}
		}

		return tag;
	}

