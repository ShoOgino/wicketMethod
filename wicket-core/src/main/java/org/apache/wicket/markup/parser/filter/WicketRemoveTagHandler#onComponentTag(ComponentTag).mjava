	@Override
	protected final MarkupElement onComponentTag(ComponentTag tag) throws ParseException
	{
		// If it is not a remove tag, than we are finished
		if (!(tag instanceof WicketTag) || !((WicketTag)tag).isRemoveTag())
		{
			return tag;
		}

		// remove tag must not be open-close tags
		if (tag.isOpenClose())
		{
			throw new WicketParseException("Wicket remove tag must not be an open-close tag:", tag);
		}

		// fetch markup elements
		MarkupElement markupElement;
		while ((markupElement = getNextFilter().nextElement()) != null)
		{
			// skip non-component tags
			if((markupElement instanceof ComponentTag) == false)
			{
				continue;
			}

			// find the corresponding close tag for the given tag
			ComponentTag closeTag = (ComponentTag)markupElement;

			// No Wicket component tags are allowed within the preview region.
			// Wicket components will a component name assigned.
			if (closeTag.getId() == null)
			{
				continue;
			}

			// The first Wicket component following the preview region open
			// tag, must be it's corresponding close tag.
			if (closeTag.closes(tag))
			{
				// The tag (from open to close) should be ignored by
				// MarkupParser and not be added to the Markup.
				tag.setIgnore(true);
				return tag;
			}

			throw new WicketParseException(
				"Markup remove regions must not contain Wicket component tags:", closeTag);
		}

		throw new WicketParseException(
			"Did not find close tag for markup remove region. Open tag:", tag);
	}

