	/**
	 * If the child has not been directly added to the container, but via a
	 * TransparentWebMarkupContainer, then we are in trouble. In general Wicket iterates over the
	 * markup elements and searches for associated components, not the other way around. Because of
	 * TransparentWebMarkupContainer (or more generally resolvers), there is no "synchronous" search
	 * possible.
	 * 
	 * @param container
	 *            the parent container.
	 * @param
	 * 		  containerMarkup
	 * 			  the markup of the container.           
	 * @param child
	 *            The component to find the markup for.
	 * @return the markup fragment for the child, or {@code null}.
	 */
	protected IMarkupFragment searchMarkupInTransparentResolvers(MarkupContainer container,
		IMarkupFragment containerMarkup, Component child)
	{
		IMarkupFragment childMarkupFound = null;
		Iterator<Component> siblingsIterator = container.iterator();
		
		while (siblingsIterator.hasNext() && childMarkupFound == null)
		{
			Component sibling = siblingsIterator.next();
			
			if(sibling == child || !sibling.isVisible())
			{
				continue;
			}
			
			IMarkupFragment siblingMarkup = containerMarkup.find(sibling.getId());
			
			if (siblingMarkup != null && sibling instanceof MarkupContainer)
			{
				IMarkupFragment childMarkup  = siblingMarkup.find(child.getId());
				
				if (childMarkup != null && sibling instanceof IComponentResolver)
				{
					IComponentResolver componentResolver = (IComponentResolver)sibling;
					MarkupStream stream = new MarkupStream(childMarkup);
					ComponentTag tag = stream.getTag();
					
					Component resolvedComponent = sibling.get(tag.getId());
					if (resolvedComponent == null)
					{
						resolvedComponent = componentResolver.resolve((MarkupContainer)sibling, stream, tag);
					}
					
					if (child == resolvedComponent)
					{
						childMarkupFound = childMarkup;
					}
				}
				else 
				{
					childMarkupFound = searchMarkupInTransparentResolvers((MarkupContainer)sibling, siblingMarkup, child);
				}
			}
		}
		return childMarkupFound;
	}

