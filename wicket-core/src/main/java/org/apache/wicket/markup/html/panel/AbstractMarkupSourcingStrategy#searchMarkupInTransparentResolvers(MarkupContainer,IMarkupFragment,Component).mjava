	/**
	 * If the child has not been directly added to the container, but via a
	 * TransparentWebMarkupContainer, then we are in trouble. In general Wicket iterates over the
	 * markup elements and searches for associated components, not the other way around. Because of
	 * TransparentWebMarkupContainer (or more generally resolvers), there is no "synchronous" search
	 * possible.
	 * 
	 * @param container
	 *            the parent container.
	 * @param
	 * 		  containerMarkup
	 * 			  the markup of the parent container.
	 * @param child
	 *            The component to find the markup for.
	 * @return the markup fragment for the child, or {@code null}.
	 */
	protected IMarkupFragment searchMarkupInTransparentResolvers(MarkupContainer container,
		IMarkupFragment containerMarkup, Component child)
	{
		IMarkupFragment childMarkupFound = null;
		Iterator<Component> childrenIterator = container.iterator();
		final List<MarkupContainer> componentResolvers = new ArrayList<>();
		
		//collect all "transparent" (i.e. component resolvers) children
		container.visitChildren(IComponentResolver.class, new IVisitor<MarkupContainer, Void>()
		{
			@Override
			public void component(MarkupContainer child, IVisit<Void> visit)
			{
				componentResolvers.add(child);
			}
		});
				
		while (childrenIterator.hasNext() && childMarkupFound == null)
		{
			Component sibling = childrenIterator.next();

			if (sibling == child || !sibling.isVisible() || !(sibling instanceof MarkupContainer))
			{
				continue;
			}
			
			IMarkupFragment siblingMarkup = containerMarkup.find(sibling.getId());
			
			if (siblingMarkup != null)
			{
				if (sibling instanceof IComponentResolver)
				{
					childMarkupFound = searchInNestedTransparentResolvers(containerMarkup, child, componentResolvers);
				}
				else 
				{
					childMarkupFound = searchMarkupInTransparentResolvers((MarkupContainer)sibling, siblingMarkup, child);
				}
			}
		}
		
		return childMarkupFound;
	}

