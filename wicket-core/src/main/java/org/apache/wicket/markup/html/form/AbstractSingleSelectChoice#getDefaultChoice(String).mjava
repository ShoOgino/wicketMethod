	/**
	 * Asks the {@link Localizer} for the property to display for an additional default choice
	 * depending on {@link #isNullValid()}:
	 * 
	 * <ul>
	 * <li>
	 * "nullValid" if {@code null} is valid, defaulting to an empty string.</li>
	 * <li>
	 * "null" if {@code null} is not valid but no choice is selected (i.e. {@code selectedValue} is
	 * empty), defaulting to "Choose one".</li>
	 * </ul>
	 * 
	 * Otherwise no additional default choice will be returned.
	 * 
	 * @see org.apache.wicket.markup.html.form.AbstractChoice#getDefaultChoice(String)
	 */
	@Override
	protected CharSequence getDefaultChoice(final String selectedValue)
	{
		// Is null a valid selection value?
		if (isNullValid())
		{
			// Null is valid, so look up the value for it
			String option = getLocalizer().getStringIgnoreSettings(getNullValidKey(), this, null,
				null);
			if (Strings.isEmpty(option))
			{
				option = getLocalizer().getString("nullValid", this, "");
			}

			// The <option> tag buffer
			final AppendingStringBuffer buffer = new AppendingStringBuffer(64 + option.length());

			// Add option tag
			buffer.append("\n<option");

			// If null is selected, indicate that
			if ("".equals(selectedValue))
			{
				buffer.append(" selected=\"selected\"");
			}

			// Add body of option tag
			buffer.append(" value=\"\">").append(option).append("</option>");
			return buffer;
		}
		else
		{
			// Null is not valid. Is it selected anyway?
			if ("".equals(selectedValue))
			{
				// Force the user to pick a non-null value
				String option = getLocalizer().getStringIgnoreSettings(getNullKey(), this, null,
					null);

				if (Strings.isEmpty(option))
				{
					option = getLocalizer().getString("null", this, CHOOSE_ONE);
				}

				return "\n<option selected=\"selected\" value=\"\">" + option + "</option>";
			}
		}
		return "";
	}

