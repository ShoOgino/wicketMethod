	/**
	 * Create a new markup resource stream for the container and optionally the Class. The Class
	 * must be provided in case of base (inherited) markup. Else it might be null (standard use
	 * case).
	 * 
	 * @param container
	 *            The MarkupContainer which requests to load the Markup resource stream
	 * @param clazz
	 *            Either the container class or any super class. Might be null.
	 * @return A IResourceStream if the resource was found
	 */
	public final MarkupResourceStream getMarkupResourceStream(final MarkupContainer container,
		Class<?> clazz)
	{
		Args.notNull(container, "container");

		if (checkMarkupType(container) == false)
		{
			// TODO improve: Result { boolean success, enum FailureReason {not found, not yet
			// available}, Markup markup }
			return null;
		}

		Class<?> containerClass = getContainerClass(container, clazz);

		// Who is going to provide the markup resource stream?
		// And ask the provider to locate the markup resource stream
		final IResourceStream resourceStream = getMarkupResourceStreamProvider(container).getMarkupResourceStream(
			container, containerClass);

		// Found markup?
		if (resourceStream == null)
		{
			// TODO improve: Result { boolean success, enum FailureReason {not found, not yet
			// available}, Markup markup }
			return null;
		}

		if (resourceStream instanceof MarkupResourceStream)
		{
			return (MarkupResourceStream)resourceStream;
		}

		return new MarkupResourceStream(resourceStream, new ContainerInfo(container),
			containerClass);
	}

