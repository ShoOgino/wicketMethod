	/**
	 * Get the next tag from the next MarkupFilter in the chain and search for Wicket specific tags.
	 * <p>
	 * Note: The xml parser - the next MarkupFilter in the chain - returns XmlTags which are a
	 * subclass of MarkupElement. The implementation of this filter will return either ComponentTags
	 * or ComponentWicketTags. Both are subclasses of MarkupElement as well and both maintain a
	 * reference to the XmlTag. But no XmlTag is returned.
	 * 
	 * @see org.apache.wicket.markup.parser.IMarkupFilter#nextElement()
	 * @return The next tag from markup to be processed. If null, no more tags are available
	 */
	@Override
	protected MarkupElement onComponentTag(ComponentTag tag) throws ParseException
	{
		final String namespace = getWicketNamespace();

		// If the form <tag wicket:id = "value"> is used
		final String wicketIdValue = tag.getAttributes().getString(namespace + ":id");

		// Identify tags with Wicket namespace
		if (namespace.equalsIgnoreCase(tag.getNamespace()))
		{
			// It is <wicket:...>
			tag = new WicketTag(tag.getXmlTag());

			if (Strings.isEmpty(wicketIdValue))
			{
				// Make it a Wicket component. Otherwise it would be RawMarkup
				tag.setId(namespace + "_" + tag.getName());
				tag.setModified(true);

				if (tag.isClose() == false)
				{
					tag.setAutoComponentTag(true);
				}
			}

			// If the tag is not a well-known wicket namespace tag
			if (!isWellKnown(tag))
			{
				// give up
				throw new WicketParseException("Unknown tag name with Wicket namespace: '" +
					tag.getName() + "'. Might be you haven't installed the appropriate resolver?",
					tag);
			}
		}

		if (wicketIdValue != null)
		{
			if (wicketIdValue.trim().length() == 0)
			{
				throw new WicketParseException(
					"The wicket:id attribute value must not be empty. May be unmatched quotes?!?",
					tag);
			}
			// Make it a wicket component. Otherwise it would be RawMarkup
			tag.setId(wicketIdValue);
		}

		return tag;
	}

