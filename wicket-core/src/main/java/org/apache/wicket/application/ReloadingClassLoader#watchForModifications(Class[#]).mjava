	/**
	 * Watch changes of a class file by locating it in the list of location URLs and adding the
	 * corresponding file to the ModificationWatcher
	 * 
	 * @param clz
	 *            the class to watch
	 */
	private void watchForModifications(final Class<?> clz)
	{
		// Watch class in the future
		Iterator<URL> locationsIterator = urls.iterator();
		File clzFile = null;
		while (locationsIterator.hasNext())
		{
			// FIXME only works for directories, but JARs etc could be checked
			// as well
			URL location = locationsIterator.next();
			String clzLocation = location.getFile() + clz.getName().replaceAll("\\.", "/") +
				".class";
			log.debug("clzLocation=" + clzLocation);
			clzFile = new File(clzLocation);
			final File finalClzFile = clzFile;
			if (clzFile.exists())
			{
				log.info("Watching changes of class " + clzFile);
				watcher.add(clzFile, new IChangeListener<IModifiable>()
				{
					@Override
					public void onChange(IModifiable modifiable)
					{
						log.info("Class file " + finalClzFile + " has changed, reloading");
						try
						{
							listener.onChange(clz);
						}
						catch (Exception e)
						{
							log.error("Could not notify listener", e);
							// If an error occurs when the listener is notified,
							// remove the watched object to avoid rethrowing the
							// exception at next check
							// FIXME check if class file has been deleted
							watcher.remove(finalClzFile);
						}
					}
				});
				break;
			}
			else
			{
				log.debug("Class file does not exist: " + clzFile);
			}
		}
		if (clzFile != null && !clzFile.exists())
		{
			log.debug("Could not locate class " + clz.getName());
		}
	}

