	@Override
	public final Class<?> resolveClass(final String className) throws ClassNotFoundException
	{
		Class<?> clazz = null;
		WeakReference<Class<?>> ref = classes.get(className);

		// Might be garbage-collected between getting the WeakRef and retrieving
		// the Class from it.
		if (ref != null)
		{
			clazz = ref.get();
		}
		if (clazz == null)
		{
			switch (className)
			{
				case "byte":
					clazz = byte.class;
					break;
				case "short":
					clazz = short.class;
					break;
				case "int":
					clazz = int.class;
					break;
				case "long":
					clazz = long.class;
					break;
				case "float":
					clazz = float.class;
					break;
				case "double":
					clazz = double.class;
					break;
				case "boolean":
					clazz = boolean.class;
					break;
				case "char":
					clazz = char.class;
					break;
				default:
					// synchronize on the only class member to load only one class at a time and
					// prevent LinkageError. See above for more info
					synchronized (classes)
					{
						clazz = Class.forName(className, false, getClassLoader());
						if (clazz == null)
						{
							throw new ClassNotFoundException(className);
						}
					}
					classes.put(className, new WeakReference<Class<?>>(clazz));
					break;
			}
		}
		return clazz;
	}

