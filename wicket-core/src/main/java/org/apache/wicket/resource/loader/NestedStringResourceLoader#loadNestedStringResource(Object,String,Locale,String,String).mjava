	/**
	 * loads nested string resources
	 * 
	 * @param scope
	 *            the scope to find the key
	 * @param key
	 *            the actual key
	 * @param locale
	 *            the locale
	 * @param style
	 *            the style
	 * @param variation
	 *            the variation
	 * @return the load string
	 */
	private String loadNestedStringResource(Object scope, String key, Locale locale, String style,
		String variation)
	{
		Class<?> clazz = null;
		Component component = null;
		if (scope instanceof Component)
		{
			component = (Component)scope;
		}
		else
		{
			clazz = (Class<?>)scope;
		}

		Iterator<IStringResourceLoader> iter = loaders.iterator();
		String value = null;
		while (iter.hasNext() && (value == null))
		{
			IStringResourceLoader loader = iter.next();
			value = component != null
				? loader.loadStringResource(component, key, locale, style, variation)
				: loader.loadStringResource(clazz, key, locale, style, variation);
		}

		if (value == null)
		{
			return null;
		}
		
		StringBuffer output = new StringBuffer();
		Matcher matcher = pattern.matcher(value);
		// Search for other nested keys to replace
		while (matcher.find())
		{
			String nestedKey = matcher.group(1);
			String replacedPlaceHolder = component != null
				? loadNestedStringResource(component, nestedKey, locale, style, variation)
				: loadNestedStringResource(clazz, nestedKey, locale, style, variation);

			if (replacedPlaceHolder == null)
			{
				return null;
			}
			matcher.appendReplacement(output, replacedPlaceHolder);
		}
		matcher.appendTail(output);
		return output.toString();
	}

