	/**
	 * This key is what is used to determine how to group (or aggregate) your resources. It must
	 * implement equals and hashCode correctly so that it can be used as a key in a HashMap. These
	 * methods must be implemented so that if two references are given over the course of the
	 * hierarchy traversal, and those two references should be grouped (or aggregated), the keys
	 * returned for each should equal each other and their hash codes should be equal as well.
	 * 
	 * Typical implementations should use whether or not the resource reference is CSS as their
	 * first grouping parameter, since you don't want to render JS and CSS in the same tag (one
	 * needs to be in a link tag and one in a script tag).
	 * 
	 * Note that if your grouping key class (K) does not implement Comparable&lt;K&gt;, you must
	 * also override {@link #getGroupingKeyComparator()} and return a valid comparator that sorts
	 * keys in the order you want references rendered.
	 * 
	 * @param ref
	 *            the resource reference with associated data that came from the render*Reference
	 *            methods
	 * @return a new key used to group the references.
	 */
	protected abstract K newGroupingKey(ResourceReferenceAndStringData ref);

