	/**
	 * @see org.apache.wicket.resource.loader.IStringResourceLoader#loadStringResource(org.apache.wicket.Component,
	 *      java.lang.String, java.util.Locale, java.lang.String, java.lang.String)
	 */
	@Override
	public String loadStringResource(final Component component, final String key,
		final Locale locale, final String style, final String variation)
	{
		if (component == null)
		{
			return null;
		}

		if (log.isDebugEnabled())
		{
			log.debug("component: '" + component.toString(false) + "'; key: '" + key + '\'');
		}

		// The return value
		String string = null;

		// The key prefix is equal to the component path relative to the
		// current component on the top of the stack.
		String prefix = getResourcePath(component);

		// walk downwards starting with page going down to component
		for (Component current : getComponentTrail(component))
		{
			// get current component class
			final Class<?> clazz = current.getClass();

			// first, try the fully qualified resource name relative to the
			// component on the path from page down.
			if (Strings.isEmpty(prefix) == false)
			{
				// lookup fully qualified path
				string = loadStringResource(clazz, prefix + '.' + key, locale, style, variation);

				// return string if we found it
				if (string != null)
				{
					return string;
				}

				// shorten resource key prefix when going downwards (skip for repeaters)
				if ((current instanceof AbstractRepeater) == false)
				{
					prefix = Strings.afterFirst(prefix, '.');
				}
			}
			// If not found, than check if a property with the 'key' provided by
			// the user can be found.
			string = loadStringResource(clazz, key, locale, style, variation);

			// return string if we found it
			if (string != null)
			{
				return string;
			}
		}

		return string;
	}

