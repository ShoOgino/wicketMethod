	/**
	 * Replaces the URLs of CSS resources with Wicket representatives.
	 */
	@Override
	public String compress(String original)
	{
		Matcher matcher = CssUrlReplacer.urlPattern.matcher(original);
		// Search for urls
		while (matcher.find())
		{
			Collection<String> componentNames = this.componentNames.keySet();
			for (String componentName : componentNames)
			{
				try
				{
					Class<?> componentClass = WicketObjects.resolveClass(componentName);
					String url = matcher.group(1);
					if (!url.contains("/"))
					{
						URL urlResource = componentClass.getResource(url);
						// If the resource is not found skip it
						if (urlResource != null)
						{
							PackageResourceReference packageResourceReference = new PackageResourceReference(
								componentClass, url);
							String replacedUrl = RequestCycle.get()
								.urlFor(packageResourceReference, null)
								.toString();
							StringBuilder urlBuilder = new StringBuilder();
							urlBuilder.append("url('");
							urlBuilder.append(replacedUrl);
							urlBuilder.append("')");
							original = matcher.replaceFirst(urlBuilder.toString());
						}
					}
				}
				catch (Exception e)
				{
					throw new WicketRuntimeException(
						"A problem occurred during CSS url replacement.", e);
				}
			}

		}
		return original;
	}

