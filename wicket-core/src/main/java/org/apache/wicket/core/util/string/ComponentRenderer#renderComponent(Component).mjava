	/**
	 * Collects the Html generated by rendering a component.
	 * <p>
	 * Important notes:
	 * <ul>
	 * <li>this method is meant to render fresh component instances that are disposed after the html
	 * has been generate. To avoid unwanted side effects do not use it with components that are from
	 * an existing hierarchy.</li>
	 * <li>does <strong>not</strong> support rendering
	 * {@link org.apache.wicket.markup.html.panel.Fragment} instances</li>
	 * <li>must be called on a thread bound to an application's {@link ThreadContext}!</li>
	 * </ul>
	 *
	 * @param component
	 *            the component to render.
	 * @return the html rendered by the component
	 * 
	 * @see ThreadContext
	 */
	public static CharSequence renderComponent(final Component component)
	{
		RequestCycle requestCycle = RequestCycle.get();

		final Response originalResponse = requestCycle.getResponse();
		BufferedWebResponse tempResponse = new BufferedWebResponse(null);

		MarkupContainer oldParent = component.getParent();

		if (oldParent != null && LOGGER.isWarnEnabled())
		{
			LOGGER.warn("Component '{}' with a parent '{}' is passed for standalone rendering. "
				+ "It is recommended to render only orphan components because they are not cleaned up/detached"
				+ " after the rendering.", component, oldParent);
		}

		try
		{
			requestCycle.setResponse(tempResponse);

			// add the component to a dummy page just for the rendering
			RenderPage page = new RenderPage(component);
			page.internalInitialize();

			component.beforeRender();
			component.renderPart();
		}
		finally
		{
			if (oldParent != null)
			{
				oldParent.add(component); // re-add the child to its old parent
			}

			requestCycle.setResponse(originalResponse);
		}

		return tempResponse.getText();
	}

