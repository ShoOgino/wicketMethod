	/**
	 * Makes a deep clone of an object by serializing and deserializing it. The object must be fully
	 * serializable to be cloned. No extra debug info is gathered.
	 *
	 * @param object
	 *            The object to clone
	 * @return A deep copy of the object
	 * @see #cloneModel(Object)
	 */
	public static <T> T cloneObject(final T object)
	{
		if (object == null)
		{
			return null;
		}
		else
		{
			ISerializer serializer = null;
			if (Application.exists())
			{
				serializer = Application.get().getFrameworkSettings().getSerializer();
			}

			if (serializer == null || serializer instanceof JavaSerializer)
			{
				// WICKET-6334 create a new instance of JavaSerializer that doesn't use custom IObjectCheckers
				serializer = new JavaSerializer(SerializingObjectSizeOfStrategy.class.getName());
			}

			byte[] serialized = serializer.serialize(object);
			if (serialized == null)
			{
				throw new IllegalStateException("A problem occurred while serializing an object. " +
						"Please check the earlier logs for more details. Problematic object: " + object);
			}
			Object deserialized = serializer.deserialize(serialized);
			return (T) deserialized;
		}
	}

