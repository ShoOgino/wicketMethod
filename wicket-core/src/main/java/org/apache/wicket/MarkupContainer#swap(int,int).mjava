	/**
	 * Swaps position of children. This method is particularly useful for adjusting positions of
	 * repeater's items without rebuilding the component hierarchy
	 * 
	 * @param idx1
	 *            index of first component to be swapped
	 * @param idx2
	 *            index of second component to be swapped
	 */
	public final void swap(int idx1, int idx2)
	{
		int size = children_size();
		if (idx1 < 0 || idx1 >= size)
		{
			throw new IndexOutOfBoundsException("Argument idx is out of bounds: " + idx1 + "<>[0," +
				size + ")");
		}

		if (idx2 < 0 || idx2 >= size)
		{
			throw new IndexOutOfBoundsException("Argument idx is out of bounds: " + idx2 + "<>[0," +
				size + ")");
		}

		if (idx1 == idx2)
		{
			return;
		}

		if (children instanceof List)
		{
			@SuppressWarnings("unchecked")
			List<Component> childrenList = (List<Component>)children;
			childrenList.set(idx1, childrenList.set(idx2, childrenList.get(idx1)));
		}
		else
		{
			@SuppressWarnings("unchecked")
			Map<String, Component> childrenMap = (Map<String, Component>)children;
			List<Component> childrenList = copyChildren();
			childrenList.set(idx1, childrenList.set(idx2, childrenList.get(idx1)));
			childrenMap.clear();
			for (Component child : childrenList)
			{
				childrenMap.put(child.getId(), child);
			}
		}
	}

