	/**
	 * Looks up a one-arg Page constructor by class and argument type.
	 * 
	 * @param pageClass
	 *            The class of page
	 * @param argumentType
	 *            The argument type
	 * @return The page constructor, or null if no one-arg constructor can be found taking the given
	 *         argument type.
	 */
	private final <C extends IRequestablePage> Constructor<?> constructor(final Class<C> pageClass,
		final Class<PageParameters> argumentType)
	{
		// Get constructor for page class from cache
		Constructor<?> constructor = constructorForClass.get(pageClass);

		// Need to look up?
		if (constructor == null)
		{
			try
			{
				// Try to find the constructor
				constructor = pageClass.getConstructor(new Class[] { argumentType });

				// Store it in the cache
				constructorForClass.put(pageClass, constructor);

				if (log.isDebugEnabled())
				{
					log.debug("Found constructor for Page of type '{}' and argument of type '{}'.",
						pageClass, argumentType);
				}
			}
			catch (NoSuchMethodException e)
			{
				if (log.isDebugEnabled())
				{
					log.debug(
						"Page of type '{}' has not visible constructor with an argument of type '{}'.",
						pageClass, argumentType);
				}

				return null;
			}
		}

		return constructor;
	}

