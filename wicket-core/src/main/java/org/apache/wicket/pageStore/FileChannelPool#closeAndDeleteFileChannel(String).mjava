	/**
	 * Closes the file channel with given name and removes it from pool. Also removes the file from
	 * file system. If the channel is in use, the pool first waits until the chanel is returned to
	 * the pool and then closes it.
	 * 
	 * @param name
	 */
	public synchronized void closeAndDeleteFileChannel(String name)
	{
		FileChannel channel = nameToChannel.get(name);
		if (channel != null)
		{
			nameToChannel.remove(name);

			Integer count = channelToUseCount.get(channel);
			if (count != null && count > 0)
			{
				channelsToDeleteOnReturn.add(channel);
			}
			else
			{
				closeAndDelete(channel);
			}
		}
		else
		{
			File file = new File(name);
			Files.remove(file);
		}
	}

