	/**
	 * Adds a component to be updated at the client side with its current markup
	 *
	 * @param component
	 *      the component to update
	 * @param markupId
	 *      the markup id to use to find the component in the page's markup
	 * @throws IllegalArgumentException
	 *      thrown when a Page or an AbstractRepeater is added
	 * @throws IllegalStateException
	 *      thrown when components no more can be added for replacement.
	 */
	public final void add(final Component component, final String markupId)
			throws IllegalArgumentException, IllegalStateException
	{
		Args.notEmpty(markupId, "markupId");
		Args.notNull(component, "component");

		if (component instanceof Page)
		{
			if (component != page)
			{
				throw new IllegalArgumentException("Cannot add another page");
			}
		}
		else
		{
			Page pageOfComponent = component.findParent(Page.class);
			if (pageOfComponent != page)
			{
				String msg = "Cannot update component because its page is not the same as this partial update. Component: " + component.toString();
				IllegalArgumentException error = new IllegalArgumentException(msg);

				if (pageOfComponent == null) {
					// no longer on page - log the error but don't block the user of the application
					// (which was the behavior in Wicket <= 7).
					LOG.error(msg, error);
					return;
				}
				else 
				{
					// on another page
					throw error;
				}
			}

			if (component instanceof AbstractRepeater)
			{
				throw new IllegalArgumentException(
						"Component " +
								component.getClass().getName() +
								" has been added to a partial page update. This component is a repeater and cannot be repainted directly. " +
								"Instead add its parent or another markup container higher in the hierarchy.");
			}
		}

		assertComponentsNotFrozen();

		component.setMarkupId(markupId);
		markupIdToComponent.put(markupId, component);
	}

