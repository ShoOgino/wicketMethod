	/**
	 * Adds a component to be updated at the client side with its current markup
	 *
	 * @param component
	 *      the component to update
	 * @param markupId
	 *      the markup id to use to find the component in the page's markup
	 * @throws IllegalArgumentException
	 *      thrown when a Page or an AbstractRepeater is added
	 * @throws IllegalStateException
	 *      thrown when components no more can be added for replacement.
	 */
	public final void add(final Component component, final String markupId)
	{
		Args.notEmpty(markupId, "markupId");
		Args.notNull(component, "component");

		if (component instanceof Page)
		{
			if (component != page)
			{
				throw new IllegalArgumentException("Cannot add another page");
			}
		}
		else
		{
			Page pageOfComponent = component.findParent(Page.class);
			if (pageOfComponent == null) 
			{
				// no longer on page - log the error but don't block the user of the application
				// (which was the behavior in Wicket <= 7).
				LOG.warn("Component '{}' not cannot be updated because it was already removed from page", component);
				return;
			}
			else if (pageOfComponent != page) 
			{
				// on another page
				throw new IllegalArgumentException("Component " + component.toString() + " cannot be updated because it is on another page.");
			}

			if (component instanceof AbstractRepeater)
			{
				throw new IllegalArgumentException(
					"Component " +
					Classes.name(component.getClass()) +
					" is a repeater and cannot be added to a partial page update directly. " +
					"Instead add its parent or another markup container higher in the hierarchy.");
			}
		}

		if (componentsFrozen)
		{
			throw new IllegalStateException("A partial update of the page is being rendered, component " + component.toString() + " can no longer be added");
		}

		component.setMarkupId(markupId);
		markupIdToComponent.put(markupId, component);
	}

