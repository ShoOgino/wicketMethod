	/**
	 * {@inheritDoc}
	 */
	@Override
	public RuntimeConfigurationType getConfigurationType()
	{
		if (configurationType == null)
		{
			String result = null;
			try
			{
				result = System.getProperty("wicket." + Application.CONFIGURATION);
			}
			catch (SecurityException e)
			{
				log.warn("SecurityManager doesn't allow to read the configuration type from " +
						"the system properties. The configuration type will be read from the web.xml.");
			}

			// If no system parameter check filter/servlet <init-param> and <context-param>
			if (result == null)
			{
				result = getInitParameter("wicket." + Application.CONFIGURATION);
			}
			if (result == null)
			{
				result = getServletContext().getInitParameter("wicket." + Application.CONFIGURATION);
			}

			// If no system parameter check filter/servlet specific <init-param>
			if (result == null)
			{
				result = getInitParameter(Application.CONFIGURATION);
			}

			// If no system parameter and no <init-param>, then check
			// <context-param>
			if (result == null)
			{
				result = getServletContext().getInitParameter(Application.CONFIGURATION);
			}

			// Return result if we have found it, else fall back to DEVELOPMENT mode
			// as the default.
			if (result != null)
			{
				try
				{
					configurationType = RuntimeConfigurationType.valueOf(result.toUpperCase());
				}
				catch (IllegalArgumentException e)
				{
					// Ignore : fall back to DEVELOPMENT mode
					// log.warn("Unknown runtime configuration type '" + result +
					// "', falling back to DEVELOPMENT mode.");
					throw new IllegalArgumentException("Invalid configuration type: '" + result +
						"'.  Must be \"development\" or \"deployment\".");
				}
			}
		}

		if (configurationType == null)
		{
			configurationType = RuntimeConfigurationType.DEVELOPMENT;
		}

		return configurationType;
	}

