	/**
	 * Performs the check of the {@code Origin} header that is targeted at the {@code page}.
	 *
	 * @param request
	 *            the current container request
	 * @param origin
	 *            the {@code Origin} header
	 * @param page
	 *            the page that is the target of the request
	 */
	private void checkOrigin(HttpServletRequest request, String origin, IRequestablePage page)
	{
		if (origin == null || origin.isEmpty())
		{
			log.debug("Origin-header not present in request, {}", noOriginAction);
			switch (noOriginAction)
			{
				case ALLOW :
					allowHandler(request, origin, page);
					break;
				case SUPPRESS :
					suppressHandler(request, origin, page);
					break;
				case ABORT :
					abortHandler(request, origin, page);
					break;
			}
			return;
		}
		origin = origin.toLowerCase();

		// if the origin is a know and trusted origin, don't check any further but allow the request
		if (isWhitelistedOrigin(origin))
		{
			whitelistedHandler(request, origin, page);
			return;
		}

		// check if the origin HTTP header matches the request URI
		if (!isLocalOrigin(request, origin))
		{
			log.debug("Origin-header conflicts with request origin, {}", conflictingOriginAction);
			switch (conflictingOriginAction)
			{
				case ALLOW :
					allowHandler(request, origin, page);
					break;
				case SUPPRESS :
					suppressHandler(request, origin, page);
					break;
				case ABORT :
					abortHandler(request, origin, page);
					break;
			}
		}
		else
		{
			matchingOrigin(request, origin, page);
		}
	}

