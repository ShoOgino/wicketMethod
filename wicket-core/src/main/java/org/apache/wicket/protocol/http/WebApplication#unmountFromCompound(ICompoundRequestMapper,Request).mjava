	/**
	 * Descends the tree of {@link ICompoundRequestMapper}s and {@link IRequestMapperDelegate}s to find the correct descendant
	 * to remove.
	 *
	 * @param parent
	 *		The {@link ICompoundRequestMapper} from which to unmount the matching mapper.
	 * @param request
	 *		The request used to find the mapper to remove.
	 */
	private void unmountFromCompound(ICompoundRequestMapper parent, Request request)
	{
		Collection<IRequestMapper> toRemove = new LinkedList<>();

		for (IRequestMapper mapper : parent)
		{
			if (mapper.mapRequest(request) != null)
			{
				IRequestMapper actualMapper = mapper;

				while (actualMapper instanceof IRequestMapperDelegate)
				{
					actualMapper = ((IRequestMapperDelegate) actualMapper).getDelegateMapper();
				}

				if (actualMapper instanceof ICompoundRequestMapper)
				{
					unmountFromCompound((ICompoundRequestMapper) actualMapper, request);
				}
				else
				{
					toRemove.add(mapper);
				}
			}
		}

		for (IRequestMapper mapper : toRemove)
		{
			parent.remove(mapper);
		}
	}

