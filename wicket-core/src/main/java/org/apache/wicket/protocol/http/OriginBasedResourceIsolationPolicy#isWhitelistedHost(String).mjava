  /**
   * Checks whether the domain part of the {@code sourceUri} ({@code Origin} or {@code Referer}
   * header) is whitelisted.
   *
   * @param sourceUri
   *            the contents of the {@code Origin} or {@code Referer} HTTP header
   * @return {@code true} when the source domain was whitelisted
   */
  protected boolean isWhitelistedHost(final String sourceUri)
  {
    try
    {
      final String sourceHost = new URI(sourceUri).getHost();
      if (Strings.isEmpty(sourceHost))
        return false;
      for (String whitelistedOrigin : acceptedOrigins)
      {
        if (sourceHost.equalsIgnoreCase(whitelistedOrigin) ||
            sourceHost.endsWith("." + whitelistedOrigin))
        {
          log.trace("Origin {} matched whitelisted origin {}, request accepted",
              sourceUri, whitelistedOrigin);
          return true;
        }
      }
    }
    catch (URISyntaxException e)
    {
      log.debug("Origin: {} not parseable as an URI. Whitelisted-origin check skipped.",
          sourceUri);
    }

    return false;
  }

