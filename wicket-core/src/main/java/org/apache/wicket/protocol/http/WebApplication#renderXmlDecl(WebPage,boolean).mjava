	/**
	 * The rules if and when to insert an xml decl in the response are a bit tricky. Hence, we allow
	 * the user to replace the default implementation per page and per application.
	 * <p>
	 * Default implementation: the page mime type must be "application/xhtml+xml" and request
	 * HTTP_ACCEPT header must include "application/xhtml+xml" to automatically include the xml
	 * decl. Please see <a href=
	 * "https://developer.mozilla.org/en/Writing_JavaScript_for_XHTML#Finally:_Content_Negotiation"
	 * >Writing JavaScript for XHTML</a> for details.
	 * <p>
	 * Please note that xml decls in Wicket's markup are only used for reading the markup. The
	 * markup's xml decl will always be removed and never be used to configure the response.
	 * 
	 * @param page
	 *            The page currently being rendered
	 * @param insert
	 *            If false, than the rules are applied. If true, it'll always be written. In order
	 *            to never insert it, than subclass renderXmlDecl() with an empty implementation.
	 */
	public void renderXmlDecl(final WebPage page, boolean insert)
	{
		if (insert || MarkupType.XML_MIME.equalsIgnoreCase(page.getMarkupType().getMimeType()))
		{
			final RequestCycle cycle = RequestCycle.get();

			if (insert == false)
			{
				WebRequest request = (WebRequest)cycle.getRequest();

				String accept = request.getHeader("Accept");
				insert = ((accept == null) || (accept.indexOf(MarkupType.XML_MIME) != -1));
			}

			if (insert)
			{
				WebResponse response = (WebResponse)cycle.getResponse();
				response.write("<?xml version='1.0'");
				String encoding = getRequestCycleSettings().getResponseRequestEncoding();
				if (Strings.isEmpty(encoding) == false)
				{
					response.write(" encoding='");
					response.write(encoding);
					response.write("'");
				}
				response.write(" ?>");
			}
		}
	}

