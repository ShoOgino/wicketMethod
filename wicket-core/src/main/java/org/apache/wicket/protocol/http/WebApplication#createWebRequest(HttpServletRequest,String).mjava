	/**
	 * Pre- and post- configures the {@link WebRequest} created by user override-able
	 * {@link #newWebRequest(HttpServletRequest, String)}
	 * 
	 * @param servletRequest
	 *            the current HTTP Sservlet request
	 * @param filterPath
	 *            the filter mapping read from web.xml
	 * @return a WebRequest object
	 */
	WebRequest createWebRequest(HttpServletRequest servletRequest, final String filterPath)
	{
		if (servletRequest.getCharacterEncoding() == null)
		{
			try
			{
				String wicketAjaxHeader = servletRequest.getHeader(WebRequest.HEADER_AJAX);
				if (Strings.isTrue(wicketAjaxHeader))
				{
					// WICKET-3908, WICKET-1816: Forms submitted with Ajax are always UTF-8 encoded
					servletRequest.setCharacterEncoding(CharEncoding.UTF_8);
				}
				else
				{
					String requestEncoding = getRequestCycleSettings().getResponseRequestEncoding();
					servletRequest.setCharacterEncoding(requestEncoding);
				}
			}
			catch (UnsupportedEncodingException e)
			{
				throw new WicketRuntimeException(e);
			}
		}

		if (hasFilterFactoryManager())
		{
			for (AbstractRequestWrapperFactory factory : getFilterFactoryManager())
			{
				servletRequest = factory.getWrapper(servletRequest);
			}
		}

		WebRequest webRequest = newWebRequest(servletRequest, filterPath);

		String contentType = servletRequest.getContentType();
		String method = servletRequest.getMethod();

		if (webRequest instanceof ServletWebRequest && Form.METHOD_POST.equalsIgnoreCase(method) &&
				Strings.isEmpty(contentType) == false && contentType.toLowerCase().startsWith(Form.ENCTYPE_MULTIPART_FORM_DATA))
		{
			try
			{
				return ((ServletWebRequest)webRequest).newMultipartWebRequest(
					getApplicationSettings().getDefaultMaximumUploadSize(), "externalForm");
			}
			catch (FileUploadException e)
			{
				throw new RuntimeException(e);
			}
		}

		return webRequest;
	}

