	/**
	 * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT CALL IT.
	 * 
	 * Internal initialization. First determine the deployment mode. First check the system property
	 * -Dwicket.configuration. If it does not exist check the servlet init parameter (
	 * <code>&lt;init-param&gt&lt;param-name&gt;configuration&lt;/param-name&gt;</code>). If not
	 * found check the servlet context init parameter
	 * <code>&lt;context-param&gt&lt;param-name6gt;configuration&lt;/param-name&gt;</code>). If the
	 * parameter is "development" (which is default), settings appropriate for development are set.
	 * If it's "deployment" , deployment settings are used. If development is specified and a
	 * "sourceFolder" init parameter is also set, then resources in that folder will be polled for
	 * changes.
	 */
	@Override
	protected void internalInit()
	{
		super.internalInit();

		getResourceSettings().getResourceFinders().add(
			new WebApplicationPath(getServletContext(), ""));
		getResourceSettings().getResourceFinders().add(
			new ClassPathResourceFinder(META_INF_RESOURCES));

		// Set default error pages for HTML markup
		getApplicationSettings().setPageExpiredErrorPage(PageExpiredErrorPage.class);
		getApplicationSettings().setInternalErrorPage(InternalErrorPage.class);
		getApplicationSettings().setAccessDeniedPage(AccessDeniedPage.class);

		// Add resolver for automatically resolving HTML links
		getPageSettings().addComponentResolver(new AutoLinkResolver());
		getPageSettings().addComponentResolver(new AutoLabelResolver());
		getPageSettings().addComponentResolver(new AutoLabelTextResolver());

		getResourceSettings().setFileCleaner(new FileCleaner());

		if (getConfigurationType() == RuntimeConfigurationType.DEVELOPMENT)
		{
			// Add optional sourceFolder for resources.
			String resourceFolder = getInitParameter("sourceFolder");
			if (resourceFolder != null)
			{
				getResourceSettings().getResourceFinders().add(new Path(resourceFolder));
			}
		}
		setPageRendererProvider(WebPageRenderer::new);
		setSessionStoreProvider(HttpSessionStore::new);
		setAjaxRequestTargetProvider(AjaxRequestHandler::new);

		getAjaxRequestTargetListeners().add(new AjaxEnclosureListener());
		
		getHeaderContributorListeners().add(head -> {
			getResourceSettings().getWicketCoreCSS().ifPresent(wicketCoreCSS -> {
				head.render(CssHeaderItem.forReference(wicketCoreCSS));
			});
		});

		// Configure the app.
		configure();
	}

