	/**
	 * Servlets and Filters are treated essentially the same with Wicket. This is the entry point
	 * for both of them.
	 * 
	 * @see #init(FilterConfig)
	 * 
	 * @param isServlet
	 *            True if Servlet, false of Filter
	 * @param filterConfig
	 * @throws ServletException
	 */
	public void init(final boolean isServlet, final FilterConfig filterConfig)
		throws ServletException
	{
		this.filterConfig = filterConfig;

		IWebApplicationFactory factory = getApplicationFactory();
		application = factory.createApplication(this);
		application.setName(filterConfig.getFilterName());
		application.setWicketFilter(this);

		// Allow the filterPath to tbe preset via setFilterPath()
		if (filterPath == null)
		{
			filterPath = getFilterPathFromConfig(filterConfig);
		}

		if (filterPath == null)
		{
			filterPath = getFilterPathFromWebXml(isServlet, filterConfig);
		}

		if (filterPath == null)
		{
			filterPath = getFilterPathFromAnnotation(isServlet);
		}

		if (filterPath == null)
		{
			log.warn("Unable to determine filter path from filter init-parm, web.xml, "
				+ "or servlet 3.0 annotations. Assuming user will set filter path "
				+ "manually by calling setFilterPath(String)");
		}

		final ClassLoader previousClassLoader = Thread.currentThread().getContextClassLoader();
		final ClassLoader newClassLoader = getClassLoader();

		ThreadContext.setApplication(application);
		try
		{
			if (previousClassLoader != newClassLoader)
			{
				Thread.currentThread().setContextClassLoader(newClassLoader);
			}

			application.initApplication();

			// Give the application the option to log that it is started
			application.logStarted();
		}
		finally
		{
			ThreadContext.detach();

			if (newClassLoader != previousClassLoader)
			{
				Thread.currentThread().setContextClassLoader(previousClassLoader);
			}
		}
	}

