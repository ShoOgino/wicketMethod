	@Override
	public String toString()
	{
		StringBuilder b = new StringBuilder();

		Class<?> clazz = getClass();
		while (clazz != Object.class) {
			Field[] fields = clazz.getDeclaredFields();

			for (Field field : fields)
			{
				// Ignore these fields
				if (Modifier.isStatic(field.getModifiers()) ||
					Modifier.isTransient(field.getModifiers())  ||
					field.isSynthetic())
				{
					continue;
				}

				field.setAccessible(true);

				Object value;
				try
				{
					value = field.get(this);
				}
				catch (IllegalArgumentException e)
				{
					throw new RuntimeException(e);
				}
				catch (IllegalAccessException e)
				{
					throw new RuntimeException(e);
				}

				if (field.getType().equals(Integer.TYPE))
				{
					if (Integer.valueOf(-1).equals(value))
					{
						value = null;
					}
				}

				if (value != null)
				{
					b.append(field.getName());
					b.append('=');
					b.append(value);
					b.append('\n');
				}
			}

			clazz = clazz.getSuperclass();
		}
		return b.toString();
	}

