	/**
	 * Creates a {@link Behavior} that uses the given {@code SerializableFunction function} to do
	 * something with a component's attribute.
	 *
	 * <p>
	 * Usage:<br/>
	 * <code>component.add(onAttribute("class",
	 *              currentValue -> condition(currentValue) ? "positive" : "negative"));</code>
	 * </p>
	 *
	 * @param name
	 *            the name of the attribute to manipulate
	 * @param onAttribute
	 *            the {@code SerializableFunction} that accepts the old value of the attribute and
	 *            returns a new value
	 * @return The created behavior
	 */
	public static Behavior onAttribute(String name,
		SerializableFunction<String, CharSequence> onAttribute)
	{
		Args.notEmpty(name, "name");
		Args.notNull(onAttribute, "onAttribute");

		return new Behavior()
		{
			private static final long serialVersionUID = 1L;

			@Override
			public void onComponentTag(Component component, ComponentTag tag)
			{
				if (tag.getType() != TagType.CLOSE)
				{
					String oldValue = tag.getAttribute(name);
					tag.put(name, onAttribute.apply(oldValue));
				}
			}
		};
	}

