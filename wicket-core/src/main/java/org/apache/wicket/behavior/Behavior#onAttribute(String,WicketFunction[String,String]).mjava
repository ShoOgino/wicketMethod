	/**
	 * Creates a {@link Behavior} that uses the given {@link WicketFunction function}
	 * to do something with a component's attribute.
	 *
	 * <p>
	 *     Usage:<br/>
	 *     <code>component.add(onAttribute("class", value -> condition ? "positive" : "negative"));</code>
	 * </p>
	 *
	 * @param onTagConsumer
	 *              the {@link WicketConsumer} that accepts the {@link ComponentTag}
	 * @return The created behavior
	 */
	public static Behavior onAttribute(String name, WicketFunction<String, String> onAttribute)
	{
		Args.notNull(onAttribute, "onAttribute");

		return new Behavior()
		{
			@Override
			public void onComponentTag(Component component, ComponentTag tag)
			{
				if (tag.getType() != TagType.CLOSE) {
					tag.put(name, onAttribute.apply(tag.getAttribute(name)));
				}
			}
		};
	}

