	/**
	 * Creates a <code>WicketTester</code>.
	 * 
	 * @param application
	 *            a <code>WicketTester</code> <code>WebApplication</code> object
	 * @param servletCtx
	 *            the servlet context used as backend
	 */
	public BaseWicketTester(final WebApplication application, final ServletContext servletCtx)
	{
		servletContext = servletCtx != null ? servletCtx
			: new MockServletContext(application, null);

		final FilterConfig filterConfig = new TestFilterConfig();
		WicketFilter filter = new WicketFilter()
		{
			@Override
			public FilterConfig getFilterConfig()
			{
				return filterConfig;
			}
		};

		application.setWicketFilter(filter);

		httpSession = new MockHttpSession(servletContext);

		ThreadContext.detach();

		this.application = application;

		// FIXME some tests are leaking applications by not calling destroy on them or overriding
		// teardown() without calling super, for now we work around by making each name unique
		application.setName("WicketTesterApplication-" + UUID.randomUUID());
		ThreadContext.setApplication(application);

		application.setServletContext(servletContext);

		// initialize the application
		application.initApplication();

		application.getResourceSettings().setResourcePollFrequency(getResourcePollFrequency());

		// reconfigure application for the test environment
		application.setPageRendererProvider(new LastPageRecordingPageRendererProvider(
			application.getPageRendererProvider()));
		application.setRequestCycleProvider(new TestRequestCycleProvider(
			application.getRequestCycleProvider()));
// application.setPageManagerProvider(newTestPageManagerProvider());

		// create a new session when the old one is invalidated
		application.getSessionStore().registerUnboundListener(new UnboundListener()
		{
			public void sessionUnbound(String sessionId)
			{
				newSession();
			}
		});

		// prepare session
		setupNextRequestCycle();
	}

