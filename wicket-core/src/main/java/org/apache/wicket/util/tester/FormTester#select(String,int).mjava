	/**
	 * Simulates selecting an option of a <code>FormComponent</code>. Supports
	 * <code>RadioGroup</code>, <code>CheckGroup</code>, and <code>AbstractChoice</code> family
	 * currently. The behavior is similar to interacting on the browser: For a single choice, such
	 * as <code>Radio</code> or <code>DropDownList</code>, the selection will toggle each other. For
	 * multiple choice, such as <code>Checkbox</code> or <code>ListMultipleChoice</code>, the
	 * selection will accumulate.
	 * 
	 * @param formComponentId
	 *            relative path (from <code>Form</code>) to the selectable
	 *            <code>FormComponent</code>
	 * @param index
	 *            index of the selectable option, starting from 0
	 * @return This
	 */
	public FormTester select(final String formComponentId, int index)
	{
		checkClosed();
		FormComponent<?> component = (FormComponent<?>)workingForm.get(formComponentId);

		ChoiceSelector choiceSelector = choiceSelectorFactory.create(component);
		choiceSelector.doSelect(index);

		try
		{
			Method wantOnSelectionChangedNotificationsMethod = component.getClass()
				.getDeclaredMethod("wantOnSelectionChangedNotifications");

			try
			{
				wantOnSelectionChangedNotificationsMethod.setAccessible(true);
				boolean wantOnSelectionChangedNotifications = (Boolean)wantOnSelectionChangedNotificationsMethod.invoke(component);
				if (wantOnSelectionChangedNotifications)
				{
					tester.invokeListener(component);
				}
			}
			catch (final Exception x)
			{
				throw new RuntimeException(x);
			}

		}
		catch (final NoSuchMethodException ignored)
		{
			// this form component has no auto page reload mechanism
		}

		return this;
	}

