	/**
	 * Simulates browser behavior by preserving all non-removed cookies from
	 * the previous request.
	 * A cookie is removed if the response contains a cookie with the same
	 * name, path and domain and max-age=0
	 */
	private void transferRequestCookies()
	{
		List<Cookie> lastRequestCookies = new ArrayList<Cookie>();

		// copy all cookies from the previous request
		if (lastRequest != null && lastRequest.getCookies() != null)
		{
			for (Cookie lastRequestCookie : lastRequest.getCookies())
			{
				lastRequestCookies.add(lastRequestCookie);
			}
		}

		// filter out all removed cookies
		if (lastResponse != null)
		{
			List<Cookie> cookies = lastResponse.getCookies();
			if (cookies != null)
			{
				for (Cookie cookie : cookies)
				{
					// maxAge == -1 -> means session cookie
					// maxAge == 0 -> delete the cookie
					// maxAge > 0 -> the cookie will expire after this age
					if (cookie.getMaxAge() == 0)
					{
						Iterator<Cookie> cookieIterator = lastRequestCookies.iterator();
						while (cookieIterator.hasNext())
						{
							Cookie lastRequestCookie = cookieIterator.next();
							if (Cookies.isEqual(lastRequestCookie, cookie))
							{
								cookieIterator.remove();
							}
						}
					}
					else
					{
						boolean newlyCreated = true;
						for (Cookie oldCookie : lastRequestCookies)
						{
							if (Cookies.isEqual(cookie, oldCookie))
							{
								newlyCreated = false;
								break;
							}
						}
						if (newlyCreated)
						{
							lastRequestCookies.add(cookie);
						}
					}
				}
			}
		}

		// transfer only the non-removed ones
		request.addCookies(lastRequestCookies);
	}

