	/**
	 * Simulates processing URL that invokes an {@link IRequestListener} on	a component.
	 * 
	 * After the listener is invoked the page containing the component will be rendered
	 * (with an optional redirect - depending on {@link RenderStrategy}).
	 * 
	 * @param component
	 * @param listener
	 */
	public void executeListener(final Component component)
	{
		Args.notNull(component, "component");

		// there are two ways to do this. RequestCycle could be forced to call the handler
		// directly but constructing and parsing the URL increases the chance of triggering bugs
		Page page = component.getPage();
		PageAndComponentProvider pageAndComponentProvider = new PageAndComponentProvider(page,
			component);

		IRequestHandler handler = null;
		if (page.isPageStateless() || (page.isBookmarkable() && page.wasCreatedBookmarkable()))
		{
			handler = new BookmarkableListenerRequestHandler(pageAndComponentProvider);
		}
		else
		{
			handler = new ListenerRequestHandler(pageAndComponentProvider);
		}

		Url url = urlFor(handler);
		request.setUrl(url);

		// Process the request
		processRequest(request, null);
	}

