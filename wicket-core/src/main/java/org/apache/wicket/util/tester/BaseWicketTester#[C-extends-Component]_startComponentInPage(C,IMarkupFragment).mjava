	/**
	 * Process a component. A web page will be automatically created with the {@code pageMarkup}
	 * provided. In case {@code pageMarkup} is null, the markup will be automatically created with
	 * {@link #createPageMarkup(String)}.
	 * 
	 * @param <C>
	 *            the type of the component
	 * @param component
	 *            the component to be tested
	 * @param pageMarkup
	 *            the markup for the Page that will be automatically created. May be {@code null}.
	 * @return The component processed
	 */
	public final <C extends Component> C startComponentInPage(final C component,
		IMarkupFragment pageMarkup)
	{
		Args.notNull(component, "component");

		// Create a page object and assign the markup
		Page page = createPage();
		if (page == null)
		{
			fail("The automatically created page should not be null.");
		}


		// Automatically create the page markup if not provided
		if (pageMarkup == null)
		{
			String markup = createPageMarkup(component.getId());
			if (markup == null)
			{
				fail("The markup for the automatically created page should not be null.");
			}
			markup = "<html><head></head><body>" + markup + "</body></html>";

			// set a ContainerInfo to be able to use HtmlHeaderContainer so header contribution
			// still work. WICKET-3700
			ContainerInfo containerInfo = Mockito.mock(ContainerInfo.class);
			Mockito.when(containerInfo.getContainerClass()).thenReturn(page.getClass());
			MarkupResourceStream markupResourceStream = new MarkupResourceStream(
				new StringResourceStream(markup), containerInfo, page.getClass());
			try
			{
				pageMarkup = new MarkupParser(markupResourceStream).parse();
			}
			catch (Exception e)
			{
				fail("Error while parsing the markup for the autogenerated page: " + e.getMessage());
			}
		}
		page.setMarkup(pageMarkup);

		// Add the child component
		page.add(component);

		// Process the page
		startPage(page);

		// Remember the "root" component processes and return it
		startComponent = component;

		return component;
	}

