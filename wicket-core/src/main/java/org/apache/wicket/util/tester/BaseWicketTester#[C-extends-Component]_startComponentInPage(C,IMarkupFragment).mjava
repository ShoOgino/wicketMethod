	/**
	 * Process a component. A web page will be automatically created with the {@code pageMarkup}
	 * provided. In case {@code pageMarkup} is null, the markup will be automatically created with
	 * {@link #createPageMarkup(String)}.
	 * <p>
	 * <strong>Note</strong>: the component id is set by the user. To reach any of its children use
	 * this id + their relative path to the component itself. For example if the started component
	 * has id <em>compId</em> and a Link child component component with id "link" then after
	 * starting the component you can click it with: <code>tester.clickLink("compId:link")</code>
	 * </p>
	 *
	 * @param <C>
	 *            the type of the component
	 * @param component
	 *            the component to be tested
	 * @param pageMarkup
	 *            the markup for the Page that will be automatically created. May be {@code null}.
	 * @return The component processed
	 */
	public final <C extends Component> C startComponentInPage(final C component,
		IMarkupFragment pageMarkup)
	{
		Args.notNull(component, "component");

		// Create a page object and assign the markup
		Page page = createPage();
		if (page == null)
		{
			fail("The automatically created page should not be null.");
		}

		// Automatically create the page markup if not provided
		if (pageMarkup == null)
		{
			String markup = createPageMarkup(component.getId());
			if (markup == null)
			{
				fail("The markup for the automatically created page should not be null.");
			}

			try
			{
				// set a ContainerInfo to be able to use HtmlHeaderContainer so header contribution
				// still work. WICKET-3700
				ContainerInfo containerInfo = new ContainerInfo(page);
				MarkupResourceStream markupResourceStream = new MarkupResourceStream(
					new StringResourceStream(markup), containerInfo, page.getClass());

				MarkupParser markupParser = getApplication().getMarkupSettings()
					.getMarkupFactory()
					.newMarkupParser(markupResourceStream);
				pageMarkup = markupParser.parse();
			}
			catch (Exception e)
			{
				String errorMessage = "Error while parsing the markup for the autogenerated page: " +
					e.getMessage();
				log.error(errorMessage, e);
				fail(errorMessage);
			}
		}

		if (page instanceof StartComponentInPage)
		{
			((StartComponentInPage)page).setPageMarkup(pageMarkup);
		}
		else
		{
			page.setMarkup(pageMarkup);
		}

		// Add the child component
		page.add(component);

		// Process the page
		startPage(page);

		componentInPage = new ComponentInPage();
		componentInPage.component = component;
		
		return component;
	}

