	/**
	 * Static factory method for creating a <code>TagTester</code> based on a tag found by an
	 * attribute with a specific value. Please note that it will return the first tag which matches
	 * the criteria. It's therefore good for attributes such as "id" or "wicket:id", but only if
	 * "wicket:id" is unique in the specified markup.
	 * 
	 * @param markup
	 *            the markup to look for the tag to create the <code>TagTester</code> from
	 * @param attribute
	 *            the attribute which should be on the tag in the markup
	 * @param value
	 *            the value which the attribute must have
	 * @return the <code>TagTester</code> which matches the tag in the markup, that has the given
	 *         value on the given attribute
	 */
	public static TagTester createTagByAttribute(String markup, String attribute, String value)
	{
		TagTester tester = null;

		if (Strings.isEmpty(markup) == false && Strings.isEmpty(attribute) == false &&
			Strings.isEmpty(value) == false)
		{
			try
			{
				// remove the CDATA and
				// the id attribute of the component because it is often the same as the element's id
				markup = AJAX_COMPONENT_CDATA_OPEN.matcher(markup).replaceAll("<component>");
				markup = AJAX_COMPONENT_CDATA_CLOSE.matcher(markup).replaceAll("</component>");

				XmlPullParser parser = new XmlPullParser();
				parser.parse(markup);

				XmlTag elm;
				XmlTag openTag = null;
				XmlTag closeTag = null;
				int level = 0;
				while ((elm = parser.nextTag()) != null && closeTag == null)
				{
					XmlTag xmlTag = elm;

					if (openTag == null)
					{
						IValueMap attributeMap = xmlTag.getAttributes();

						for (Map.Entry<String, Object> entry : attributeMap.entrySet())
						{
							String attr = entry.getKey();
							if (attr.equals(attribute) && value.equals(entry.getValue()))
							{
								if (xmlTag.isOpen())
								{
									openTag = xmlTag;
								}
								else if (xmlTag.isOpenClose())
								{
									openTag = xmlTag;
									closeTag = xmlTag;
								}
							}
						}
					}
					else
					{
						if (xmlTag.isOpen() && xmlTag.getName().equals(openTag.getName()))
						{
							level++;
						}

						if (xmlTag.isClose())
						{
							if (xmlTag.getName().equals(openTag.getName()))
							{
								if (level == 0)
								{
									closeTag = xmlTag;
									closeTag.setOpenTag(openTag);
								}
								else
								{
									level--;
								}
							}
						}
					}
				}

				if (openTag != null && closeTag != null)
				{
					tester = new TagTester(parser, openTag, closeTag);
				}
			}
			catch (Exception e)
			{
				throw new WicketRuntimeException(e);
			}
		}

		return tester;
	}

