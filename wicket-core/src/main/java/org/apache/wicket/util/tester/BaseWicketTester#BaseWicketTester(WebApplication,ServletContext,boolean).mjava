	/**
	 * Creates a <code>WicketTester</code>.
	 *
	 * @param application
	 *            a <code>WicketTester</code> <code>WebApplication</code> object
	 * @param servletCtx
	 *            the servlet context used as backend
	 * @param init
	 *            force the application to be initialized (default = true)
	 */
	public BaseWicketTester(final WebApplication application, final ServletContext servletCtx, boolean init)
	{
		if (!init)
		{
			Args.notNull(application, "application");
		}

		servletContext = servletCtx != null ? servletCtx
			// If it's provided from the container it's not necessary to mock.
			: !init && application.getServletContext() != null ? application.getServletContext()
			: new MockServletContext(application, null);

		// If using Arquillian and it's configured in a web.xml it'll be provided. If not, mock it.
		if(application.getWicketFilter() == null)
		{
			final FilterConfig filterConfig = new TestFilterConfig();
			WicketFilter filter = new WicketFilter()
			{
				@Override
				public FilterConfig getFilterConfig()
				{
					return filterConfig;
				}
			};
			application.setWicketFilter(filter);
		}

		httpSession = new MockHttpSession(servletContext);

		ThreadContext.detach();

		this.application = application;

		ThreadContext.setApplication(application);

		if (init)
		{
			if (application.getName() == null)
			{
				application.setName("WicketTesterApplication-" + UUID.randomUUID());
			}

			application.setServletContext(servletContext);
			// initialize the application
			application.initApplication();
		}

		// We don't expect any changes during testing. In addition we avoid creating
		// ModificationWatcher threads tests.
		application.getResourceSettings().setResourcePollFrequency(getResourcePollFrequency());

		// reconfigure application for the test environment
		application.setPageRendererProvider(new LastPageRecordingPageRendererProvider(
			application.getPageRendererProvider()));
		application.setRequestCycleProvider(new TestRequestCycleProvider(
			application.getRequestCycleProvider()));

		// set a feedback message filter that will not remove any messages
		originalFeedbackMessageCleanupFilter = application.getApplicationSettings()
			.getFeedbackMessageCleanupFilter();
		application.getApplicationSettings().setFeedbackMessageCleanupFilter(
			IFeedbackMessageFilter.NONE);
		IPageManagerProvider pageManagerProvider = newTestPageManagerProvider();
		if (pageManagerProvider != null)
		{
			application.setPageManagerProvider(pageManagerProvider);
		}

		// create a new session when the old one is invalidated
		application.getSessionStore().registerUnboundListener(sessionId -> newSession());

		// prepare session
		setupNextRequestCycle();
	}

