	/**
	 * Gets request parameter values for the form component that represents its current model value
	 * 
	 * @param formComponent
	 * @return array containing parameter values
	 */
	public static String[] getInputValue(FormComponent<?> formComponent)
	{
		// do nothing for invisible or disabled component -- the browser would not send any
		// parameter for a disabled component
		if (!(formComponent.isVisibleInHierarchy() && formComponent.isEnabledInHierarchy()))
		{
			return new String[] { };
		}

		// if component is text field and do not have exist value, fill
		// blank String if required
		if (formComponent instanceof AbstractTextComponent)
		{
			return new String[] { getFormComponentValue(formComponent) };
		}
		else if ((formComponent instanceof DropDownChoice) ||
			(formComponent instanceof RadioChoice) || (formComponent instanceof CheckBox))
		{
			return new String[] { getFormComponentValue(formComponent) };
		}
		else if (formComponent instanceof ListMultipleChoice)
		{
			return getFormComponentValue(formComponent).split(FormComponent.VALUE_SEPARATOR);
		}
		else if (formComponent instanceof CheckGroup)
		{
			final Collection<?> checkGroupValues = (Collection<?>)formComponent.getDefaultModelObject();
			final List<String> result = new ArrayList<String>();
			formComponent.visitChildren(Check.class, new IVisitor<Component, Void>()
			{
				@Override
				public void component(final Component component, final IVisit<Void> visit)
				{
					if (checkGroupValues.contains(component.getDefaultModelObject()))
					{
						result.add(getFormComponentValue((Check<?>)component));
					}
				}
			});
			return result.toArray(new String[result.size()]);
		}
		else if (formComponent instanceof RadioGroup)
		{
			// TODO 1.5: see if all these transformations can be factored out into
			// checkgroup/radiogroup by them implementing some sort of interface {
			// getValue(); } otherwise all these implementation details leak into the tester
			final Object value = formComponent.getDefaultModelObject();
			String result = null;
			if (value != null)
			{
				result = formComponent.visitChildren(Radio.class, new IVisitor<Component, String>()
				{
					@Override
					public void component(final Component component, final IVisit<String> visit)
					{
						if (value.equals(component.getDefaultModelObject()))
						{
							visit.stop(getFormComponentValue((Radio<?>)component));
						}
						else
						{
							visit.dontGoDeeper();
						}
					}
				});
			}
			if (result == null)
			{
				return new String[] { };
			}
			else
			{
				return new String[] { result };
			}
		}
		return new String[] { };
	}

