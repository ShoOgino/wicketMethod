	/**
	 * Process a component. A web page will be automatically created with the {@code pageMarkup}
	 * provided. In case pageMarkup is null, the markup will be automatically created with
	 * {@link #createPageMarkup(String)}.
	 * <p>
	 * <strong>Note</strong>: the instantiated component will have an auto-generated id. To reach
	 * any of its children use their relative path to the component itself. For example if the
	 * started component has a child a Link component with id "link" then after starting the
	 * component you can click it with: <code>tester.clickLink("link")</code>
	 * </p>
	 * 
	 * @param <C>
	 *            the type of the component
	 * 
	 * @param componentClass
	 *            the class of the component to be tested
	 * @param pageMarkup
	 *            the markup for the Page that will be automatically created. May be {@code null}.
	 * @return The component processed
	 */
	public final <C extends Component> C startComponentInPage(final Class<C> componentClass,
		final IMarkupFragment pageMarkup)
	{
		Args.notNull(componentClass, "componentClass");

		// Create the component instance from the class
		C comp = null;
		try
		{
			Constructor<C> c = componentClass.getConstructor(String.class);
			comp = c.newInstance(ComponentInPage.ID);
			componentInPage = new ComponentInPage();
			componentInPage.component = comp;
			componentInPage.isInstantiated = true;
		}
		catch (Exception e)
		{
			log.error(e.getMessage(), e);
			fail(String.format("Cannot instantiate component with type '%s' because of '%s'",
				componentClass.getName(), e.getMessage()));
		}

		// process the component
		return startComponentInPage(comp, pageMarkup);
	}

