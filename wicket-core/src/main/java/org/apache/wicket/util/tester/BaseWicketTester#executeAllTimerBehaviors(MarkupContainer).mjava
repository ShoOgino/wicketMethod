	/**
	 * Simulates the firing of all ajax timer behaviors on the page
	 * 
	 * @param container
	 */
	public void executeAllTimerBehaviors(final MarkupContainer container)
	{
		container.visitChildren(MarkupContainer.class, new IVisitor<MarkupContainer, Void>()
		{
			@Override
			public void component(final MarkupContainer component, final IVisit<Void> visit)
			{
				// get the AbstractAjaxBehaviour which is responsible for
				// getting the contents of the lazy panel
				List<AbstractAjaxTimerBehavior> behaviors = component.getBehaviors(AbstractAjaxTimerBehavior.class);
				for (Behavior b : behaviors)
				{
					checkUsability(component, true);

					log.debug("Triggering AjaxSelfUpdatingTimerBehavior: " +
						component.getClassRelativePath());
					AbstractAjaxTimerBehavior timer = (AbstractAjaxTimerBehavior)b;
					if (!timer.isStopped())
					{
						executeBehavior(timer);
					}
				}
			}
		});
	}

