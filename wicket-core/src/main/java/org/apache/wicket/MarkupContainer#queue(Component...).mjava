	/**
	 * Queues a component to be dequeued later. The advantage of this method over the
	 * {@link #add(Component...)} method is that the component does not have to be added to its
	 * direct parent, only to a parent upstream; it will be dequeued into the correct parent using
	 * the hierarchy defined in the markup. This allows the component hiearchy to be maintined only
	 * in markup instead of in markup and in java code; affording designers and developers more
	 * freedom when moving components in markup.
	 * 
	 * @param components
	 * @return
	 */
	public MarkupContainer queue(Component... components)
	{
		if (queue == null)
		{
			queue = new ComponentQueue();
		}
		queue.add(components);

		MarkupContainer region = null;
		Page page = null;

		MarkupContainer cursor = this;

		while (cursor != null)
		{
			if (region == null && cursor instanceof IQueueRegion)
			{
				region = cursor;
			}
			if (cursor instanceof Page)
			{
				page = (Page)cursor;
			}
			cursor = cursor.getParent();
		}

		if (page != null)
		{
			if (!region.getRequestFlag(RFLAG_CONTAINER_DEQUEING))
			{
				region.dequeue();
			}
		}

		return this;
	}

