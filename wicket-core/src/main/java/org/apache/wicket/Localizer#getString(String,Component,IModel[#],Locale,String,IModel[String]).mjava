	/**
	 * Get the localized string using all of the supplied parameters. This method is left public to
	 * allow developers full control over string resource loading. However, it is recommended that
	 * one of the other convenience methods in the class are used as they handle all of the work
	 * related to obtaining the current user locale and style information.
	 *
	 * @param key
	 *            The key to obtain the resource for
	 * @param component
	 *            The component to get the resource for (optional)
	 * @param model
	 *            The model to use for substitutions in the strings (optional)
	 * @param locale
	 *            If != null, it'll supersede the component's locale
	 * @param style
	 *            If != null, it'll supersede the component's style
	 * @param defaultValue
	 *            The default value (optional)
	 * @return The string resource
	 * @throws MissingResourceException
	 *             If resource not found and configuration dictates that exception should be thrown
	 */
	public String getString(final String key, final Component component, final IModel<?> model,
	                        final Locale locale, final String style, final IModel<String> defaultValue)
			throws MissingResourceException
	{
		final ResourceSettings resourceSettings = Application.get().getResourceSettings();

		String value = getStringIgnoreSettings(key, component, model, locale, style, null);

		// If a property value has been found, or a default value was given,
		// than replace the placeholder and we are done
		if (value != null)
		{
			return value;
		}
		else if (defaultValue != null && resourceSettings.getUseDefaultOnMissingResource())
		{
			// Resource not found, so handle missing resources based on
			// application configuration and try the default value
			value = defaultValue.getObject();

			if (value != null)
			{
				// If a property value has been found, or a default value was given,
				// then replace the placeholder and we are done
				return substitutePropertyExpressions(component, value, model);
			}
		}

		if (resourceSettings.getThrowExceptionOnMissingResource())
		{
			AppendingStringBuffer message = new AppendingStringBuffer("Unable to find property: '");
			message.append(key);
			message.append('\'');

			if (component != null)
			{
				message.append(" for component: ");
				message.append(component.getPageRelativePath());
				message.append(" [class=").append(component.getClass().getName()).append(']');
			}
			message.append(". Locale: ").append(locale).append(", style: ").append(style);

			throw new MissingResourceException(message.toString(), (component != null
				? component.getClass().getName() : ""), key);
		}

		return "[Warning: Property for '" + key + "' not found]";
	}

