	/**
	 * Make a prettyprinted JSON text of this JSONArray. Warning: This method assumes that the data
	 * structure is acyclical.
	 * 
	 * @param indentFactor
	 *            The number of spaces to add to each level of indentation.
	 * @param indent
	 *            The indention of the top level.
	 * @return a printable, displayable, transmittable representation of the array.
	 * @throws JSONException
	 */
	String toString(int indentFactor, int indent) throws JSONException
	{
		int len = length();
		if (len == 0)
		{
			return "[]";
		}
		int i;
		StringBuffer sb = new StringBuffer("[");
		if (len == 1)
		{
			sb.append(JSONObject.valueToString(myArrayList.get(0), indentFactor, indent));
		}
		else
		{
			int newindent = indent + indentFactor;
			sb.append('\n');
			for (i = 0; i < len; i += 1)
			{
				if (i > 0)
				{
					sb.append(",\n");
				}
				for (int j = 0; j < newindent; j += 1)
				{
					sb.append(' ');
				}
				sb.append(JSONObject.valueToString(myArrayList.get(i), indentFactor, newindent));
			}
			sb.append('\n');
			for (i = 0; i < indent; i += 1)
			{
				sb.append(' ');
			}
		}
		sb.append(']');
		return sb.toString();
	}

