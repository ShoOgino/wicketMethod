	/**
	 * Collects the response body (without the headers) so that it can be pre-processed before
	 * written down to the original response.
	 *
	 * @param bodyResponse
	 *            the buffering response
	 * @param encoding
	 *            the encoding that should be used to encode the body
	 */
	private void constructResponseBody(final Response bodyResponse, final String encoding)
	{
		bodyResponse.write("<?xml version=\"1.0\" encoding=\"");
		bodyResponse.write(encoding);
		bodyResponse.write("\"?>");
		bodyResponse.write("<ajax-response>");

		// invoke onbeforerespond event on listeners
		fireOnBeforeRespondListeners();

		// process added components
		respondComponents(bodyResponse);

		fireOnAfterRespondListeners(bodyResponse);

		// queue up prepend javascripts. unlike other steps these are executed out of order so that
		// components can contribute them from inside their onbeforerender methods.
		Iterator<CharSequence> it = prependJavaScripts.iterator();
		while (it.hasNext())
		{
			CharSequence js = it.next();
			respondPriorityInvocation(bodyResponse, js);
		}


		// execute the dom ready javascripts as first javascripts
		// after component replacement
		it = domReadyJavaScripts.iterator();
		while (it.hasNext())
		{
			CharSequence js = it.next();
			respondInvocation(bodyResponse, js);
		}
		it = appendJavaScripts.iterator();
		while (it.hasNext())
		{
			CharSequence js = it.next();
			respondInvocation(bodyResponse, js);
		}

		bodyResponse.write("</ajax-response>");
	}

