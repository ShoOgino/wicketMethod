	/**
	 * Make a prettyprinted JSON text of this JSONObject.
	 * <p>
	 * Warning: This method assumes that the data structure is acyclical.
	 * 
	 * @param indentFactor
	 *            The number of spaces to add to each level of indentation.
	 * @param indent
	 *            The indentation of the top level.
	 * @return a printable, displayable, transmittable representation of the object, beginning with
	 *         <code>{</code>&nbsp;<small>(left brace)</small> and ending with <code>}</code>
	 *         &nbsp;<small>(right brace)</small>.
	 * @throws JSONException
	 *             If the object contains an invalid number.
	 */
	String toString(int indentFactor, int indent) throws JSONException
	{
		int i;
		int length = length();
		if (length == 0)
		{
			return "{}";
		}
		Iterator keys = keys();
		int newindent = indent + indentFactor;
		Object object;
		StringBuffer sb = new StringBuffer("{");
		if (length == 1)
		{
			object = keys.next();
			sb.append(quote(object.toString()));
			sb.append(": ");
			sb.append(valueToString(map.get(object), indentFactor, indent));
		}
		else
		{
			while (keys.hasNext())
			{
				object = keys.next();
				if (sb.length() > 1)
				{
					sb.append(",\n");
				}
				else
				{
					sb.append('\n');
				}
				for (i = 0; i < newindent; i += 1)
				{
					sb.append(' ');
				}
				sb.append(quote(object.toString()));
				sb.append(": ");
				sb.append(valueToString(map.get(object), indentFactor, newindent));
			}
			if (sb.length() > 1)
			{
				sb.append('\n');
				for (i = 0; i < indent; i += 1)
				{
					sb.append(' ');
				}
			}
		}
		sb.append('}');
		return sb.toString();
	}

