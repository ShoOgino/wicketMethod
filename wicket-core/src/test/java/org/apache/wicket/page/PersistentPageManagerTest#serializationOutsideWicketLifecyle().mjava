	/**
	 * WICKET-3470
	 * 
	 * Tests that a page already put in the session (in SessionEntry) can be serialized and later
	 * deserialized without the need of {@link IPageStore}
	 * 
	 * @throws ClassNotFoundException
	 * @throws IOException
	 */
	@Test
	void serializationOutsideWicketLifecyle() throws IOException, ClassNotFoundException
	{
		// make sure no leaked threadlocals are present
		ThreadContext.detach();

		// create IPageManager (with IPageStore) and store a page instance
		final AtomicReference<Object> sessionData = new AtomicReference<Object>(null);
		
		IPageManager pageManager = createPageManager(APP_NAME, sessionData);

		// add a page
		TestPage toSerializePage = new TestPage();
		pageManager.touchPage(toSerializePage);
		pageManager.detach();

		// get the stored SessionEntry
		assertNotNull(sessionData.get());

		// destroy the manager and the store
		pageManager.destroy();

		// simulate persisting of the http sessions initiated by the web container
		byte[] serializedSessionData = new JavaSerializer(APP_NAME).serialize(sessionData.get());
		assertNotNull(serializedSessionData, "Wicket needs to be able to serialize the session entry");

		// WicketFilter is not initialized so there is no Application available yet
		assertFalse(Application.exists(), "Worker thread should be unaware of Wicket application");

		// simulate loading of the persisted http session initiated by the web container
		// when starting an application
		sessionData.set(new JavaSerializer(APP_NAME).deserialize(serializedSessionData));

		// without available IPageStore the read SessionEntry holds
		// the IManageablePage itself, not SerializedPage
		assertNotNull(sessionData.get(), "Wicket needs to be able to deserialize the session entry regardless the application availability");

		// provide new IPageStore which will read IManageablePage's or SerializedPage's
		// from the SessionEntry's
		IPageManager newPageManager = createPageManager(APP_NAME, sessionData);

		TestPage deserializedPage = (TestPage)newPageManager.getPage(toSerializePage.getPageId());
		assertNotNull(deserializedPage);
		assertEquals(toSerializePage.instanceID, deserializedPage.instanceID);

		newPageManager.destroy();
	}

