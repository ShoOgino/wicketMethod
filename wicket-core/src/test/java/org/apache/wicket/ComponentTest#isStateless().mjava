	/**
	 * https://issues.apache.org/jira/browse/WICKET-4468
	 *
	 * Verifies that a stateful component can pretend to be stateless if both conditions are
	 * fulfilled:
	 * <ol>
	 *     <li>it is either invisible or disabled (or both)</li>
	 *     <li>it cannot call any listener interface method while invisible/disabled</li>
	 * </ol>
	 */
	@Test
	void isStateless()
	{
		Behavior statefulBehavior = new Behavior()
		{
			@Override
			public boolean getStatelessHint(Component component)
			{
				return false;
			}
		};

		WebComponent component = new WebComponent("someId");

		// by default every component is stateless
		assertTrue(component.isStateless());

		// make the component stateful
		component.add(statefulBehavior);
		assertFalse(component.isStateless());

		// invisible component cannot be requested by default so it
		// can pretend being stateless
		component.setVisible(false);
		assertTrue(component.isStateless());

		// same for disabled component
		component.setVisible(true).setEnabled(false);
		assertTrue(component.isStateless());

		// make the component such that it can call listener interface
		// methods no matter whether it is visible or enabled
		component = new WebComponent("someId") {
			@Override
			public boolean canCallListener()
			{
				return true;
			}
		};
		component.add(statefulBehavior);
		component.setVisible(false);
		assertFalse(component.isStateless());


		// do the same set of tests on a component that is stateful "by itself"
		// rather than from a behavior
		Link<Void> link = new Link<Void>("someId") {
			@Override
			public void onClick()
			{
			}
		};
        
		// Links are stateful by default
		assertFalse(link.isStateless());
        
		//make the link invisible
		link.setVisible(false);

		// invisible link cannot be requested by default so it
		// can pretend being stateless
		assertTrue(link.isStateless());

		// same for disabled link
		link.setVisible(true).setEnabled(false);
		assertTrue(link.isStateless());
        
		// make the link such that it can call listener interface
		// methods no matter whether it is visible or enabled
		link = new Link<Void>("someId") {

		    @Override
		    public boolean canCallListener() {
		    	return true;
		    }

		    @Override
		    public void onClick() {
		    }
		};

		link.setVisible(false);
		assertFalse(link.isStateless());
	}

