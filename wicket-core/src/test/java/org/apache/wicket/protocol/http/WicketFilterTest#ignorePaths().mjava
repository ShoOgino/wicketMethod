	/**
	 * <a href="https://issues.apache.org/jira/browse/WICKET-3750">WICKET-3750</a>
	 * 
	 * @throws Exception
	 */
	@Test
	public void ignorePaths() throws Exception
	{
		application = spy(new MockApplication());
		WicketFilter filter = new WicketFilter();
		filter.init(new FilterTestingConfig());

		HttpServletRequest request = mock(HttpServletRequest.class);
		when(request.getLocale()).thenReturn(new Locale("bg", "BG"));
		when(request.getRequestURI()).thenReturn("/contextPath/js/bla.js")
			.thenReturn("/contextPath/css/bla.css")
			.thenReturn("/contextPath/images/bla.img")
			.thenReturn("/contextPath/servlet/wicket/bookmarkable/" + DummyHomePage.class.getName());
		when(request.getContextPath()).thenReturn("/contextPath");
		when(request.getMethod()).thenReturn("POST");
		HttpServletResponse response = mock(HttpServletResponse.class);
		when(response.encodeRedirectURL(Matchers.anyString())).thenAnswer(new Answer<String>()
		{
			@Override
			public String answer(InvocationOnMock invocation) throws Throwable
			{
				return (String)invocation.getArguments()[0];
			}
		});

		// execute 3 requests - 1 for bla.js, 1 for bla.css and 1 for bla.img
		for (int i = 0; i < 3; i++)
		{
			boolean isProcessed = filter.processRequest(request, response);
			assertFalse(isProcessed);
			verify(application, Mockito.never()).newWebRequest(Matchers.eq(request),
				Matchers.anyString());
			verify(application, Mockito.never()).newWebResponse(Matchers.any(WebRequest.class),
				Matchers.eq(response));
		}

		// execute the request to /something/real
		boolean isProcessed = filter.processRequest(request, response);
		assertTrue(isProcessed);
		verify(application).newWebRequest(Matchers.eq(request), Matchers.anyString());
		verify(application).newWebResponse(Matchers.any(WebRequest.class), Matchers.eq(response));
	}

