	private List<Metrics> runTest(int sessions, int pages, long writeMillis, long readMillis,
	                              int asyncPageStoreCapacity) throws InterruptedException
	{

		List<Metrics> results = new ArrayList<>();

		final CountDownLatch lock = new CountDownLatch(pages * sessions);

		IPageStore pageStore = new InMemoryPageStore("test", Integer.MAX_VALUE) {
			@Override
			public void addPage(IPageContext context, IManageablePage page)
			{
				DummyPage dummyPage = (DummyPage) page;

				super.addPage(context, dummyPage.clone());
				
				try
				{
					Thread.sleep(dummyPage.writeMillis);
				}
				catch (InterruptedException e)
				{
					throw new RuntimeException(e);
				}
				
				lock.countDown();
			}
			
			@Override
			public IManageablePage getPage(IPageContext context, int id) {
				DummyPage dummyPage = (DummyPage) super.getPage(context, id);
				
				try
				{
					Thread.sleep(dummyPage.readMillis);
				}
				catch (InterruptedException e)
				{
					throw new RuntimeException(e);
				}
				
				return dummyPage;
			}
		};

		IPageStore asyncPageStore = new AsynchronousPageStore(pageStore, asyncPageStoreCapacity);

		for (int pageId = 1; pageId <= pages; pageId++)
		{
			for (int i = 1; i <= sessions; i++)
			{
				String sessionId = String.valueOf(i);
				IPageContext context = new MockPageContext(sessionId);
				Metrics metrics = new Metrics();

				DummyPage page = new DummyPage(pageId, around(writeMillis), around(readMillis),
						sessionId);
				final long startStoring = System.currentTimeMillis();
				asyncPageStore.addPage(context, page);
				metrics.storedPage = page;
				metrics.storingMillis = System.currentTimeMillis() - startStoring;

				final long startRestoring = System.currentTimeMillis();
				metrics.restoredPage = DummyPage.class
						.cast(asyncPageStore.getPage(context, pageId));
				metrics.restoringMillis = System.currentTimeMillis() - startRestoring;

				results.add(metrics);
			}
		}

		lock.await(pages * sessions * (writeMillis + readMillis), TimeUnit.MILLISECONDS);

		pageStore.destroy();
		
		return results;
	}

