	private List<Metrics> runTest(int sessions, int pages, long writeMillis, long readMillis,
		int asyncPageStoreCapacity) throws InterruptedException
	{

		List<Metrics> results = new ArrayList<>();

		final CountDownLatch lock = new CountDownLatch(pages * sessions);

		ISerializer serializer = new DeflatedJavaSerializer("applicationKey");
		// ISerializer serializer = new DummySerializer();
		IDataStore dataStore = new DiskDataStore("applicationName", new File("./target"),
			Bytes.bytes(10000l));
		IPageStore pageStore = new DefaultPageStore(serializer, dataStore, 0)
		{
			// IPageStore pageStore = new DummyPageStore(new
			// File("target/store")) {

			@Override
			public void storePage(String sessionId, IManageablePage page)
			{

				super.storePage(sessionId, page);

				lock.countDown();
			}
		};

		IPageStore asyncPageStore = new AsyncPageStore(pageStore, asyncPageStoreCapacity);

		Stopwatch stopwatch = Stopwatch.createUnstarted();

		for (int pageId = 1; pageId <= pages; pageId++)
		{
			for (int sessionId = 1; sessionId <= sessions; sessionId++)
			{
				String session = String.valueOf(sessionId);
				Metrics metrics = new Metrics();

				stopwatch.reset();
				DummyPage page = new DummyPage(pageId, around(writeMillis), around(readMillis),
					session);
				stopwatch.start();
				asyncPageStore.storePage(session, page);
				metrics.storedPage = page;
				metrics.storingMillis = stopwatch.elapsed(TimeUnit.MILLISECONDS);

				stopwatch.reset();
				stopwatch.start();
				metrics.restoredPage = DummyPage.class
					.cast(asyncPageStore.getPage(session, pageId));
				metrics.restoringMillis = stopwatch.elapsed(TimeUnit.MILLISECONDS);

				results.add(metrics);
			}
		}

		lock.await(pages * sessions * (writeMillis + readMillis), TimeUnit.MILLISECONDS);

		return results;
	}

