	/***/
	@Test
	public void evict()
	{
		PageTable pageTable = new PageTable();

		long sizeOfEmptyPageTable = WicketObjects.sizeof(pageTable);

		// evict to empty page table
		MemorySizeEvictionStrategy strategy = new MemorySizeEvictionStrategy(
			Bytes.bytes(sizeOfEmptyPageTable));
		pageTable.storePage(PAGE1.length, PAGE1);
		assertEquals(1, pageTable.size());
		strategy.evict(pageTable);
		assertEquals(0, pageTable.size());
		long currentSize = WicketObjects.sizeof(pageTable);
		assertTrue("Current size: |" + currentSize + "|, strategy size: |" + sizeOfEmptyPageTable +
			"|", currentSize <= sizeOfEmptyPageTable);

		// evict to page table with size: empty + PAGE2
		pageTable.storePage(PAGE2.length, PAGE2);
		long sizeOfWithPage2 = WicketObjects.sizeof(pageTable);
		strategy = new MemorySizeEvictionStrategy(Bytes.bytes(sizeOfWithPage2));
		pageTable.storePage(PAGE1.length, PAGE1);
		assertEquals(2, pageTable.size());
		strategy.evict(pageTable);
		// the following assertion depends on the fact that PAGE2 has
		// bigger size than PAGE1
		assertEquals(1, pageTable.size());
		currentSize = WicketObjects.sizeof(pageTable);
		assertTrue("Current size: |" + currentSize + "|, strategy size: |" + sizeOfWithPage2 + "|",
			currentSize <= sizeOfWithPage2);
	}

