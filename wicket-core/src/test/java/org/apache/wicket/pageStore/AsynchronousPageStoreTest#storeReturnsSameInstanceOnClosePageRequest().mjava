	/**
	 * Store returns the same page instance from queue when there is a close request for it back
	 * again.
	 *
	 * @throws InterruptedException
	 */
	@Test
	void storeReturnsSameInstanceOnClosePageRequest() throws InterruptedException
	{
		final Semaphore semaphore = new Semaphore(0);
		
		IPageStore store = new NoopPageStore() {
			
			@Override
			public synchronized void addPage(IPageContext context, IManageablePage page)
			{
				try
				{
					// wait until the page was get below
					semaphore.acquire();
				}
				catch (InterruptedException e)
				{
				}
				
				super.addPage(context, page);
			}
			
			@Override
			public IManageablePage getPage(IPageContext context, int id)
			{
				fail();
				return null;
			}
		};

		IPageStore asyncPageStore = new AsynchronousPageStore(store, 100);

		int pageId = 0;
		
		String sessionId = "sessionId";
		
		IPageContext context = new MockPageContext(sessionId);

		SerializedPage page = new SerializedPage(pageId, "", new byte[0]);
		asyncPageStore.addPage(context, page);

		IManageablePage pageBack = asyncPageStore.getPage(context, pageId);

		semaphore.release();

		assertEquals(page, pageBack);
		
		store.destroy();
	}

