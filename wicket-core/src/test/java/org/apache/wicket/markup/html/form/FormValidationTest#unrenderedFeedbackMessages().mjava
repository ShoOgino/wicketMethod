	/**
	 * Tests validation of form components when not all errors are rendered (maybe a missing
	 * feedback panel, maybe a feedback panel with a filter).
	 * 
	 * Validation status depends on whether or not a form component has error messages, here we test
	 * submission roundtrip in a usecase where not all error messages are rendered and cleared at
	 * the end of the request.
	 * 
	 * Even though a form component has error messages not rendered from the previous submission
	 * they should not block the component from re-validating.
	 */
	@Test
	public void unrenderedFeedbackMessages()
	{
		// start the page

		TestPage page = new TestPage();
		scope.getTester().startPage(page);

		// submit the form without filling out any values

		FormTester formTester = scope.getTester().newFormTester(page.form.getPageRelativePath());
		formTester.setClearFeedbackMessagesBeforeSubmit(false);
		formTester.submit();

		// the first required form component should fail and so should the form

		assertTrue(page.form.hasError());
		assertFalse(page.field1.isValid());

		// fill out a value and submit again

		formTester = scope.getTester().newFormTester(page.form.getPageRelativePath());
		formTester.setValue(page.field1, "hi");
		formTester.setClearFeedbackMessagesBeforeSubmit(false);
		formTester.submit();

		// now the form and the form component should be valid

		assertFalse(page.form.hasError());
		assertTrue(page.field1.isValid());
	}

