	/**
	 * @param enableInputField
	 * @param newPageId
	 */
	@SuppressWarnings("serial")
	public HomePage(boolean enableInputField, int newPageId)
	{
		// Add the simplest type of label
		add(new Label("message",
			"If you see this message wicket is properly configured and running"));

		Form<Void> form = new Form<Void>("form")
		{

		};
		add(form);
		form.add(new TextField<>("textfield", new Model<>()));
		form.add(new Button("submit"));

		final WebMarkupContainer listViewContainer = new WebMarkupContainer("listViewContainer");
		form.add(listViewContainer);
		listViewContainer.setOutputMarkupId(true);

		final ListView<Object> listView;
		listViewContainer.add(listView = new ListView<Object>("listView",
			new IModel<List<Object>>()
			{
				@Override
				public List<Object> getObject()
				{
					List<Object> objects = new LinkedList<>();
					for (int i = 0; i < rows; i++)
					{
						objects.add(new Object());
					}

					return objects;
				}
			})
		{
			@Override
			protected void populateItem(ListItem<Object> item)
			{
				item.add(new Label("label", Long.toString(item.getIndex())));
			}
		});

		form.add(new AjaxFallbackButton("addButton", form)
		{
			@Override
			protected void onSubmit(Optional<AjaxRequestTarget> targetOptional)
			{
				rows++;
				listView.removeAll();
				targetOptional.ifPresent(target -> target.add(listViewContainer));
			}

			@Override
			protected void onError(AjaxRequestTarget target)
			{
			}
		}.setDefaultFormProcessing(false));
	}

