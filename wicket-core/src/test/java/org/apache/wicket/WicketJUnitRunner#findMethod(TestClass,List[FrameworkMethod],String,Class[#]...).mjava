	/**
	 * Finds a method in the hierarchy of the tested class by his name
	 * 
	 * @param testClass
	 *            the junit class representation
	 * @param junitMethods
	 *            the collection where to add the found method
	 * @param methodName
	 *            the name of the method to find
	 * @param parameterTypes
	 *            the types of the parameters of the method to find
	 */
	private void findMethod(TestClass testClass, List<FrameworkMethod> junitMethods,
		String methodName, Class<?>... parameterTypes)
	{
		try
		{
			Class<?> clazz = getTestClass().getJavaClass();
			while (clazz != null && Object.class.equals(clazz) == false)
			{
				try
				{
					Method javaMethod = clazz.getDeclaredMethod(methodName, parameterTypes);
					if (javaMethod != null &&
						Modifier.isProtected(javaMethod.getModifiers()) &&
						(javaMethod.getReturnType().equals(Void.TYPE) || javaMethod.getReturnType()
							.equals(Void.class)))
					{
						javaMethod.setAccessible(true);
						junitMethods.add(new FrameworkMethod(javaMethod));
						break;
					}
				}
				catch (NoSuchMethodException nsmx)
				{
				}
				clazz = clazz.getSuperclass();
			}
		}
		catch (Exception e)
		{
			throw new RuntimeException(e);
		}
	}

