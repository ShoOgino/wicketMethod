	/**
	 * This is Wicket's main method to execute a request
	 *
	 * @param request
	 *      the http request
	 * @param response
	 *      the http response
	 * @param chain
	 *      the filter chain
	 * @return false, if the request could not be processed
	 * @throws IOException
	 * @throws ServletException
	 */
	// TODO improve WicketFilter#processRequest() to provide a hook instead of copy/pasting its whole code
	@Override
	boolean processRequest(ServletRequest request, final ServletResponse response,
	                       final FilterChain chain) throws IOException, ServletException
	{
		final ThreadContext previousThreadContext = ThreadContext.detach();

		// Assume we are able to handle the request
		boolean res = true;

		final ClassLoader previousClassLoader = Thread.currentThread().getContextClassLoader();
		final ClassLoader newClassLoader = getClassLoader();

		try
		{
			if (previousClassLoader != newClassLoader)
			{
				Thread.currentThread().setContextClassLoader(newClassLoader);
			}

			HttpServletRequest httpServletRequest = (HttpServletRequest)request;
			HttpServletResponse httpServletResponse = (HttpServletResponse)response;

			// Make sure getFilterPath() gets called before checkIfRedirectRequired()
			String filterPath = getFilterPath(httpServletRequest);

			if (filterPath == null)
			{
				throw new IllegalStateException("filter path was not configured");
			}

			WebApplication application = getApplication();
			// No redirect; process the request
			ThreadContext.setApplication(application);

			WebRequest webRequest = application.createWebRequest(httpServletRequest, filterPath);
			WebResponse webResponse = application.createWebResponse(webRequest,
					httpServletResponse);

			RequestCycle requestCycle = application.createRequestCycle(webRequest, webResponse);
			ThreadContext.setRequestCycle(requestCycle);

			if (acceptWebSocket(httpServletRequest, httpServletResponse, application) || httpServletResponse.isCommitted())
			{
				res = true;
			}
			else if (!requestCycle.processRequestAndDetach() && !httpServletResponse.isCommitted())
			{
				if (chain != null)
				{
					chain.doFilter(request, response);
				}
				res = false;
			}
			else
			{
				webResponse.flush();
			}

		}
		finally
		{
			ThreadContext.restore(previousThreadContext);

			if (newClassLoader != previousClassLoader)
			{
				Thread.currentThread().setContextClassLoader(previousClassLoader);
			}

			if (response.isCommitted())
			{
				response.flushBuffer();
			}
		}
		return res;
	}

