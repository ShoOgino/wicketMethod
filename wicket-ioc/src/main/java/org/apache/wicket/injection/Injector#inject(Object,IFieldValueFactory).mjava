	/**
	 * traverse fields in the class hierarchy of the object and set their value with a locator
	 * provided by the locator factory.
	 * 
	 * @param object
	 * @param factory
	 * @return Object that was injected - used for chaining
	 */
	public Object inject(Object object, IFieldValueFactory factory)
	{
		final Class<?> clazz = object.getClass();

		Field[] fields = null;

		// try cache
		ConcurrentHashMap<String, Field[]> container = cache.get(clazz.getClassLoader());
		if (container != null)
		{
			fields = container.get(clazz.getName());
		}

		if (fields == null)
		{
			fields = findFields(clazz, factory);

			// write to cache
			container = new ConcurrentHashMap<String, Field[]>();
			container.put(clazz.getName(), fields);
			cache.put(clazz.getClassLoader(), container);
		}

		for (int i = 0; i < fields.length; i++)
		{
			final Field field = fields[i];

			if (!field.isAccessible())
			{
				field.setAccessible(true);
			}
			try
			{

				if (field.get(object) == null)
				{

					Object value = factory.getFieldValue(field, object);

					if (value != null)
					{
						field.set(object, value);
					}
				}
			}
			catch (IllegalArgumentException e)
			{
				throw new RuntimeException("error while injecting object [" + object.toString() +
					"] of type [" + object.getClass().getName() + "]", e);
			}
			catch (IllegalAccessException e)
			{
				throw new RuntimeException("error while injecting object [" + object.toString() +
					"] of type [" + object.getClass().getName() + "]", e);
			}
		}

		return object;
	}

