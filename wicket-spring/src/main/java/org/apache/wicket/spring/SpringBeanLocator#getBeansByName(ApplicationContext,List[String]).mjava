	/**
	 * Retrieves a list of beans or a single bean for the given list of names and assignable to the
	 * current field to inject.
	 * 
	 * @param ctx
	 * 				spring application context.
	 * @param names
	 * 				the list of candidate names
	 * @return a list of matching beans or a single one.
	 */
	private Object getBeansByName(ApplicationContext ctx, List<String> names)
	{
		FieldBeansCollector beansCollector = new FieldBeansCollector(fieldResolvableType);
		
		for (String beanName : names)
		{
			RootBeanDefinition beanDef = getBeanDefinition(ctx, beanName);

			if (beanDef == null)
			{
				continue;
			}

			ResolvableType candidateResolvableType = null;

			//check if we have the class of the bean or the factory method.
			//Usually if use XML as config file we have the class while we 
			//have the factory method if we use Java-based configuration.
			if (beanDef.hasBeanClass())
			{
				candidateResolvableType = ResolvableType.forClass(beanDef.getBeanClass());
			}
			else if (beanDef.getResolvedFactoryMethod() != null)
			{
				candidateResolvableType = ResolvableType.forMethodReturnType(
					beanDef.getResolvedFactoryMethod());
			}

			if (candidateResolvableType == null)
			{
				continue;
			}

			boolean exactMatch = fieldResolvableType.isAssignableFrom(candidateResolvableType);
			boolean elementMatch = fieldElementsResolvableType != null ? 
				fieldElementsResolvableType.isAssignableFrom(candidateResolvableType) : false;

			if (exactMatch)
			{
				this.beanName = beanName;
				return ctx.getBean(beanName);
			}
			
			if (elementMatch)
			{
				beansCollector.addBean(beanName, ctx.getBean(beanName));
			}

		}
		
		return beansCollector.getBeansToInject();
	}

