	/**
	 * Tests for {@link Files#removeFolderAsync(java.io.File, IFileCleaner)}
	 *
	 * @throws Exception
	 */
	@Test
	@Disabled // the test is unreliable on the CI server
	public void removeFolderAsync() throws Exception
	{
		assertFalse(Files.removeFolderAsync(null, null), "'null' folders are not deleted.");

		IFileCleaner fileCleaner = new FileCleaner();

		File nonExistingFolder = new File(
			"/somethingThatDoesntExistsOnMostMachines-111111111111111111111111111111");
		assertTrue(Files.removeFolderAsync(nonExistingFolder, fileCleaner),
			"Even non existing folders are scheduled for deletion.");
		assertFalse(nonExistingFolder.exists());

		java.io.File folder = getFolder();
		Files.mkdirs(folder);
		assertTrue(folder.isDirectory());
		File file = new File(folder, "child");
		file.createNewFile();
		assertTrue(file.exists());

		assertTrue(Files.removeFolderAsync(folder, fileCleaner),
			"The folder is scheduled for deletion.");

		// remove the reference to the folder to be deleted
		// this way the FileCleaningTracker's ReferenceQueue will mark it as eligible for GC
		folder = null;

		// give chance to the file cleaner to run and delete the folder
		System.gc();
		Thread.sleep(5);
		java.io.File newFolderReference = getFolder();
		assertFalse(newFolderReference.exists(), "The folder still exists");
	}

