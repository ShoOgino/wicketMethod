	/**
	 * Tests for {@link Files#removeAsync(java.io.File, IFileCleaner)}
	 *
	 * @throws Exception
	 */
	@Test
	@Disabled // the test is unreliable on the CI server
	public void removeAsync() throws Exception
	{

		IFileCleaner fileCleaner = new FileCleaner();

		assertFalse(Files.removeAsync(null, fileCleaner), "'null' files are not deleted.");

		File nonExistingFile = new File(
			"/somethingThatDoesntExistsOnMostMachines-111111111111111111111111111111");
		assertTrue(Files.removeFolderAsync(nonExistingFile, fileCleaner),
			"Even non existing file are scheduled for deletion.");
		assertFalse(nonExistingFile.exists());

		java.io.File file = getFile();
		file.createNewFile();
		assertTrue(file.exists(), "The just created file should exist!");
		assertTrue(file.isFile());

		assertTrue(Files.removeAsync(file, fileCleaner), "The file is scheduled for deletion.");

		// remove the reference to the file to be deleted
		// this way the FileCleaningTracker's ReferenceQueue will mark it as eligible for GC
		file = null;

		// give chance to the file cleaner to run and delete the folder
		System.gc();
		boolean exists = true;
		for (int i = 0; i < 10; i++)
		{
			Thread.sleep(5);
			java.io.File newFileReference = getFile();
			if (!newFileReference.exists())
			{
				exists = false;
				break;
			}
		}
		assertFalse(exists, "The file no longer exists");
	}

