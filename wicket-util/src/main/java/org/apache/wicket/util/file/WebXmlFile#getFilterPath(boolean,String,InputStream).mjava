	/**
	 * Gets Wicket filter path via filter name and InputStream. The InputStream is assumed to be an
	 * web.xml file.
	 * <p>
	 * A typical Wicket web.xml entry looks like:
	 * 
	 * <pre>
	 * <code>
	 * &lt;filter&gt;
	 *   &lt;filter-name&gt;HelloWorldApplication&lt;/filter-name&gt;
	 *   &lt;filter-class&gt;org.apache.wicket.protocol.http.WicketFilter&lt;/filter-class&gt;
	 *   &lt;init-param&gt;
	 *     &lt;param-name&gt;applicationClassName&lt;/param-name&gt;
	 *     &lt;param-value&gt;org.apache.wicket.examples.helloworld.HelloWorldApplication&lt;/param-value&gt;
	 *   &lt;/init-param&gt;
	 * &lt;/filter&gt;
	 * 
	 * &lt;filter-mapping&gt;
	 *   &lt;filter-name&gt;HelloWorldApplication&lt;/filter-name&gt;
	 *   &lt;url-pattern&gt;/helloworld/*&lt;/url-pattern&gt;
	 *   &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;
	 *   &lt;dispatcher&gt;INCLUDE&lt;/dispatcher&gt;
	 * &lt;/filter-mapping&gt;
	 * </code>
	 * </pre>
	 * 
	 * @param isServlet
	 *            true if Servlet, false if Filter
	 * @param filterName
	 * @param is
	 *            The web.xml file
	 * @return Filter paths retrieved from "url-pattern".
	 * @throws ParserConfigurationException
	 * @throws IOException
	 * @throws SAXException
	 */
	public final Set<String> getFilterPath(final boolean isServlet, final String filterName,
		final InputStream is) throws ParserConfigurationException, SAXException, IOException
	{
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = factory.newDocumentBuilder();

		// try to pull DTD from local set of entities
		builder.setEntityResolver(CustomEntityResolver.getPreloaded());
		Document document = builder.parse(is);

		String tag = (isServlet ? "servlet" : "filter");
		String mapping = tag + "-mapping";
		String name = tag + "-name";

		Set<String> urlPatterns = getFilterPaths(filterName, mapping, name,
			document.getChildNodes());

		if (urlPatterns.size() == 0)
		{
			log.warn("web.xml: No url-pattern found for '{}' with name '{}'", tag, filterName);
		}

		if (log.isInfoEnabled())
		{
			StringBuilder msg = new StringBuilder();
			msg.append("web.xml: url mapping found for ")
				.append(tag)
				.append(" with name ")
				.append(filterName)
				.append(':');

			for (String urlPattern : urlPatterns)
			{
				msg.append(" [");
				msg.append(urlPattern);
				msg.append(']');
			}
			log.info(msg.toString());
		}
		Set<String> stripped = new HashSet<>(urlPatterns.size());

		for (String urlPattern : urlPatterns)
		{
			stripped.add(urlPattern.substring(1, urlPattern.length() - 1));
		}
		return stripped;
	}

