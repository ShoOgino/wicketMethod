	/**
	 * @param unsafeInput
	 *            string to encode
	 * @param charset
	 *            encoding to use
	 * @return encoded string
	 */
	public String encode(final String unsafeInput, final Charset charset)
	{
		if (unsafeInput == null || unsafeInput.isEmpty())
		{
			return unsafeInput;
		}

		Args.notNull(charset, "charset");

		final byte[] bytes = unsafeInput.getBytes(charset);
		boolean original = true;
		for (final byte b : bytes)
		{
			if (!type.isAllowed(b) || b == ' ' || b == '\0')
			{
				original = false;
				break;
			}
		}
		if (original)
		{
			return unsafeInput;
		}

		final ByteArrayOutputStream bos = new ByteArrayOutputStream(bytes.length);
		for (final byte b : bytes)
		{
			if (type.isAllowed(b))
			{
				if (b == ' ')
				{
					bos.write('+');
				}
				else
				{
					bos.write(b);
				}
			}
			else
			{
				if (b == '\0')
				{
					bos.writeBytes("NULL".getBytes(charset));
				}
				else
				{
					bos.write('%');
					bos.write(Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)));
					bos.write(Character.toUpperCase(Character.forDigit(b & 0xF, 16)));
				}
			}
		}
		return new String(bos.toByteArray(), charset);
	}

