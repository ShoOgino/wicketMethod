	/**
	 * Takes a package and a path to a resource and returns an absolute path to the resource. For
	 * example, if the given package was java.lang and the relative path was "../util/List", then
	 * "java/util/List" would be returned. An already absolute path stays absolute.
	 * <p>
	 * Note: The returned absolute path does not start with a slash ("/").
	 * 
	 * @param packageName
	 *            The package to start at
	 * @param path
	 *            The path to the resource
	 * @return The absolute path
	 */
	public static String absolutePath(final String packageName, final String path)
	{
		// Is path already absolute?
		if (path.startsWith("/"))
		{
			return path.substring(1);
		}
		else
		{
			// Break package into list of package names
			final StringList absolutePath = StringList.tokenize(packageName, ".");

			// Break path into folders
			final StringList folders = StringList.tokenize(path, "/\\");

			// Iterate through folders
			for (int i = 0, size = folders.size(); i < size; i++)
			{
				// Get next folder
				final String folder = folders.get(i);

				// Up one?
				if ("..".equals(folder))
				{
					// Pop off stack
					if (absolutePath.size() > 0)
					{
						absolutePath.removeLast();
					}
					else
					{
						throw new IllegalArgumentException("Invalid path " + path);
					}
				}
				else
				{
					// Add to stack
					absolutePath.add(folder);
				}
			}

			// Return absolute path
			return absolutePath.join("/");
		}
	}

