	/**
	 * Actually deletes the file object, which may be a file or a directory.
	 * <p>
	 * This method is designed for subclasses to override. The implementation may return either
	 * false or an <code>IOException</code> when deletion fails. The {@link #delete(File)} and
	 * {@link #deleteQuietly(File)} methods will handle either response appropriately. A check has
	 * been made to ensure that the file will exist.
	 * <p>
	 * This implementation uses {@link File#delete()}.
	 * 
	 * @param fileToDelete
	 *            the file to delete, exists, not null
	 * @return true if the file was deleteds
	 * @throws NullPointerException
	 *             if the file is null
	 * @throws IOException
	 *             if an error occurs during file deletion
	 */
	protected boolean doDelete(final File fileToDelete) throws IOException
	{
		return fileToDelete.delete();
	}

