	/**
	 * Processes an <a href="http://www.ietf.org/rfc/rfc1867.txt">RFC 1867</a> compliant
	 * <code>multipart/form-data</code> stream.
	 * 
	 * @param ctx
	 *            The context for the request to be parsed.
	 * 
	 * @return A list of <code>FileItem</code> instances parsed from the request, in the order that
	 *         they were transmitted.
	 * 
	 * @throws FileUploadException
	 *             if there are problems reading/parsing the request or storing files.
	 */
	public List<FileItem> parseRequest(final RequestContext ctx) throws FileUploadException
	{
		try
		{
			FileItemIterator iter = getItemIterator(ctx);
			List<FileItem> items = Generics.newArrayList();
			FileItemFactory fac = getFileItemFactory();
			if (fac == null)
			{
				throw new NullPointerException("No FileItemFactory has been set.");
			}
			while (iter.hasNext())
			{
				FileItemStream item = iter.next();
				FileItem fileItem = fac.createItem(item.getFieldName(), item.getContentType(),
					item.isFormField(), item.getName());
				try
				{
					Streams.copyAndClose(item.openStream(), fileItem.getOutputStream());
				}
				catch (FileUploadIOException e)
				{
					throw (FileUploadException)e.getCause();
				}
				catch (IOException e)
				{
					throw new IOFileUploadException("Processing of " + MULTIPART_FORM_DATA +
						" request failed. " + e.getMessage(), e);
				}
				if (fileItem instanceof FileItemHeadersSupport)
				{
					final FileItemHeaders fih = item.getHeaders();
					((FileItemHeadersSupport)fileItem).setHeaders(fih);
				}
				items.add(fileItem);
			}
			return items;
		}
		catch (FileUploadIOException e)
		{
			throw (FileUploadException)e.getCause();
		}
		catch (IOException e)
		{
			throw new FileUploadException(e.getMessage(), e);
		}
	}

