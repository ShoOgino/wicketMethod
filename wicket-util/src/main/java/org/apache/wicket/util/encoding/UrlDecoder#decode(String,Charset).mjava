	/**
	 * @param source
	 *            string to decode
	 * @param charset
	 *            encoding to decode with
	 * @return decoded string
	 */
	public String decode(final String source, final Charset charset)
	{
		if (source == null || source.isEmpty())
		{
			return source;
		}

		Args.notNull(charset, "charset");

		final int length = source.length();
		final ByteArrayOutputStream bos = new ByteArrayOutputStream(length);
		boolean changed = false;
		for (int i = 0; i < length; i++)
		{
			final int ch = source.charAt(i);
			if (ch == '%')
			{
				if (i + 2 < length)
				{
					final char hex1 = source.charAt(i + 1);
					final char hex2 = source.charAt(i + 2);
					final int u = Character.digit(hex1, 16);
					final int l = Character.digit(hex2, 16);
					if (u != -1 && l != -1)
					{
						bos.write((char)((u << 4) + l));
						i += 2;
					}
					changed = true;
				}
				else
				{
					LOG.info(
						"Incomplete trailing escape (%) pattern in '{}'. The escape character (%) will be ignored.",
						source);
				}
			}
			else if (ch == '+')
			{
				if (decodePlus)
				{
					bos.write(' ');
					changed = true;
				}
				else
				{
					bos.write(ch);
				}
			}
			else
			{
				bos.write(ch);
			}
		}
		final String result = changed ? new String(bos.toByteArray(), charset) : source;
		// no trying to filter out bad escapes beforehand, just kill all null bytes here at the end,
		// that way none will come through
		return result.replace("\0", "NULL");
	}

