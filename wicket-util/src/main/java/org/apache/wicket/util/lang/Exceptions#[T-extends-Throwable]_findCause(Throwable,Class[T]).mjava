	/**
	 * Looks for a cause of the specified type in throwable's chain
	 * 
	 * @param <T>
	 * @param throwable
	 * @param causeType
	 * @return matched {@link Throwable} in the chain or {@code null} if none
	 */
	public static <T extends Throwable> T findCause(Throwable throwable, final Class<T> causeType)
	{
		return visit(throwable, new IThrowableVisitor<T>()
		{
			@SuppressWarnings("unchecked")
			public void visit(Throwable throwable, Visit<T> visit)
			{
				if (causeType.isAssignableFrom(throwable.getClass()))
				{
					visit.stop((T)throwable);
				}

			}
		});
	}

