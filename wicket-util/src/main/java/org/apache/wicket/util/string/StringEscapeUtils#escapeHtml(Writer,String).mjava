	/**
	 * <p>
	 * Escapes the characters in a <code>String</code> using HTML entities and writes them to a
	 * <code>Writer</code>.
	 * </p>
	 * 
	 * <p>
	 * For example:
	 * </p>
	 * <code>"bread" & "butter"</code>
	 * <p>
	 * becomes:
	 * </p>
	 * <code>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</code>.
	 * 
	 * <p>
	 * Supports all known HTML 4.0 entities, including funky accents. Note that the commonly used
	 * apostrophe escape character (&amp;apos;) is not a legal entity and so is not supported).
	 * </p>
	 * 
	 * @param writer
	 *            the writer receiving the escaped string, not null
	 * @param string
	 *            the <code>String</code> to escape, may be null
	 * @throws IllegalArgumentException
	 *             if the writer is null
	 * @throws IOException
	 *             when <code>Writer</code> passed throws the exception from calls to the
	 *             {@link Writer#write(int)} methods.
	 * 
	 * @see #escapeHtml(String)
	 * @see #unescapeHtml(String)
	 * @see <a href="http://hotwired.lycos.com/webmonkey/reference/special_characters/">ISO
	 *      Entities</a>
	 * @see <a href="http://www.w3.org/TR/REC-html32#latin1">HTML 3.2 Character Entities for ISO
	 *      Latin-1</a>
	 * @see <a href="http://www.w3.org/TR/REC-html40/sgml/entities.html">HTML 4.0 Character entity
	 *      references</a>
	 * @see <a href="http://www.w3.org/TR/html401/charset.html#h-5.3">HTML 4.01 Character
	 *      References</a>
	 * @see <a href="http://www.w3.org/TR/html401/charset.html#code-position">HTML 4.01 Code
	 *      positions</a>
	 */
	public static void escapeHtml(Writer writer, String string) throws IOException
	{
		if (writer == null)
		{
			throw new IllegalArgumentException("The Writer must not be null.");
		}
		if (string == null)
		{
			return;
		}
		Entities.HTML40.escape(writer, string);
	}

