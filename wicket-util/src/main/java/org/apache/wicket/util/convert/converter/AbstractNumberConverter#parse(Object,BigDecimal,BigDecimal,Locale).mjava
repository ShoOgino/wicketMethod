	/**
	 * Parses a value as a String and returns a Number.
	 * 
	 * @param value
	 *            The object to parse (after converting with toString())
	 * @param min
	 *            The minimum allowed value or {@code null} if none
	 * @param max
	 *            The maximum allowed value or {@code null} if none
	 * @param locale
	 * @return The number
	 * @throws ConversionException
	 *             if value is unparsable or out of range
	 */
	protected BigDecimal parse(Object value, final BigDecimal min, final BigDecimal max, Locale locale)
	{
		if (locale == null)
		{
			locale = Locale.getDefault();
		}

		if (value == null)
		{
			return null;
		}
		else if (value instanceof String)
		{
			// Convert spaces to no-break space (U+00A0) as required by Java formats:
			// http://bugs.sun.com/view_bug.do?bug_id=4510618
			value = ((String)value).replaceAll("(\\d+)\\s(?=\\d)", "$1\u00A0");
		}

		final NumberFormat numberFormat = getNumberFormat(locale);
		final N number = parse(numberFormat, value, locale);

		if (number == null)
		{
			return null;
		}

		BigDecimal bigDecimal;
		if (number instanceof BigDecimal)
		{
			bigDecimal = (BigDecimal)number;
		}
		else
		{
			// should occur rarely, see #getNumberFormat(Locale)
			bigDecimal = new BigDecimal(number.toString());
		}

		if (min != null && bigDecimal.compareTo(min) < 0)
		{
			throw newConversionException("Value cannot be less than " + min, value, locale)
					.setFormat(numberFormat);
		}

		if (max != null && bigDecimal.compareTo(max) > 0)
		{
			throw newConversionException("Value cannot be greater than " + max, value, locale)
					.setFormat(numberFormat);
		}

		return bigDecimal;
	}

