	/**
	 * Save the state of the <tt>HashMap</tt> instance to a stream (i.e., serialize it).
	 * 
	 * @param s
	 *            The ObjectOutputStream
	 * @throws IOException
	 * 
	 * @serialData The <i>capacity</i> of the HashMap (the length of the bucket array) is emitted
	 *             (int), followed by the <i>size</i> of the HashMap (the number of key-value
	 *             mappings), followed by the key (Object) and value (Object) for each key-value
	 *             mapping represented by the HashMap The key-value mappings are emitted in the
	 *             order that they are returned by <tt>entrySet().iterator()</tt>.
	 * 
	 */
	private void writeObject(final java.io.ObjectOutputStream s) throws IOException
	{
		// Write out the threshold, loadfactor, and any hidden stuff
		s.defaultWriteObject();

		// Write out number of buckets
		s.writeInt(table.length);

		// Write out size (number of Mappings)
		s.writeInt(size);

		// Write out keys and values (alternating)
		for (Entry<V> entry : entrySet())
		{
			s.writeInt(entry.getKey());
			s.writeObject(entry.getValue());
		}
	}

