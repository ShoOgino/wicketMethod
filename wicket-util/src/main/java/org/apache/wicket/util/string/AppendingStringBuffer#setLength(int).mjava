	/**
	 * Sets the length of this String buffer. This string buffer is altered to represent a new
	 * character sequence whose length is specified by the argument. For every nonnegative index
	 * <i>k</i> less than <code>newLength</code>, the character at index <i>k</i> in the new
	 * character sequence is the same as the character at index <i>k</i> in the old sequence if
	 * <i>k</i> is less than the length of the old character sequence; otherwise, it is the null
	 * character <code>'&#92;u0000'</code>.
	 * 
	 * In other words, if the <code>newLength</code> argument is less than the current length of the
	 * string buffer, the string buffer is truncated to contain exactly the number of characters
	 * given by the <code>newLength</code> argument.
	 * <p>
	 * If the <code>newLength</code> argument is greater than or equal to the current length,
	 * sufficient null characters (<code>'&#92;u0000'</code>) are appended to the string buffer so
	 * that length becomes the <code>newLength</code> argument.
	 * <p>
	 * The <code>newLength</code> argument must be greater than or equal to <code>0</code>.
	 * 
	 * @param newLength
	 *            the new length of the buffer.
	 * @exception IndexOutOfBoundsException
	 *                if the <code>newLength</code> argument is negative.
	 * @see java.lang.StringBuffer#length()
	 */
	public void setLength(final int newLength)
	{
		if (newLength < 0)
		{
			throw new StringIndexOutOfBoundsException(newLength);
		}

		if (newLength > value.length)
		{
			expandCapacity(newLength);
		}

		if (count < newLength)
		{
			for (; count < newLength; count++)
			{
				value[count] = '\0';
			}
		}
		else
		{
			count = newLength;
		}
	}

