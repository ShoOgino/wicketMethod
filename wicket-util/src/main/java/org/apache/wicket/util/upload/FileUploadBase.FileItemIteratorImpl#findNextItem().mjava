		/**
		 * Called for finding the nex item, if any.
		 * 
		 * @return True, if an next item was found, otherwise false.
		 * @throws IOException
		 *             An I/O error occurred.
		 */
		private boolean findNextItem() throws IOException
		{
			if (eof)
			{
				return false;
			}
			if (currentItem != null)
			{
				currentItem.close();
				currentItem = null;
			}
			for (;;)
			{
				boolean nextPart;
				if (skipPreamble)
				{
					nextPart = multi.skipPreamble();
				}
				else
				{
					nextPart = multi.readBoundary();
				}
				if (!nextPart)
				{
					if (currentFieldName == null)
					{
						// Outer multipart terminated -> No more data
						eof = true;
						return false;
					}
					// Inner multipart terminated -> Return to parsing the outer
					multi.setBoundary(boundary);
					currentFieldName = null;
					continue;
				}
				FileItemHeaders headers = getParsedHeaders(multi.readHeaders());
				if (currentFieldName == null)
				{
					// We're parsing the outer multipart
					String fieldName = getFieldName(headers);
					if (fieldName != null)
					{
						String subContentType = headers.getHeader(CONTENT_TYPE);
						if (subContentType != null &&
							subContentType.toLowerCase().startsWith(MULTIPART_MIXED))
						{
							currentFieldName = fieldName;
							// Multiple files associated with this field name
							byte[] subBoundary = getBoundary(subContentType);
							multi.setBoundary(subBoundary);
							skipPreamble = true;
							continue;
						}
						String fileName = getFileName(headers);
						currentItem = new FileItemStreamImpl(fileName, fieldName,
							headers.getHeader(CONTENT_TYPE), fileName == null,
							getContentLength(headers));
						notifier.noteItem();
						itemValid = true;
						return true;
					}
				}
				else
				{
					String fileName = getFileName(headers);
					if (fileName != null)
					{
						currentItem = new FileItemStreamImpl(fileName, currentFieldName,
							headers.getHeader(CONTENT_TYPE), false, getContentLength(headers));
						notifier.noteItem();
						itemValid = true;
						return true;
					}
				}
				multi.discardBodyData();
			}
		}

