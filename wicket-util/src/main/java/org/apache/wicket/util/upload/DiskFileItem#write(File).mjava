	/**
	 * A convenience method to write an uploaded item to disk. The client code is not concerned with
	 * whether or not the item is stored in memory, or on disk in a temporary location. They just
	 * want to write the uploaded item to a file.
	 * <p>
	 * This implementation first attempts to rename the uploaded item to the specified destination
	 * file, if the item was originally written to disk. Otherwise, the data will be copied to the
	 * specified file.
	 * <p>
	 * This method is only guaranteed to work <em>once</em>, the first time it is invoked for a
	 * particular item. This is because, in the event that the method renames a temporary file, that
	 * file will no longer be available to copy or rename again at a later time.
	 * 
	 * @param file
	 *            The <code>File</code> into which the uploaded item should be stored.
	 * 
	 * @throws Exception
	 *             if an error occurs.
	 */
	@Override
	public void write(final File file) throws IOException
	{
		if (isInMemory())
		{
			FileOutputStream fout = new FileOutputStream(file);

			try
			{
				fout.write(get());
			}
			finally
			{
				fout.close();
			}
		}
		else
		{
			File outputFile = getStoreLocation();
			Checks.notNull(outputFile,
				"for a non-memory upload the file location must not be empty");

			// Save the length of the file
			size = outputFile.length();
			/*
			 * The uploaded file is being stored on disk in a temporary location so move it to the
			 * desired file.
			 */
			if (!outputFile.renameTo(file))
			{
				BufferedInputStream in = null;
				BufferedOutputStream out = null;
				try
				{
					in = new BufferedInputStream(new FileInputStream(outputFile));
					out = new BufferedOutputStream(new FileOutputStream(file));
					Streams.copy(in, out);
				}
				finally
				{
					IOUtils.closeQuietly(in);
					IOUtils.closeQuietly(out);
				}
			}
		}
	}

