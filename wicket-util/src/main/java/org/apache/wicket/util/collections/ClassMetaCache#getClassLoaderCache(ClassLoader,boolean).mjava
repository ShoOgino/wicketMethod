	/**
	 * @param classLoader
	 * @param create
	 * @return a {@link ConcurrentHashMap} mapping class names to injectable fields, never
	 *         <code>null</code>
	 */
	private ConcurrentHashMap<String, T> getClassLoaderCache(final ClassLoader classLoader,
		final boolean create)
	{
		ConcurrentHashMap<String, T> container = cache.get(classLoader);
		if (container == null)
		{
			if (!create)
			{
				return container;
			}

			// only lock in rare event of unknown ClassLoader
			synchronized (this)
			{
				// check again inside lock
				container = cache.get(classLoader);
				if (container == null)
				{
					container = new ConcurrentHashMap<String, T>();

					/*
					 * don't write to current cache, copy instead
					 */
					Map<ClassLoader, ConcurrentHashMap<String, T>> newCache = new WeakHashMap<ClassLoader, ConcurrentHashMap<String, T>>(
						cache);
					newCache.put(classLoader, container);
					cache = Collections.unmodifiableMap(newCache);
				}
			}
		}
		return container;
	}

