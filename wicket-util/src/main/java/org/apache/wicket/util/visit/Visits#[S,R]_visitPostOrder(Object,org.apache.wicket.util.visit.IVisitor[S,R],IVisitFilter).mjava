	/**
	 * Visits the specified object and any of its children using a post-order (child first)
	 * traversal. Children are determined by calling {@link Iterable#iterator()} if the object
	 * implements {@link Iterable}.
	 * 
	 * @param <S>
	 *            the type of object that will be visited, notice that {@code container} is not
	 *            declared as {@code Iterable<S>} because it may return a generalization of
	 *            {@code S}
	 * @param <R>
	 *            the type of object that should be returned from the visitor, use {@link Void} if
	 *            no return value is needed
	 * @param root
	 *            root object that will be visited
	 * @param visitor
	 *            the visitor
	 * @param filter
	 *            filter used to limit the types of objects that will be visited
	 * @return return value from the {@code visitor} or {@code null} if none
	 */
	public static final <S, R> R visitPostOrder(final Object root,
		final org.apache.wicket.util.visit.IVisitor<S, R> visitor, final IVisitFilter filter)
	{
		Args.notNull(visitor, "visitor");

		Visit<R> visit = new Visit<R>();
		visitPostOrderHelper(root, visitor, filter, visit);
		return visit.getResult();
	}

