	/**
	 * Allow subclass to call constructor.
	 * 
	 * @param type
	 *            encoder type
	 */
	protected UrlEncoder(final Type type)
	{
		/*
		 * This note from java.net.URLEncoder ==================================
		 * 
		 * The list of characters that are not encoded has been determined as follows:
		 * 
		 * RFC 2396 states: ----- Data characters that are allowed in a URI but do not have a
		 * reserved purpose are called unreserved. These include upper and lower case letters,
		 * decimal digits, and a limited set of punctuation marks and symbols.
		 * 
		 * unreserved = alphanum | mark
		 * 
		 * mark = "-" | "_" | "." | "!" | "~" | "*" | "'" | "(" | ")"
		 * 
		 * Unreserved characters can be escaped without changing the semantics of the URI, but this
		 * should not be done unless the URI is being used in a context that does not allow the
		 * unescaped character to appear. -----
		 * 
		 * It appears that both Netscape and Internet Explorer escape all special characters from
		 * this list with the exception of "-", "_", ".", "*". While it is not clear why they are
		 * escaping the other characters, perhaps it is safest to assume that there might be
		 * contexts in which the others are unsafe if not escaped. Therefore, we will use the same
		 * list. It is also noteworthy that this is consistent with O'Reilly's
		 * "HTML: The Definitive Guide" (page 164).
		 * 
		 * As a last note, Intenet Explorer does not encode the "@" character which is clearly not
		 * unreserved according to the RFC. We are being consistent with the RFC in this matter, as
		 * is Netscape.
		 * 
		 * This bit added by Doug Donohoe ================================== RFC 3986 (2005) updates
		 * this (http://tools.ietf.org/html/rfc3986):
		 * 
		 * unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
		 * 
		 * pct-encoded = "%" HEXDIG HEXDIG
		 * 
		 * reserved = gen-delims / sub-delims
		 * 
		 * gen-delims = ":" / "/" / "?" / "#" / "[" / "]" / "@"
		 * 
		 * sub-delims = "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "=" // -- PATH
		 * COMPONENT -- //
		 * 
		 * path = (see RFC for all variations) path-abempty =( "/" segment ) segment =pchar pchar =
		 * unreserved / pct-encoded / sub-delims / ":" / "@" // -- QUERY COMPONENT -- //
		 * 
		 * query =( pchar / "/" / "?" )
		 */

		// unreserved
		dontNeedEncoding = new BitSet(256);
		int i;
		for (i = 'a'; i <= 'z'; i++)
		{
			dontNeedEncoding.set(i);
		}
		for (i = 'A'; i <= 'Z'; i++)
		{
			dontNeedEncoding.set(i);
		}
		for (i = '0'; i <= '9'; i++)
		{
			dontNeedEncoding.set(i);
		}
		dontNeedEncoding.set('-');
		dontNeedEncoding.set('.');
		dontNeedEncoding.set('_');
		// tilde encoded by java.net.URLEncoder version, but RFC is clear on this
		dontNeedEncoding.set('~');

		// sub-delims
		dontNeedEncoding.set('!');
		dontNeedEncoding.set('$');

		// encoding type-specific
		switch (type)
		{
			case QUERY :
				// this code consistent with java.net.URLEncoder version#
				
				// encoding a space to a + is done in the encode() method
				dontNeedEncoding.set(' ');
				
				// sub-delims continued
				dontNeedEncoding.set('*');
				dontNeedEncoding.set('/'); // to allow direct passing of URL in query
				dontNeedEncoding.set(',');
				// "'" doesn't need encoding, but it will make it easier to use in in JavaScript  
				// "(" and ")" don't need encoding, but we'll be conservative

				dontNeedEncoding.set(':'); // allowed and used in wicket interface
				dontNeedEncoding.set('@');

				/*
				 * the below encoding of a ? is disabled because it interferes in portlet
				 * environments. as far as i can tell it will not interfere with the ability to pass
				 * around urls in the query string. however, should it cause problems we can
				 * re-enable it as portlet environments are not high priority. we can also add a
				 * switch somewhere to enable/disable this on applicaiton level. (WICKET-4019)
				 */
				// dontNeedEncoding.set('?'); // to allow direct passing of URL in query
				break;

			case PATH :
				// this added to deal with encoding a PATH segment
				
				// sub-delims continued
				dontNeedEncoding.set('*');
				dontNeedEncoding.set('&');
				dontNeedEncoding.set('+');
				// "'" doesn't need encoding, but it will make it easier to use in in JavaScript  
				// "(" and ")" don't need encoding, but we'll be conservative
				dontNeedEncoding.set(',');
				dontNeedEncoding.set(';'); // semicolon is used in ;jsessionid=
				dontNeedEncoding.set('=');
				
				dontNeedEncoding.set(':'); // allowed and used in wicket interface
				dontNeedEncoding.set('@');

				break;
				
			// this added to deal with encoding a PATH component
			case HEADER :
				// this added to deal with encoding of header
				
				// ' ' is encoded

				// sub-delims continued
				dontNeedEncoding.set('#');
				dontNeedEncoding.set('&');
				dontNeedEncoding.set('+');
				
				dontNeedEncoding.set('^');
				dontNeedEncoding.set('`');
				dontNeedEncoding.set('|');
				break;
		}
	}

