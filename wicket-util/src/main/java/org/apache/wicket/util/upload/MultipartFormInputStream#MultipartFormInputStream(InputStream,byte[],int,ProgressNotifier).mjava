	/**
	 * <p>
	 * Constructs a <code>MultipartStream</code> with a custom size buffer.
	 * 
	 * <p>
	 * Note that the buffer must be at least big enough to contain the boundary string, plus 4
	 * characters for CR/LF and double dash, plus at least one byte of data. Too small a buffer size
	 * setting will degrade performance.
	 * 
	 * @param input
	 *            The <code>InputStream</code> to serve as a data source.
	 * @param boundary
	 *            The token used for dividing the stream into <code>encapsulations</code>.
	 * @param bufSize
	 *            The size of the buffer to be used, in bytes.
	 * @param pNotifier
	 *            The notifier, which is used for calling the progress listener, if any.
	 * 
	 * @see #MultipartFormInputStream(InputStream, byte[],
	 *      MultipartFormInputStream.ProgressNotifier)
	 */
	MultipartFormInputStream(final InputStream input, final byte[] boundary, final int bufSize,
		final ProgressNotifier pNotifier)
	{
		this.input = input;
		this.bufSize = bufSize;
		buffer = new byte[bufSize];
		notifier = pNotifier;

		// We prepend CR/LF to the boundary to chop trailng CR/LF from
		// body-data tokens.
		boundaryLength = boundary.length + BOUNDARY_PREFIX.length;
		if (bufSize < this.boundaryLength + 1)
		{
			throw new IllegalArgumentException(
				"The buffer size specified for the MultipartFormInputStream is too small");
		}
		this.boundary = new byte[this.boundaryLength];
		keepRegion = this.boundary.length;

		System.arraycopy(BOUNDARY_PREFIX, 0, this.boundary, 0, BOUNDARY_PREFIX.length);
		System.arraycopy(boundary, 0, this.boundary, BOUNDARY_PREFIX.length, boundary.length);

		head = 0;
		tail = 0;
	}

