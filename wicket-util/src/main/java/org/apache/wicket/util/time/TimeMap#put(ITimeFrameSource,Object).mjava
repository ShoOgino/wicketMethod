	/**
	 * Associates an <code>Object</code> with a dynamic <code>TimeFrame</code>.
	 * 
	 * @param source
	 *            a source that can produce a <code>TimeFrame</code> with which to compare a
	 *            <code>Time</code> value
	 * @param o
	 *            the <code>Object</code> to be returned for the given dynamic
	 *            <code>TimeFrame</code>
	 */
	public void put(final ITimeFrameSource source, final Object o)
	{
		final TimeFrame timeframe = source.getTimeFrame();

		for (ITimeFrameSource tfs : sources.keySet())
		{
			final TimeFrame current = tfs.getTimeFrame();

			if (timeframe.overlaps(current))
			{
				throw new IllegalArgumentException("Timeframe " + timeframe +
					" overlaps timeframe " + current);
			}
		}

		sources.put(source, o);
	}

