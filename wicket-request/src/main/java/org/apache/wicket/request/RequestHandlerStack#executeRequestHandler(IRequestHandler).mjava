	/**
	 * Executes the specified {@link IRequestHandler}. When the specified {@link IRequestHandler}
	 * finishes, the {@link IRequestHandler} that invoked this method continues (unless the new
	 * {@link IRequestHandler} called {@link #replaceAllRequestHandlers(IRequestHandler)}.
	 * 
	 * @param handler
	 */
	public void executeRequestHandler(final IRequestHandler handler)
	{
		final boolean first = requestHandlers.isEmpty();
		requestHandlers.add(handler);

		IRequestHandler replacementHandler = null;
		Response originalResponse = response;
		try
		{
			handler.respond(getRequestCycle());
		}
		catch (RuntimeException exception)
		{
			ReplaceHandlerException replacer = Exceptions.findCause(exception,
				ReplaceHandlerException.class);

			if (replacer == null)
			{
				throw exception;
			}

			if (replacer.removeAll && !first)
			{
				throw exception;
			}
			replacementHandler = replacer.replacementRequestHandler;
		}
		finally
		{
			response = originalResponse;
			requestHandlers.poll();
			inactiveRequestHandlers.add(handler);
		}

		IRequestHandler scheduled = scheduledAfterCurrent;
		scheduledAfterCurrent = null;

		if (replacementHandler != null)
		{
			executeRequestHandler(replacementHandler);
		}
		else if (scheduled != null)
		{
			executeRequestHandler(scheduled);
		}
	}

