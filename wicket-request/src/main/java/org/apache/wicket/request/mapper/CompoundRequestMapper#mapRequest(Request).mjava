	/**
	 * Searches the registered {@link IRequestMapper}s to find one that can map the {@link Request}.
	 * Each registered {@link IRequestMapper} is asked to provide its compatibility score. Then the
	 * mappers are asked to map the request in order depending on the provided compatibility
	 * score.
	 * <p>
	 * The mapper with highest compatibility score which can map the request is returned.
	 * 
	 * @param request
	 * @return RequestHandler for the request or <code>null</code> if no mapper for the request is
	 *         found.
	 */
	@Override
	public IRequestHandler mapRequest(final Request request)
	{
		List<MapperWithScore> list = new ArrayList<>(mappers.size());

		for (IRequestMapper mapper : mappers)
		{
			int score = mapper.getCompatibilityScore(request);
			list.add(new MapperWithScore(mapper, score));
		}

		Collections.sort(list);

		if (LOG.isDebugEnabled())
		{
			logMappers(list, request.getUrl().toString());
		}

		for (MapperWithScore mapperWithScore : list)
		{
			IRequestMapper mapper = mapperWithScore.getMapper();
			IRequestHandler handler = mapper.mapRequest(request);
			if (handler != null)
			{
				return handler;
			}
		}

		return null;
	}

