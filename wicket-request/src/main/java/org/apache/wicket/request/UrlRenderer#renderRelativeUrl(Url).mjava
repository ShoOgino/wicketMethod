	/**
	 * Renders the Url relative to currently set Base Url.
	 * 
	 * This method is only intended for Wicket URLs, because the {@link Url} object represents part
	 * of URL after Wicket Filter.
	 * 
	 * For general URLs within context use {@link #renderContextPathRelativeUrl(String)}
	 * 
	 * @param url
	 * @return Url rendered as string
	 */
	public String renderRelativeUrl(final Url url)
	{
		Args.notNull(url, "url");

		if (url.isAbsolute())
		{
			return url.toString();
		}
		else
		{
			List<String> baseUrlSegments = getBaseUrl().getSegments();
			List<String> urlSegments = new ArrayList<String>(url.getSegments());

			List<String> newSegments = new ArrayList<String>();

			int common = 0;

			String last = null;

			for (String s : baseUrlSegments)
			{
				if (!urlSegments.isEmpty() && s.equals(urlSegments.get(0)))
				{
					++common;
					last = urlSegments.remove(0);
				}
				else
				{
					break;
				}
			}

			// we want the new URL to have at least one segment (other than possible ../)
			if ((last != null) && (urlSegments.isEmpty() || (baseUrlSegments.size() == common)))
			{
				--common;
				urlSegments.add(0, last);
			}

			int baseUrlSize = baseUrlSegments.size();
			if (common + 1 == baseUrlSize && urlSegments.isEmpty())
			{
				newSegments.add(".");
			}
			else
			{

				for (int i = common + 1; i < baseUrlSize; ++i)
				{
					newSegments.add("..");
				}
			}
			newSegments.addAll(urlSegments);

			return new Url(newSegments, url.getQueryParameters()).toString();
		}
	}

