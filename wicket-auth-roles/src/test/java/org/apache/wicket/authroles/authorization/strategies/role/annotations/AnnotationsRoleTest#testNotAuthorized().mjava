	/**
     */
	@Test
    void testNotAuthorized() {
		WicketTester tester = new WicketTester();
		tester.getApplication()
			.getSecuritySettings()
			.setAuthorizationStrategy(
				new RoleAuthorizationStrategy(new UserRolesAuthorizer("USER")));
		final class Listener implements IUnauthorizedComponentInstantiationListener
		{
			private boolean eventReceived = false;

			@Override
			public void onUnauthorizedInstantiation(Component component)
			{
				eventReceived = true;
			}
		}
		Listener listener = new Listener();
		tester.getApplication()
			.getSecuritySettings()
			.setUnauthorizedComponentInstantiationListener(listener);

		try
		{
			tester.startPage(AdminPage.class);
			assertTrue(listener.eventReceived, "an authorization exception event should have been received");
		}
		catch (Exception e)
		{
			if (!(e.getCause() instanceof InvocationTargetException && ((InvocationTargetException)e.getCause()).getTargetException() instanceof UnauthorizedInstantiationException))
			{
				throw e;
			}
		}
	}

