	/**
	 * Remove the given authorized role from an action. Note that this is only relevant if a role
	 * was previously authorized for that action. If no roles where previously authorized the effect
	 * of the unauthorize call is that no roles at all will be authorized for that action.
	 * 
	 * @param action
	 *            The action
	 * @param rolesToRemove
	 *            The comma separated list of roles to remove
	 */
	public final void unauthorize(final Action action, final Roles rolesToRemove)
	{
		if (action == null)
		{
			throw new IllegalArgumentException("Argument action cannot be null");
		}

		if (rolesToRemove == null)
		{
			throw new IllegalArgumentException("Argument rolesToRemove cannot be null");
		}

		Roles roles = rolesForAction.get(action);
		if (roles != null)
		{
			roles.removeAll(rolesToRemove);
		}
		else
		{
			roles = new Roles();
			rolesForAction.put(action, roles);
		}

		// If we removed the last authorized role, we authorize the empty role
		// so that removing authorization can't suddenly open something up to
		// everyone.
		if (roles.size() == 0)
		{
			roles.add(MetaDataRoleAuthorizationStrategy.NO_ROLE);
		}
	}

