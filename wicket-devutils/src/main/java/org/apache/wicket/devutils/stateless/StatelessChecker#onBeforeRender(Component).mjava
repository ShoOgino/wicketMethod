	/**
	 * @see org.apache.wicket.application.IComponentOnBeforeRenderListener#onBeforeRender(org.apache.wicket.Component)
	 */
	@Override
	public void onBeforeRender(final Component component)
	{
		if (mustCheck(component))
		{
			final IVisitor<Component, Component> visitor = new IVisitor<Component, Component>()
			{
				@Override
				public void component(final Component comp, final IVisit<Component> visit)
				{
					if ((component instanceof Page) && mustCheck(comp))
					{
						// Do not go deeper, because this component will be
						// checked by checker
						// itself.
						// Actually we could go deeper but that would mean we
						// traverse it twice
						// (for current component and for inspected one).
						// We go deeper for Page because full tree will be
						// inspected during
						// isPageStateless call.
						visit.dontGoDeeper();
					}
					else if (!comp.isStateless())
					{
						visit.stop(comp);
					}
					else
					{
						// continue
					}
				}
			};

			final String msg = "'" + component + "' claims to be stateless but isn't.";
			if (!component.isStateless())
			{
				throw new IllegalArgumentException(msg +
					" Possible reasons: no stateless hint, statefull behaviors");
			}

			if (component instanceof MarkupContainer)
			{
				// Traverse children
				final Object o = ((MarkupContainer)component).visitChildren(visitor);
				if (o != null)
				{
					throw new IllegalArgumentException(msg + " Offending component: " + o);
				}
			}

			if (component instanceof Page)
			{
				final Page p = (Page)component;
				if (!p.isBookmarkable())
				{
					throw new IllegalArgumentException(msg +
						" Only bookmarkable pages can be stateless");
				}
				if (!p.isPageStateless())
				{
					throw new IllegalArgumentException(msg + " for unknown reason");
				}
			}
		}
	}

