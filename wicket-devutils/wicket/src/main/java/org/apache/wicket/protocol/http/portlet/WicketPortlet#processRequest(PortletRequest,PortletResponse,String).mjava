	/**
	 * Consumes and processes all portlet requests. All the doX methods delegate to this method,
	 * including processAction and serveResource.
	 * 
	 * @param request
	 * @param response
	 * @param requestType
	 * @param pageType
	 * @throws PortletException
	 * @throws IOException
	 */
	protected void processRequest(PortletRequest request, PortletResponse response, String pageType)
		throws PortletException, IOException
	{

		String wicketURL = null;
		String wicketFilterPath = null;
		String wicketFilterQuery = null;

		// FIXME portal comment: sets the name of the parameter to store the wicket url as a request
		// attribute, so that we can ?...?
		request.setAttribute(WICKET_URL_PORTLET_PARAMETER_ATTR,
			getWicketUrlPortletParameter(request));

		// get the actual wicketURL for this request, to be passed onto Wicket core for processing
		wicketURL = getWicketURL(request, pageType, getDefaultPage(pageType));
		if (log.isDebugEnabled())
		{
			log.debug("Portlet \"" + request.getAttribute(PortletRequest.LIFECYCLE_PHASE) +
				"\" for wicket url:" + wicketURL);
		}
		wicketFilterPath = getWicketConfigParameter(request, WICKET_FILTER_PATH,
			this.wicketFilterPath);
		wicketFilterQuery = getWicketConfigParameter(request, WICKET_FILTER_QUERY,
			this.wicketFilterQuery);

		// store the response state and request type in the request object, so they can be looked up
		// from a different context
		WicketResponseState responseState = new WicketResponseState(request, response);
		request.setAttribute(RESPONSE_STATE_ATTR, responseState);

		// need to record the effective wicket url of the rendered result, so that the subsequent
		// portlet 'view' requests can delegate to wicket to render the correct location/wicket url.
		if (responseState.isActionResponse())
		{
			// create the request dispatcher, to delegate the request to the wicket filter
			PortletRequestDispatcher rd = getPortletContext().getRequestDispatcher(wicketURL);

			if (rd != null)
			{
				// delegate to wicket filter - this is where the magic happens
				rd.include(request, response);
				// String newWicketURL = getWicketURL(request, pageType, getDefaultPage(pageType));
				if (log.isDebugEnabled())
				{
					log.debug("wicket filter inclusion complete");
				}
				processActionResponseState(wicketURL, wicketFilterPath, wicketFilterQuery, request,
					(ActionResponse)response, responseState);
			}
			else
			{
				// FIXME - throw exception?
				// no-op for now
			}
		}
		else if (responseState.isMimeResponse())
		{
			processMimeResponseRequest(request, (MimeResponse)response, wicketURL,
				wicketFilterPath, wicketFilterQuery, responseState);
		}
		else
		{
			log.warn("Unsupported Portlet lifecycle: " +
				request.getAttribute(PortletRequest.LIFECYCLE_PHASE));
		}
		if (log.isDebugEnabled())
		{
			wicketURL = getWicketURL(request, pageType, getDefaultPage(pageType));
			log.debug("end of request, wicket url:" + wicketURL);
		}
	}

