	/**
	 * @see org.apache.wicket.markup.parser.IMarkupFilter#nextTag()
	 */
	public final MarkupElement nextTag() throws ParseException
	{
		// Get the next tag from the next MarkupFilter in the chain.
		// If null, no more tags are available
		final ComponentTag tag = nextComponentTag();
		if (tag == null)
		{
			return tag;
		}

		final boolean isWicketTag = tag instanceof WicketTag;
		final boolean isEnclosureTag = isWicketTag && ((WicketTag)tag).isEnclosureTag();

		// If wicket:enclosure
		if (isEnclosureTag)
		{
			// If open tag, than put the tag onto the stack
			if (tag.isOpen())
			{
				if (stack == null)
				{
					stack = new Stack<ComponentTag>();
				}
				stack.push(tag);
			}
			// If close tag, than remove the tag from the stack and update
			// the child attribute of the open tag if required
			else if (tag.isClose())
			{
				if (stack == null)
				{
					throw new ParseException("Missing open tag for Enclosure: " + tag.toString(),
						tag.getPos());
				}

				// Remove the open tag from the stack
				ComponentTag lastEnclosure = stack.pop();

				// If the child attribute has not been given by the user,
				// than ...
				if (childId != null)
				{
					lastEnclosure.put(CHILD_ATTRIBUTE, childId);
					lastEnclosure.setModified(true);
					childId = null;
				}

				if (stack.size() == 0)
				{
					stack = null;
				}
			}
			else
			{
				throw new ParseException("Open-close tag not allowed for Enclosure: " +
					tag.toString(), tag.getPos());
			}
		}
		// Are we inside a wicket:enclosure tag?
		else if ((tag.getId() != null) && (isWicketTag == false) && (stack != null))
		{
			ComponentTag lastEnclosure = stack.lastElement();

			// If the enclosure tag has NO child attribute, than ...
			if (lastEnclosure.getString(CHILD_ATTRIBUTE) == null)
			{
				// We encountered more than one child component inside
				// the enclosure and are not able to automatically
				// determine the child component to delegate the
				// isVisible() to => Exception
				if (childId != null)
				{
					throw new ParseException(
						"Use <wicket:enclosure child='xxx'> to name the child component",
						tag.getPos());
				}
				// Remember the child id. The open tag will be updated
				// once the close tag is found. See above.
				childId = tag.getId();
			}
		}

		return tag;
	}

