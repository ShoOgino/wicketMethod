	/**
	 * Returns a channel for given file. If the file doesn't exist, the createIfDoesNotExit
	 * attribute specifies if the file should be created.
	 * 
	 * Do NOT call close on the returned chanel. Instead call
	 * {@link #returnFileChannel(FileChannel)}
	 * 
	 * @param fileName
	 * @param createIfDoesNotExist
	 * @return file channel
	 */
	public synchronized FileChannel getFileChannel(String fileName, boolean createIfDoesNotExist)
	{
		FileChannel channel = nameToChannel.get(fileName);

		if (channel == null)
		{
			channel = newFileChannel(fileName, createIfDoesNotExist);

			if (channel != null)
			{
				// we need to create new channel
				// first, check how many channels we have already opened
				if (nameToChannel.size() >= capacity)
				{
					reduceChannels();
				}

				nameToChannel.put(fileName, channel);
				channelToName.put(channel, fileName);
			}
		}

		if (channel != null)
		{
			// increase the usage count for this channel

			Integer count = channelToUseCount.get(channel);
			if (count == null || count.intValue() == 0)
			{
				channelToUseCount.put(channel, new Integer(1));
				idleChannels.remove(channel);
			}
			else
			{
				count = new Integer(count.intValue() + 1);
				channelToUseCount.put(channel, count);
			}
		}

		return channel;
	}

