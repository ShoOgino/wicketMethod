	/**
	 * Sets up the filter to process a given request cycle. Potentially wraps the request and
	 * response objects with portlet specific wrappers.
	 * 
	 * <p>
	 * Also sets up the session proxy using Apache Portals Bridge to ensure portlet session
	 * isolation. This is an option feature of Portal 2.0 spec so we just use portal bridges instead
	 * as it guarantees us support.
	 * 
	 * @see org.apache.portals.bridges.util.ServletPortletSessionProxy
	 * @param config
	 *            filter configuration
	 * @param filterRequestContext
	 * @param filterPath
	 * @return true if we are in a portlet environment
	 * @throws IOException
	 * @throws ServletException
	 */
	public boolean setupFilter(FilterConfig config, FilterRequestContext filterRequestContext,
		String filterPath) throws IOException, ServletException
	{
		boolean inPortletContext = false;
		PortletConfig portletConfig = (PortletConfig)filterRequestContext.getRequest()
			.getAttribute("javax.portlet.config");
		if (portletConfig != null)
		{
			inPortletContext = true;
			PortletRequest portletRequest = (PortletRequest)filterRequestContext.getRequest()
				.getAttribute("javax.portlet.request");
			WicketResponseState responseState = (WicketResponseState)filterRequestContext.getRequest()
				.getAttribute(WicketPortlet.RESPONSE_STATE_ATTR);
			filterRequestContext.setRequest(new PortletServletRequestWrapper(
				config.getServletContext(), filterRequestContext.getRequest(),
				ServletPortletSessionProxy.createProxy(filterRequestContext.getRequest(),
					portletRequest.getWindowID()), filterPath));
			filterRequestContext.setResponse(new PortletServletResponseWrapper(
				filterRequestContext.getResponse(), responseState));
		}
		else
		{
			ServletContext context = config.getServletContext();
			HttpServletRequest request = filterRequestContext.getRequest();
			String pathInfo = request.getRequestURI().substring(
				request.getContextPath().length() + filterPath.length());
			String portletWindowId = decodePortletWindowId(pathInfo);
			if (portletWindowId != null)
			{
				HttpSession proxiedSession = ServletPortletSessionProxy.createProxy(request,
					portletWindowId);
				pathInfo = stripWindowIdFromPathInfo(pathInfo);
				filterRequestContext.setRequest(new PortletServletRequestWrapper(context, request,
					proxiedSession, filterPath, pathInfo));
			}
		}
		return inPortletContext;
	}

