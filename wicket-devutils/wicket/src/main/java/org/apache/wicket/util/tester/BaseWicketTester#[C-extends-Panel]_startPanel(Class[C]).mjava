	/**
	 * Renders a <code>Panel</code> from a <code>Panel(String id)</code> constructor.
	 * 
	 * @param <C>
	 * 
	 * @param panelClass
	 *            a test <code>Panel</code> class with <code>Panel(String id)</code> constructor
	 * @return a rendered <code>Panel</code>
	 */
	public final <C extends Panel> Panel startPanel(final Class<C> panelClass)
	{
		return (Panel)startPage(new ITestPageSource()
		{
			private static final long serialVersionUID = 1L;

			public Page getTestPage()
			{
				return new DummyPanelPage(new TestPanelSource()
				{
					private static final long serialVersionUID = 1L;

					public Panel getTestPanel(String panelId)
					{
						try
						{
							Constructor<? extends Panel> c = panelClass.getConstructor(String.class);
							return c.newInstance(panelId);
						}
						catch (SecurityException e)
						{
							throw convertoUnexpect(e);
						}
						catch (NoSuchMethodException e)
						{
							throw convertoUnexpect(e);
						}
						catch (InstantiationException e)
						{
							throw convertoUnexpect(e);
						}
						catch (IllegalAccessException e)
						{
							throw convertoUnexpect(e);
						}
						catch (InvocationTargetException e)
						{
							throw convertoUnexpect(e);
						}
					}
				});
			}
		}).get(DummyPanelPage.TEST_PANEL_ID);
	}

