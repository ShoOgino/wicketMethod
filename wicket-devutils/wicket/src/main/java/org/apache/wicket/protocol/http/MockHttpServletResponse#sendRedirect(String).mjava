	/**
	 * Indicate sending of a redirectLocation to a particular named resource. This implementation
	 * just keeps hold of the redirectLocation info and makes it available for query.
	 * 
	 * @param location
	 *            The location to redirectLocation to
	 * @throws IOException
	 *             Not used
	 */
	public void sendRedirect(String location) throws IOException
	{
		// If the location starts with ../
		if (location.startsWith("../"))
		{
			// Test if the current url has a / in it. (a mount)
			String url = getURL();
			int index = url.lastIndexOf("/");
			if (index != -1)
			{
				// Then we have to recalculate what the real redirect is for the next request
				// which is just getContext() + getServletPath() + "/" + location;
				url = url.substring(0, index + 1) + location;
				url = RequestUtils.removeDoubleDots(url);

				// stril the servlet path again from it.
				index = url.indexOf("/");
				location = url.substring(index + 1);
			}
		}
		redirectLocation = location;
	}

